{"version":3,"file":"vant_7993c62b94ba3de011be.js","mappings":"uBAAIA,E,KCCAC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,QAIfJ,EAAoBO,EAAID,EDzBpBR,EAAW,GACfE,EAAoBQ,EAAI,CAACC,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAIjB,EAASkB,OAAQD,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYd,EAASiB,GACpCE,GAAY,EACPC,EAAI,EAAGA,EAAIR,EAASM,OAAQE,MACpB,EAAXN,GAAsBC,GAAgBD,IAAaO,OAAOC,KAAKpB,EAAoBQ,GAAGa,OAAOC,GAAStB,EAAoBQ,EAAEc,GAAKZ,EAASQ,MAC9IR,EAASa,OAAOL,IAAK,IAErBD,GAAY,EACTL,EAAWC,IAAcA,EAAeD,IAG7C,GAAGK,EAAW,CACbnB,EAASyB,OAAOR,IAAK,GACrB,IAAIS,EAAIb,SACER,IAANqB,IAAiBf,EAASe,IAGhC,OAAOf,EAvBNG,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIjB,EAASkB,OAAQD,EAAI,GAAKjB,EAASiB,EAAI,GAAG,GAAKH,EAAUG,IAAKjB,EAASiB,GAAKjB,EAASiB,EAAI,GACrGjB,EAASiB,GAAK,CAACL,EAAUC,EAAIC,IEJ/BZ,EAAoByB,EAAKpB,IACxB,IAAIqB,EAASrB,GAAUA,EAAOsB,WAC7B,IAAOtB,EAAiB,QACxB,IAAM,EAEP,OADAL,EAAoB4B,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLR1B,EAAoB4B,EAAI,CAACxB,EAAS0B,KACjC,IAAI,IAAIR,KAAOQ,EACX9B,EAAoB+B,EAAED,EAAYR,KAAStB,EAAoB+B,EAAE3B,EAASkB,IAC5EH,OAAOa,eAAe5B,EAASkB,EAAK,CAAEW,YAAY,EAAMC,IAAKJ,EAAWR,MCJ3EtB,EAAoBmC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GCAxBxC,EAAoB+B,EAAI,CAACU,EAAKC,IAAUvB,OAAOwB,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF1C,EAAoBwB,EAAKpB,IACH,oBAAX0C,QAA0BA,OAAOC,aAC1C5B,OAAOa,eAAe5B,EAAS0C,OAAOC,YAAa,CAAEC,MAAO,WAE7D7B,OAAOa,eAAe5B,EAAS,aAAc,CAAE4C,OAAO,K,MCAvD,IAAIC,EAAkB,CACrB,IAAK,GAaNjD,EAAoBQ,EAAEU,EAAKgC,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BC,KACvD,IAGIpD,EAAUiD,GAHTxC,EAAU4C,EAAaC,GAAWF,EAGhBtC,EAAI,EAC3B,GAAGL,EAAS8C,MAAMC,GAAgC,IAAxBR,EAAgBQ,KAAa,CACtD,IAAIxD,KAAYqD,EACZtD,EAAoB+B,EAAEuB,EAAarD,KACrCD,EAAoBO,EAAEN,GAAYqD,EAAYrD,IAGhD,GAAGsD,EAAS,IAAI9C,EAAS8C,EAAQvD,GAGlC,IADGoD,GAA4BA,EAA2BC,GACrDtC,EAAIL,EAASM,OAAQD,IACzBmC,EAAUxC,EAASK,GAChBf,EAAoB+B,EAAEkB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOlD,EAAoBQ,EAAEC,IAG1BiD,EAAqBC,KAA6B,uBAAIA,KAA6B,wBAAK,GAC5FD,EAAmBE,QAAQT,EAAqBU,KAAK,KAAM,IAC3DH,EAAmBI,KAAOX,EAAqBU,KAAK,KAAMH,EAAmBI,KAAKD,KAAKH,K,aCmBnF,SAAUlB,GACRA,EAAOuB,gBAAkB,CAAC,MAAQ,iBAAiB,KAAO,sDAAsD,UAAY,CAAC,IAAM,CAAC,YAAc,yBAAyB,WAAa,uBAAuB,SAAW,8DAA8D,WAAa,oEAAoE,cAAgB,sEAAsE,aAAe,CAAC,OAAO,sBAAsB,MAAQ,CAAC,CAAC,KAAO,0CAA0C,IAAM,qCAAqC,IAAM,CAAC,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,OAAO,MAAQ,KAAK,eAAgB,GAAO,CAAC,KAAO,aAAa,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,eAAe,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,QAAQ,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,eAAe,MAAQ,cAAc,eAAgB,GAAO,CAAC,KAAO,WAAW,MAAQ,kBAAkB,eAAgB,GAAO,CAAC,KAAO,UAAU,MAAQ,WAAW,eAAgB,KAAS,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,YAAY,CAAC,KAAO,kBAAkB,MAAQ,uBAAuB,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,QAAQ,MAAQ,YAAY,CAAC,KAAO,MAAM,MAAQ,aAAa,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,mBAAmB,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,WAAW,MAAQ,eAAe,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,kBAAkB,MAAQ,uBAAuB,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,WAAW,MAAQ,mBAAmB,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,eAAe,MAAQ,oBAAoB,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,gBAAgB,MAAQ,qBAAqB,CAAC,KAAO,UAAU,MAAQ,cAAc,CAAC,KAAO,SAAS,MAAQ,eAAe,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,cAAc,MAAQ,mBAAmB,CAAC,KAAO,aAAa,MAAQ,qBAAqB,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,QAAQ,MAAQ,YAAY,CAAC,KAAO,SAAS,MAAQ,gBAAgB,CAAC,KAAO,WAAW,MAAQ,iBAAiB,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,eAAe,CAAC,KAAO,MAAM,MAAQ,UAAU,CAAC,KAAO,oBAAoB,MAAQ,wBAAwB,CAAC,KAAO,kBAAkB,MAAQ,yBAAyB,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,YAAY,MAAQ,gBAAgB,CAAC,KAAO,UAAU,MAAQ,cAAc,CAAC,KAAO,UAAU,MAAQ,gBAAgB,CAAC,KAAO,MAAM,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,cAAc,MAAQ,qBAAqB,CAAC,MAAQ,OAAO,MAAQ,CAAC,CAAC,KAAO,OAAO,MAAQ,cAAc,CAAC,KAAO,OAAO,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,mBAAmB,CAAC,KAAO,eAAe,MAAQ,sBAAsB,CAAC,MAAQ,oBAAoB,MAAQ,CAAC,CAAC,KAAO,QAAQ,MAAQ,KAAK,eAAgB,MAAU,QAAU,CAAC,CAAC,KAAO,OAAO,MAAQ,KAAK,eAAgB,GAAO,CAAC,KAAO,aAAa,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,eAAe,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,QAAQ,MAAQ,OAAO,eAAgB,GAAO,CAAC,KAAO,eAAe,MAAQ,cAAc,eAAgB,GAAO,CAAC,KAAO,WAAW,MAAQ,kBAAkB,eAAgB,GAAO,CAAC,KAAO,UAAU,MAAQ,WAAW,eAAgB,GAAO,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,YAAY,CAAC,KAAO,kBAAkB,MAAQ,uBAAuB,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,QAAQ,MAAQ,YAAY,CAAC,KAAO,MAAM,MAAQ,aAAa,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,WAAW,MAAQ,eAAe,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,kBAAkB,MAAQ,uBAAuB,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,SAAS,MAAQ,aAAa,CAAC,KAAO,WAAW,MAAQ,iBAAiB,CAAC,KAAO,eAAe,MAAQ,oBAAoB,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,gBAAgB,MAAQ,qBAAqB,CAAC,KAAO,UAAU,MAAQ,cAAc,CAAC,KAAO,SAAS,MAAQ,eAAe,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,cAAc,MAAQ,mBAAmB,CAAC,KAAO,aAAa,MAAQ,mBAAmB,CAAC,KAAO,QAAQ,MAAQ,YAAY,CAAC,KAAO,SAAS,MAAQ,gBAAgB,CAAC,KAAO,WAAW,MAAQ,iBAAiB,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,UAAU,MAAQ,eAAe,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,WAAW,MAAQ,gBAAgB,CAAC,KAAO,QAAQ,MAAQ,aAAa,CAAC,KAAO,SAAS,MAAQ,eAAe,CAAC,KAAO,MAAM,MAAQ,UAAU,CAAC,KAAO,oBAAoB,MAAQ,wBAAwB,CAAC,KAAO,kBAAkB,MAAQ,uBAAuB,CAAC,KAAO,aAAa,MAAQ,iBAAiB,CAAC,KAAO,OAAO,MAAQ,WAAW,CAAC,KAAO,YAAY,MAAQ,gBAAgB,CAAC,KAAO,UAAU,MAAQ,cAAc,CAAC,KAAO,UAAU,MAAQ,gBAAgB,CAAC,KAAO,MAAM,MAAQ,WAAW,CAAC,KAAO,SAAS,MAAQ,cAAc,CAAC,KAAO,cAAc,MAAQ,mBAAmB,CAAC,KAAO,OAAO,MAAQ,cAAc,CAAC,KAAO,OAAO,MAAQ,aAAa,CAAC,KAAO,aAAa,MAAQ,mBAAmB,CAAC,KAAO,eAAe,MAAQ,oBAAoB,CAAC,KAAO,QAAQ,MAAQ,KAAK,eAAgB,IAAQ,GAAK,IAEz5MA,gBAAgBC,GAAhB,KCtEL,4rIDwEKD,gBAAgBC,GAAhB,WExEL,mjNF0EKD,gBAAgBC,GAAG,gBG1ExB,mZH4EKD,gBAAgBC,GAAhB,MI5EL,i5GJ8EKD,gBAAgBC,GAAG,gBK9ExB,kmKLgFKD,gBAAgBC,GAAhB,SMhFL,keNkFKD,gBAAgBC,GAAhB,QOlFL,m4GPoFKD,gBAAgBC,GAAhB,OQpFL,48RRsFKD,gBAAgBC,GAAhB,KStFL,suOTwFKD,gBAAgBC,GAAG,mBUxFxB,21GV0FKD,gBAAgBC,GAAhB,KW1FL,s9KX4FKD,gBAAgBC,GAAhB,MY5FL,4uSZ8FKD,gBAAgBC,GAAhB,Ia9FL,qsFbgGKD,gBAAgBC,GAAhB,MchGL,++PdkGKD,gBAAgBC,GAAhB,OelGL,8mDfoGKD,gBAAgBC,GAAhB,MgBpGL,o/QhBsGKD,gBAAgBC,GAAhB,WiBtGL,izDjBwGKD,gBAAgBC,GAAhB,SkBxGL,y7tBlB0GKD,gBAAgBC,GAAhB,SmB1GL,03MnB4GKD,gBAAgBC,GAAG,mBoB5GxB,6pYpB8GKD,gBAAgBC,GAAhB,MqB9GL,ol6BrBgHKD,gBAAgBC,GAAhB,KsBhHL,wmyBtBkHKD,gBAAgBC,GAAhB,OuBlHL,gvOvBoHKD,gBAAgBC,GAAhB,MwBpHL,ozNxBsHKD,gBAAgBC,GAAhB,KyBtHL,u4GzBwHKD,gBAAgBC,GAAhB,O0BxHL,+zK1B0HKD,gBAAgBC,GAAhB,O2B1HL,q0H3B4HKD,gBAAgBC,GAAhB,Q4B5HL,uuO5B8HKD,gBAAgBC,GAAhB,O6B9HL,grF7BgIKD,gBAAgBC,GAAhB,S8BhIL,y5b9BkIKD,gBAAgBC,GAAG,gB+BlIxB,gqS/BoIKD,gBAAgBC,GAAhB,OgCpIL,+tahCsIKD,gBAAgBC,GAAG,iBiCtIxB,q1PjCwIKD,gBAAgBC,GAAhB,QkCxIL,ijDlC0IKD,gBAAgBC,GAAhB,OmC1IL,8zHnC4IKD,gBAAgBC,GAAhB,QoC5IL,mgIpC8IKD,gBAAgBC,GAAG,eqC9IxB,0yRrCgJKD,gBAAgBC,GAAG,csChJxB,4rJtCkJKD,gBAAgBC,GAAhB,MuClJL,80RvCoJKD,gBAAgBC,GAAhB,OwCpJL,qiGxCsJKD,gBAAgBC,GAAhB,SyCtJL,47LzCwJKD,gBAAgBC,GAAG,c0CxJxB,2/J1C0JKD,gBAAgBC,GAAhB,Q2C1JL,qpF3C4JKD,gBAAgBC,GAAhB,M4C5JL,s+G5C8JKD,gBAAgBC,GAAG,c6C9JxB,qyH7CgKKD,gBAAgBC,GAAhB,S8ChKL,olE9CkKKD,gBAAgBC,GAAhB,S+ClKL,ymE/CoKKD,gBAAgBC,GAAhB,MgDpKL,o6KhDsKKD,gBAAgBC,GAAhB,OiDtKL,q/GjDwKKD,gBAAgBC,GAAhB,IkDxKL,wwNlD0KKD,gBAAgBC,GAAG,qBmD1KxB,69gBnD4KKD,gBAAgBC,GAAG,mBoD5KxB,4sJpD8KKD,gBAAgBC,GAAhB,WqD9KL,8mOrDgLKD,gBAAgBC,GAAhB,KsDhLL,mrLtDkLKD,gBAAgBC,GAAG,auDlLxB,25FvDoLKD,gBAAgBC,GAAG,WwDpLxB,+rFxDsLKD,gBAAgBC,GAAhB,QyDtLL,mpGzDwLKD,gBAAgBC,GAAhB,I0DxLL,i2a1D0LKD,gBAAgBC,GAAhB,O2D1LL,o7N3D4LKD,gBAAgBC,GAAG,e4D5LxB,ynV5D8LKD,gBAAgBC,GAAhB,K6D9LL,0tN7DgMKD,gBAAgBC,GAAhB,K8DhML,+xG9DkMKD,gBAAgBC,GAAG,c+DlMxB,6nO/DoMKD,gBAAgBC,GAAG,gBgEpMxB,2/EhEsMKD,gBAAgBC,GAAhB,MiEtML,8EjEmEI,CAqIGxB,Q","sources":["webpack://vantui-doc/webpack/runtime/chunk loaded","webpack://vantui-doc/webpack/bootstrap","webpack://vantui-doc/webpack/runtime/compat get default export","webpack://vantui-doc/webpack/runtime/define property getters","webpack://vantui-doc/webpack/runtime/global","webpack://vantui-doc/webpack/runtime/hasOwnProperty shorthand","webpack://vantui-doc/webpack/runtime/make namespace object","webpack://vantui-doc/webpack/runtime/jsonp chunk loading","webpack://vantui-doc/./node_modules/@antmjs/vantui-cli/lib/config/vant.base.js","webpack://vantui-doc/./docs/home.md","webpack://vantui-doc/./docs/quickstart.md","webpack://vantui-doc/./docs/custom-style.md","webpack://vantui-doc/./docs/theme.md","webpack://vantui-doc/./docs/use-in-react.md","webpack://vantui-doc/./docs/comments.md","webpack://vantui-doc/./docs/premium.md","webpack://vantui-doc/./src/button/README.md","webpack://vantui-doc/./src/cell/README.md","webpack://vantui-doc/./src/config-provider/README.md","webpack://vantui-doc/./src/icon/README.md","webpack://vantui-doc/./src/image/README.md","webpack://vantui-doc/./src/col/README.md","webpack://vantui-doc/./src/popup/README.md","webpack://vantui-doc/./src/common/README.md","webpack://vantui-doc/./src/toast/README.md","webpack://vantui-doc/./src/transition/README.md","webpack://vantui-doc/./src/calendar/README.md","webpack://vantui-doc/./src/checkbox/README.md","webpack://vantui-doc/./src/datetime-picker/README.md","webpack://vantui-doc/./src/field/README.md","webpack://vantui-doc/./src/form/README.md","webpack://vantui-doc/./src/picker/README.md","webpack://vantui-doc/./src/radio/README.md","webpack://vantui-doc/./src/rate/README.md","webpack://vantui-doc/./src/search/README.md","webpack://vantui-doc/./src/slider/README.md","webpack://vantui-doc/./src/stepper/README.md","webpack://vantui-doc/./src/switch/README.md","webpack://vantui-doc/./src/uploader/README.md","webpack://vantui-doc/./src/action-sheet/README.md","webpack://vantui-doc/./src/dialog/README.md","webpack://vantui-doc/./src/dropdown-menu/README.md","webpack://vantui-doc/./src/loading/README.md","webpack://vantui-doc/./src/notify/README.md","webpack://vantui-doc/./src/overlay/README.md","webpack://vantui-doc/./src/share-sheet/README.md","webpack://vantui-doc/./src/swipe-cell/README.md","webpack://vantui-doc/./src/table/README.md","webpack://vantui-doc/./src/circle/README.md","webpack://vantui-doc/./src/collapse/README.md","webpack://vantui-doc/./src/count-down/README.md","webpack://vantui-doc/./src/divider/README.md","webpack://vantui-doc/./src/empty/README.md","webpack://vantui-doc/./src/notice-bar/README.md","webpack://vantui-doc/./src/progress/README.md","webpack://vantui-doc/./src/skeleton/README.md","webpack://vantui-doc/./src/steps/README.md","webpack://vantui-doc/./src/sticky/README.md","webpack://vantui-doc/./src/tag/README.md","webpack://vantui-doc/./src/power-scroll-view/README.md","webpack://vantui-doc/./src/number-keyboard/README.md","webpack://vantui-doc/./src/pagination/README.md","webpack://vantui-doc/./src/grid/README.md","webpack://vantui-doc/./src/index-bar/README.md","webpack://vantui-doc/./src/nav-bar/README.md","webpack://vantui-doc/./src/sidebar/README.md","webpack://vantui-doc/./src/tab/README.md","webpack://vantui-doc/./src/tabbar/README.md","webpack://vantui-doc/./src/tree-select/README.md","webpack://vantui-doc/./src/area/README.md","webpack://vantui-doc/./src/card/README.md","webpack://vantui-doc/./src/submit-bar/README.md","webpack://vantui-doc/./src/goods-action/README.md","webpack://vantui-doc/./src/index/README.md"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t239: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkvantui_doc\"] = self[\"webpackChunkvantui_doc\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","\n    import Home from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/home.md\"; \nimport Quickstart from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/quickstart.md\"; \nimport customStyle from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/custom-style.md\"; \nimport Theme from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/theme.md\"; \nimport useInReact from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/use-in-react.md\"; \nimport Comments from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/comments.md\"; \nimport Premium from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/docs/premium.md\"; \nimport Button from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/button/README.md\";\nimport Cell from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/cell/README.md\";\nimport configProvider from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/config-provider/README.md\";\nimport Icon from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/icon/README.md\";\nimport Image from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/image/README.md\";\nimport Col from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/col/README.md\";\nimport Popup from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/popup/README.md\";\nimport Common from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/common/README.md\";\nimport Toast from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/toast/README.md\";\nimport Transition from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/transition/README.md\";\nimport Calendar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/calendar/README.md\";\nimport Checkbox from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/checkbox/README.md\";\nimport datetimePicker from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/datetime-picker/README.md\";\nimport Field from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/field/README.md\";\nimport Form from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/form/README.md\";\nimport Picker from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/picker/README.md\";\nimport Radio from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/radio/README.md\";\nimport Rate from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/rate/README.md\";\nimport Search from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/search/README.md\";\nimport Slider from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/slider/README.md\";\nimport Stepper from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/stepper/README.md\";\nimport Switch from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/switch/README.md\";\nimport Uploader from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/uploader/README.md\";\nimport actionSheet from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/action-sheet/README.md\";\nimport Dialog from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/dialog/README.md\";\nimport dropdownMenu from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/dropdown-menu/README.md\";\nimport Loading from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/loading/README.md\";\nimport Notify from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/notify/README.md\";\nimport Overlay from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/overlay/README.md\";\nimport shareSheet from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/share-sheet/README.md\";\nimport swipeCell from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/swipe-cell/README.md\";\nimport Table from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/table/README.md\";\nimport Circle from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/circle/README.md\";\nimport Collapse from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/collapse/README.md\";\nimport countDown from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/count-down/README.md\";\nimport Divider from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/divider/README.md\";\nimport Empty from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/empty/README.md\";\nimport noticeBar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/notice-bar/README.md\";\nimport Progress from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/progress/README.md\";\nimport Skeleton from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/skeleton/README.md\";\nimport Steps from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/steps/README.md\";\nimport Sticky from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/sticky/README.md\";\nimport Tag from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/tag/README.md\";\nimport powerScrollView from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/power-scroll-view/README.md\";\nimport numberKeyboard from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/number-keyboard/README.md\";\nimport Pagination from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/pagination/README.md\";\nimport Grid from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/grid/README.md\";\nimport indexBar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/index-bar/README.md\";\nimport navBar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/nav-bar/README.md\";\nimport Sidebar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/sidebar/README.md\";\nimport Tab from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/tab/README.md\";\nimport Tabbar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/tabbar/README.md\";\nimport treeSelect from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/tree-select/README.md\";\nimport Area from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/area/README.md\";\nimport Card from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/card/README.md\";\nimport submitBar from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/submit-bar/README.md\";\nimport goodsAction from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/goods-action/README.md\";\nimport Index from \"/Users/sanshao/AntmJS/vantui/packages/vantui-doc/src/index/README.md\";\n\n    (function(window) {\n      window.__vantui_base__ = {\"title\":\"@antmjs/vantui\",\"logo\":\"https://antm-js.gitee.io/resource/antmjs-vantui.jpg\",\"simulator\":{\"url\":{\"development\":\"http://localhost:10086\",\"production\":\"/vantui/mobile.html\"},\"pagePath\":\"/Users/sanshao/AntmJS/vantui/packages/vantui-demo/src/pages\",\"configPath\":\"/Users/sanshao/AntmJS/vantui/packages/vantui-demo/src/config.json\",\"appConfigPath\":\"/Users/sanshao/AntmJS/vantui/packages/vantui-demo/src/app.config.js\",\"withTabPages\":[\"icon\",\"power-scroll-view\"]},\"links\":[{\"logo\":\"https://b.yzcdn.cn/vant/logo/github.svg\",\"url\":\"https://github.com/antmjs/vantui\"}],\"nav\":[{\"title\":\"开发指南\",\"items\":[{\"path\":\"home\",\"title\":\"介绍\",\"hideSimulator\":false},{\"path\":\"quickstart\",\"title\":\"快速上手\",\"hideSimulator\":false},{\"path\":\"custom-style\",\"title\":\"样式覆盖\",\"hideSimulator\":false},{\"path\":\"theme\",\"title\":\"定制主题\",\"hideSimulator\":false},{\"path\":\"use-in-react\",\"title\":\"如何在React中使用\",\"hideSimulator\":false},{\"path\":\"comments\",\"title\":\"typescript同步到文档\",\"hideSimulator\":false},{\"path\":\"premium\",\"title\":\"高级模版功能说明\",\"hideSimulator\":false}]},{\"title\":\"基础组件\",\"items\":[{\"path\":\"button\",\"title\":\"Button 按钮\"},{\"path\":\"cell\",\"title\":\"Cell 单元格\"},{\"path\":\"config-provider\",\"title\":\"ConfigProvider 全局配置\"},{\"path\":\"icon\",\"title\":\"Icon 图标\"},{\"path\":\"image\",\"title\":\"Image 图片\"},{\"path\":\"col\",\"title\":\"Layout 布局\"},{\"path\":\"popup\",\"title\":\"Popup 弹出层\"},{\"path\":\"common\",\"title\":\"Style 内置样式\"},{\"path\":\"toast\",\"title\":\"Toast 轻提示\"},{\"path\":\"transition\",\"title\":\"transition 动画\"}]},{\"title\":\"表单组件\",\"items\":[{\"path\":\"calendar\",\"title\":\"Calendar 日历\"},{\"path\":\"checkbox\",\"title\":\"Checkbox 复选框\"},{\"path\":\"datetime-picker\",\"title\":\"DatetimePicker 时间选择\"},{\"path\":\"field\",\"title\":\"Field 输入框\"},{\"path\":\"form\",\"title\":\"Form 表单\"},{\"path\":\"picker\",\"title\":\"Picker 选择器\"},{\"path\":\"radio\",\"title\":\"Radio 单选框\"},{\"path\":\"rate\",\"title\":\"Rate 评分\"},{\"path\":\"search\",\"title\":\"Search 搜索\"},{\"path\":\"slider\",\"title\":\"Slider 滑块\"},{\"path\":\"stepper\",\"title\":\"Stepper 步进器\"},{\"path\":\"switch\",\"title\":\"Switch 开关\"},{\"path\":\"uploader\",\"title\":\"Uploader 文件上传\"}]},{\"title\":\"反馈组件\",\"items\":[{\"path\":\"action-sheet\",\"title\":\"ActionSheet 动作面板\"},{\"path\":\"dialog\",\"title\":\"Dialog 弹出框\"},{\"path\":\"dropdown-menu\",\"title\":\"DropdownMenu 下拉菜单\"},{\"path\":\"loading\",\"title\":\"Loading 加载\"},{\"path\":\"notify\",\"title\":\"Notify 消息通知\"},{\"path\":\"overlay\",\"title\":\"Overlay 遮罩层\"},{\"path\":\"share-sheet\",\"title\":\"ShareSheet 分享面板\"},{\"path\":\"swipe-cell\",\"title\":\"SwipeCell 滑动单元格\"}]},{\"title\":\"展示组件\",\"items\":[{\"path\":\"table\",\"title\":\"Table 表格\"},{\"path\":\"circle\",\"title\":\"Circle 环形进度条\"},{\"path\":\"collapse\",\"title\":\"Collapse 折叠面板\"},{\"path\":\"count-down\",\"title\":\"CountDown 倒计时\"},{\"path\":\"divider\",\"title\":\"Divider 分割线\"},{\"path\":\"empty\",\"title\":\"Empty 空状态\"},{\"path\":\"notice-bar\",\"title\":\"NoticeBar 通知栏\"},{\"path\":\"progress\",\"title\":\"Progress 进度条\"},{\"path\":\"skeleton\",\"title\":\"Skeleton 骨架屏\"},{\"path\":\"steps\",\"title\":\"Steps 步骤条\"},{\"path\":\"sticky\",\"title\":\"Sticky 粘性布局\"},{\"path\":\"tag\",\"title\":\"Tag 标签\"},{\"path\":\"power-scroll-view\",\"title\":\"PowerScrollView 滚动列表\"},{\"path\":\"number-keyboard\",\"title\":\"NumberKeyboard 数字键盘\"}]},{\"title\":\"导航组件\",\"items\":[{\"path\":\"pagination\",\"title\":\"Pagination 分页\"},{\"path\":\"grid\",\"title\":\"Grid 宫格\"},{\"path\":\"index-bar\",\"title\":\"IndexBar 索引栏\"},{\"path\":\"nav-bar\",\"title\":\"NavBar 导航栏\"},{\"path\":\"sidebar\",\"title\":\"Sidebar 侧边导航\"},{\"path\":\"tab\",\"title\":\"Tab 标签页\"},{\"path\":\"tabbar\",\"title\":\"Tabbar 标签栏\"},{\"path\":\"tree-select\",\"title\":\"TreeSelect 分类选择\"}]},{\"title\":\"业务组件\",\"items\":[{\"path\":\"area\",\"title\":\"Area 省市区选择\"},{\"path\":\"card\",\"title\":\"Card 商品卡片\"},{\"path\":\"submit-bar\",\"title\":\"SubmitBar 提交订单栏\"},{\"path\":\"goods-action\",\"title\":\"GoodsAction 商品导航\"}]},{\"title\":\"有赞Vant-Weapp小程序文档\",\"items\":[{\"path\":\"index\",\"title\":\"参考\",\"hideSimulator\":false}]}],\"routers\":[{\"path\":\"home\",\"title\":\"介绍\",\"hideSimulator\":false},{\"path\":\"quickstart\",\"title\":\"快速上手\",\"hideSimulator\":false},{\"path\":\"custom-style\",\"title\":\"样式覆盖\",\"hideSimulator\":false},{\"path\":\"theme\",\"title\":\"定制主题\",\"hideSimulator\":false},{\"path\":\"use-in-react\",\"title\":\"如何在React中使用\",\"hideSimulator\":false},{\"path\":\"comments\",\"title\":\"typescript同步到文档\",\"hideSimulator\":false},{\"path\":\"premium\",\"title\":\"高级模版功能说明\",\"hideSimulator\":false},{\"path\":\"button\",\"title\":\"Button 按钮\"},{\"path\":\"cell\",\"title\":\"Cell 单元格\"},{\"path\":\"config-provider\",\"title\":\"ConfigProvider 全局配置\"},{\"path\":\"icon\",\"title\":\"Icon 图标\"},{\"path\":\"image\",\"title\":\"Image 图片\"},{\"path\":\"col\",\"title\":\"Layout 布局\"},{\"path\":\"popup\",\"title\":\"Popup 弹出层\"},{\"path\":\"common\",\"title\":\"Style 内置样式\"},{\"path\":\"toast\",\"title\":\"Toast 轻提示\"},{\"path\":\"transition\",\"title\":\"transition 动画\"},{\"path\":\"calendar\",\"title\":\"Calendar 日历\"},{\"path\":\"checkbox\",\"title\":\"Checkbox 复选框\"},{\"path\":\"datetime-picker\",\"title\":\"DatetimePicker 时间选择\"},{\"path\":\"field\",\"title\":\"Field 输入框\"},{\"path\":\"form\",\"title\":\"Form 表单\"},{\"path\":\"picker\",\"title\":\"Picker 选择器\"},{\"path\":\"radio\",\"title\":\"Radio 单选框\"},{\"path\":\"rate\",\"title\":\"Rate 评分\"},{\"path\":\"search\",\"title\":\"Search 搜索\"},{\"path\":\"slider\",\"title\":\"Slider 滑块\"},{\"path\":\"stepper\",\"title\":\"Stepper 步进器\"},{\"path\":\"switch\",\"title\":\"Switch 开关\"},{\"path\":\"uploader\",\"title\":\"Uploader 文件上传\"},{\"path\":\"action-sheet\",\"title\":\"ActionSheet 动作面板\"},{\"path\":\"dialog\",\"title\":\"Dialog 弹出框\"},{\"path\":\"dropdown-menu\",\"title\":\"DropdownMenu 下拉菜单\"},{\"path\":\"loading\",\"title\":\"Loading 加载\"},{\"path\":\"notify\",\"title\":\"Notify 消息通知\"},{\"path\":\"overlay\",\"title\":\"Overlay 遮罩层\"},{\"path\":\"share-sheet\",\"title\":\"ShareSheet 分享面板\"},{\"path\":\"swipe-cell\",\"title\":\"SwipeCell 滑动单元格\"},{\"path\":\"table\",\"title\":\"Table 表格\"},{\"path\":\"circle\",\"title\":\"Circle 环形进度条\"},{\"path\":\"collapse\",\"title\":\"Collapse 折叠面板\"},{\"path\":\"count-down\",\"title\":\"CountDown 倒计时\"},{\"path\":\"divider\",\"title\":\"Divider 分割线\"},{\"path\":\"empty\",\"title\":\"Empty 空状态\"},{\"path\":\"notice-bar\",\"title\":\"NoticeBar 通知栏\"},{\"path\":\"progress\",\"title\":\"Progress 进度条\"},{\"path\":\"skeleton\",\"title\":\"Skeleton 骨架屏\"},{\"path\":\"steps\",\"title\":\"Steps 步骤条\"},{\"path\":\"sticky\",\"title\":\"Sticky 粘性布局\"},{\"path\":\"tag\",\"title\":\"Tag 标签\"},{\"path\":\"power-scroll-view\",\"title\":\"PowerScrollView 滚动列表\"},{\"path\":\"number-keyboard\",\"title\":\"NumberKeyboard 数字键盘\"},{\"path\":\"pagination\",\"title\":\"Pagination 分页\"},{\"path\":\"grid\",\"title\":\"Grid 宫格\"},{\"path\":\"index-bar\",\"title\":\"IndexBar 索引栏\"},{\"path\":\"nav-bar\",\"title\":\"NavBar 导航栏\"},{\"path\":\"sidebar\",\"title\":\"Sidebar 侧边导航\"},{\"path\":\"tab\",\"title\":\"Tab 标签页\"},{\"path\":\"tabbar\",\"title\":\"Tabbar 标签栏\"},{\"path\":\"tree-select\",\"title\":\"TreeSelect 分类选择\"},{\"path\":\"area\",\"title\":\"Area 省市区选择\"},{\"path\":\"card\",\"title\":\"Card 商品卡片\"},{\"path\":\"submit-bar\",\"title\":\"SubmitBar 提交订单栏\"},{\"path\":\"goods-action\",\"title\":\"GoodsAction 商品导航\"},{\"path\":\"index\",\"title\":\"参考\",\"hideSimulator\":false}],\"md\":{}}\n      \n     __vantui_base__.md[\"home\"] = Home\n    \n     __vantui_base__.md[\"quickstart\"] = Quickstart\n    \n     __vantui_base__.md[\"custom-style\"] = customStyle\n    \n     __vantui_base__.md[\"theme\"] = Theme\n    \n     __vantui_base__.md[\"use-in-react\"] = useInReact\n    \n     __vantui_base__.md[\"comments\"] = Comments\n    \n     __vantui_base__.md[\"premium\"] = Premium\n    \n     __vantui_base__.md[\"button\"] = Button\n    \n     __vantui_base__.md[\"cell\"] = Cell\n    \n     __vantui_base__.md[\"config-provider\"] = configProvider\n    \n     __vantui_base__.md[\"icon\"] = Icon\n    \n     __vantui_base__.md[\"image\"] = Image\n    \n     __vantui_base__.md[\"col\"] = Col\n    \n     __vantui_base__.md[\"popup\"] = Popup\n    \n     __vantui_base__.md[\"common\"] = Common\n    \n     __vantui_base__.md[\"toast\"] = Toast\n    \n     __vantui_base__.md[\"transition\"] = Transition\n    \n     __vantui_base__.md[\"calendar\"] = Calendar\n    \n     __vantui_base__.md[\"checkbox\"] = Checkbox\n    \n     __vantui_base__.md[\"datetime-picker\"] = datetimePicker\n    \n     __vantui_base__.md[\"field\"] = Field\n    \n     __vantui_base__.md[\"form\"] = Form\n    \n     __vantui_base__.md[\"picker\"] = Picker\n    \n     __vantui_base__.md[\"radio\"] = Radio\n    \n     __vantui_base__.md[\"rate\"] = Rate\n    \n     __vantui_base__.md[\"search\"] = Search\n    \n     __vantui_base__.md[\"slider\"] = Slider\n    \n     __vantui_base__.md[\"stepper\"] = Stepper\n    \n     __vantui_base__.md[\"switch\"] = Switch\n    \n     __vantui_base__.md[\"uploader\"] = Uploader\n    \n     __vantui_base__.md[\"action-sheet\"] = actionSheet\n    \n     __vantui_base__.md[\"dialog\"] = Dialog\n    \n     __vantui_base__.md[\"dropdown-menu\"] = dropdownMenu\n    \n     __vantui_base__.md[\"loading\"] = Loading\n    \n     __vantui_base__.md[\"notify\"] = Notify\n    \n     __vantui_base__.md[\"overlay\"] = Overlay\n    \n     __vantui_base__.md[\"share-sheet\"] = shareSheet\n    \n     __vantui_base__.md[\"swipe-cell\"] = swipeCell\n    \n     __vantui_base__.md[\"table\"] = Table\n    \n     __vantui_base__.md[\"circle\"] = Circle\n    \n     __vantui_base__.md[\"collapse\"] = Collapse\n    \n     __vantui_base__.md[\"count-down\"] = countDown\n    \n     __vantui_base__.md[\"divider\"] = Divider\n    \n     __vantui_base__.md[\"empty\"] = Empty\n    \n     __vantui_base__.md[\"notice-bar\"] = noticeBar\n    \n     __vantui_base__.md[\"progress\"] = Progress\n    \n     __vantui_base__.md[\"skeleton\"] = Skeleton\n    \n     __vantui_base__.md[\"steps\"] = Steps\n    \n     __vantui_base__.md[\"sticky\"] = Sticky\n    \n     __vantui_base__.md[\"tag\"] = Tag\n    \n     __vantui_base__.md[\"power-scroll-view\"] = powerScrollView\n    \n     __vantui_base__.md[\"number-keyboard\"] = numberKeyboard\n    \n     __vantui_base__.md[\"pagination\"] = Pagination\n    \n     __vantui_base__.md[\"grid\"] = Grid\n    \n     __vantui_base__.md[\"index-bar\"] = indexBar\n    \n     __vantui_base__.md[\"nav-bar\"] = navBar\n    \n     __vantui_base__.md[\"sidebar\"] = Sidebar\n    \n     __vantui_base__.md[\"tab\"] = Tab\n    \n     __vantui_base__.md[\"tabbar\"] = Tabbar\n    \n     __vantui_base__.md[\"tree-select\"] = treeSelect\n    \n     __vantui_base__.md[\"area\"] = Area\n    \n     __vantui_base__.md[\"card\"] = Card\n    \n     __vantui_base__.md[\"submit-bar\"] = submitBar\n    \n     __vantui_base__.md[\"goods-action\"] = goodsAction\n    \n     __vantui_base__.md[\"index\"] = Index\n    \n    })(window)\n  ","export default \"<div class=\\\"card\\\">\\n  <div class=\\\"intro\\\" style=\\\"text-align: center; padding: 20px;\\\">\\n    <img class=\\\"intro__logo\\\" style=\\\"width: 120px; height: 120px; box-shadow: none;\\\" src=\\\"https://antm-js.gitee.io/resource/antmjs-vantui.jpg\\\">\\n    <h2 style=\\\"margin: 0; font-size: 32px; line-height: 60px;\\\">@antmjs/vantui</h2>\\n    <p>基于有赞 VantWeapp 开发的同时支持 Taro 和 React 的 UI 库</p>\\n  </div>\\n</div>\\n\\n### 相关链接\\n\\n- [Vant Weapp](https://github.com/youzan/vant-weapp)：由有赞团队打造的轻量、可靠的微信小程序 UI 组件库\\n- [Taro](https://github.com/NervJS/taro)：由京东团队打造的开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5/React Native 等应用\\n\\n### 为什么是高度一致\\n\\n- 99% 样式文件迁移，保留了有赞 5 年多积累的精华！\\n\\n- 100% React 化，在 React 化的过程中保留了有赞的大部分 JS 逻辑，尽可能的少重构！\\n\\n- 10+ 项目接入中\\n\\n> 目前文档还在更新中，如果按文档开发出现问题，请看 TS 信息和实际的[demo](https://github.com/AntmJS/vantui/tree/main/packages/vantui-demo)，demo 是找测试同学测试过的！\\n\\n### 我们带来了什么\\n\\n- 使用 TypeScript 编写，提供完整的类型定义\\n\\n- 支持 Taro(H5、微信小程序、支付宝小程序、...)\\n\\n- 支持 React(webpack 兼容配置我们后续会统一起来，方便大家使用)\\n\\n- 与 VantWeapp 的 UI 和 API 尽可能的保持一致，同时持续跟进其 commit 纪录\\n\\n- 50+ 个高质量组件，覆盖移动端主流场景\\n\\n- 支持主题定制\\n\\n- 支持按需加载\\n\\n### 为什么你可以放心用\\n\\n整个组件库是依赖开源项目 Vant Weapp 的代码经过全量编译而来，所有样式文件及代码结构都与其保持高度一致，只是生命周期经过改造使其支持 React，很大程度避免了重新造轮子带来的各种问题，同时保留了 Vant Weapp 多年积累的经验。\\n\\n> 如果觉得不错，麻烦给个 Star 哦\\n\\n> 收到了一些反馈，这里说明一下吧。关于 demo 的质量和文档现在确实是有一些不足的地方的，因为做这件事的人并不多暂时，我们把更多的精力放在了组件本身，确保大家在实际的应用中能够更少的被中断。目前除了 50 多个组件要维护，还有 Taro Demo 和 React Demo 和文档，同时公司也有业务要跟进，所以希望大家能够体谅，当然非常欢迎有兴趣的人一起来完善它！\\n\\n### 学习链接\\n\\n- [github 文档](https://antmjs.github.io/vantui/#/home)\\n- [gitee 文档](https://antm-js.gitee.io/vantui/#/home)\\n\\n### 预览\\n\\n<img style=\\\"width: 140px; height: 140px; box-shadow: none;\\\" src=\\\"https://antm-js.gitee.io/resource/vantui-weapp.png\\\" />\\n<img style=\\\"width: 140px; height: 140px; box-shadow: none;\\\" src=\\\"https://antm-js.gitee.io/resource/vantui-h5.png\\\" />\\n\\n### 贡献代码\\n\\n使用过程中发现任何问题都可以提 [Issue](https://github.com/antmjs/vantui/issues) 给我们，当然，我们也非常欢迎你给我们发 [PR](https://github.com/antmjs/vantui/pulls)，同时，到目前为止我们已经对 vant-weapp 的[commit](https://github.com/youzan/vant-weapp/commits/dev)记录同步到了 2022-03-27 的版本，我们也会持续同步\\n\\n### 开源协议\\n\\n本项目基于 [MIT](https://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89) 协议，请自由地享受和参与开源\\n\\n### 参与共建\\n\\n首发阵容来自小电科技创新事业部前端团队，我们希望在开源领域能够让大家一起来参与，所以我们重新命名了团队名称“AntM 团队”，寓意是打造小而实用的工具提高工作效率，同时欢迎有兴趣一起共建的小伙伴能够加入这个团队，人多力量大。\\n\\n### 特别声明\\n\\n- 该组件库并不是一个新的轮子，我们只是得益于有赞团队在 vant-weapp 的多年实践、积累、沉淀上做了一些简单的扩展，让它可以以 Taro/React 的方式进行开发接入。\\n\\n- 我们是 vant-weapp 的锦上添花版本，在此还是需要感谢 Taro 团队以及有赞团队为社区所作出的贡献。\\n\\n- Logo 暂时还未获得使用许可，如有侵权，请及时联系我们。\\n\\n### 以下是 @antmjs/vantui 的核心贡献者们\\n\\n| [![hisanshao](https://avatars.githubusercontent.com/u/26359618?s=100&v=4)](https://github.com/hisanshao/) | [![Chitanda60](https://avatars.githubusercontent.com/u/16026533?s=100&v=4)](https://github.com/Chitanda60/) | [![zuolung](https://avatars.githubusercontent.com/u/19684540?s=100&v=4)](https://github.com/Banlangenn/) | [![hisanshao](https://avatars.githubusercontent.com/u/28145148?s=100&v=4)](https://github.com/zuolung/) |\\n| :-------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------: |\\n|                                [hisanshao](https://github.com/hisanshao/)                                 |                                [Chitanda60](https://github.com/Chitanda60/)                                 |                               [Banlangenn](https://github.com/Banlangenn/)                               |                                 [zuolung](https://github.com/zuolung/)                                  |\\n\\n### 贡献者们\\n\\n感谢以下小伙伴们为 @antmjs/vantui 发展做出的贡献：\\n\\n<a href=\\\"https://github.com/AntmJS/vantui/graphs/contributors\\\">\\n  <img src=\\\"https://opencollective.com/vantuiantmjs/contributors.svg?width=890&button=false\\\" alt=\\\"contributors\\\">\\n</a>\\n\\n### 快速沟通群\\n\\n微信群满 200 人，需手动拉群。添加好友请备注“AntmJS”，我们会尽快拉你进群交流\\n\\n<div style=\\\"display:inline-block;\\\">\\n<img style=\\\"width:300px\\\" src=\\\"https://antm-js.gitee.io/resource/antmjs.jpeg\\\" />\\n</div>\\n\";","export default \"# 快速上手\\n\\n### 背景知识\\n\\n使用 @antmjs/vantui 前，请确保你已经学习过[Taro 框架 React 版](https://taro.zone/) 或者 [React](https://reactjs.org/)。\\n\\n### 差异点\\n\\n- 组件属性均用驼峰代替\\n- slot 改为通过属性传递 ReactNode 即 slot=\\\"footer\\\" 改为 render 为前缀 F 大写传 ReactNode renderFooter={<View></View>}\\n- 组件文档案例部分可能会存在一些小问题（时间紧大家见谅）如果有问题可以提 issue 给我们，你们可以先看实际 demo。文档 TS 信息是和我们的组件同步的\\n\\n### 支持程度\\n\\n- Taro 需要使用 3.0+的版本\\n- 小程序参考 Taro 的最低支持程度\\n\\n### 如何修复/开发新的组件库\\n\\n- Fork 代码：[VantUI](https://github.com/AntmJS/vantui)\\n\\n- 进入根目录：执行 yarn && yarn bootstrap\\n\\n- 进入组件库目录：cd packages/vantui && yarn watch\\n\\n- 进入文档库目录：cd packages/vantui-doc && yarn mdcode-watch\\n\\n- 进入 Taro 版工程 vantui-demo： cd packages/vantui-demo && yarn watch:weapp\\n\\n### 使用模版快速开发 Taro 应用\\n\\n- Pull 代码：[纯净版 React In Taro 模版工程](https://github.com/AntmJS/pure-project-vantui)\\n- 进入根目录：执行 yarn && yarn watch:weapp\\n\\n### 使用模版快速开发 React 应用\\n\\n- Pull 代码：[纯净版 React 模版工程](https://github.com/AntmJS/create-react-app-vantui)\\n- 进入根目录：执行 yarn && TARO_ENV=h5 yarn start\\n\\n### 使用高级模版快速开发 Taro 应用\\n\\n- [高级模版功能说明](/#/premium)\\n- Pull 代码：[高级版 React In Taro 模版工程](https://github.com/AntmJS/temptaro)\\n- 进入根目录：执行 yarn && yarn watch:weapp\\n\\n## 开始使用\\n\\n### 通过 npm/yarn 安装\\n\\n```bash\\n# 通过 npm 安装\\nnpm install @antmjs/vantui\\n\\n# 通过 yarn 安装\\nyarn add @antmjs/vantui\\n```\\n\\n> 由于引用 node_modules 的模块，默认不会编译，所以需要额外给 H5 配置 esnextModules，在 taro 项目的 config/index.js 中新增如下配置项：\\n\\n```js\\nh5: {\\n  esnextModules: [/@antmjs[\\\\\\\\/]vantui/],\\n  postcss: {\\n    autoprefixer: {\\n      enable: true,\\n      config: {\\n      }\\n    },\\n    pxtransform: {\\n      enable: true,\\n      config: {},\\n    },\\n    cssModules: {\\n      enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true\\n      config: {\\n        namingPattern: 'module', // 转换模式，取值为 global/module\\n        generateScopedName: '[name]__[local]___[hash:base64:5]'\\n      }\\n    }\\n  }\\n}\\n```\\n\\n### 其他注意事项\\n\\n#### 需要注意开发者工具的项目设置：\\n\\n- 需要设置关闭 ES6 转 ES5 功能，开启可能报错\\n- 需要设置关闭上传代码时样式自动补全，开启可能报错\\n- 需要设置关闭代码压缩上传，开启可能报错\\n\\n#### 编译问题\\n\\n该组件在编译阶段默认已经使用了 babel/runtime 进行语法转换以及 polyfill。目前使用 taro 的默认 babel 配置在支付宝和钉钉等环境会报错，解决方案可以参考[temptaro](https://github.com/AntmJS/temptaro)的配置。\\n\\n## 引入组件\\n\\n### 方式一. 通过 babel 插件按需引入组件\\n\\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一款 babel 插件，它会在编译过程中将 import 语句自动转换为按需引入的方式。\\n\\n```bash\\n# 安装插件\\nnpm i babel-plugin-import -D\\n```\\n\\n在.babelrc 或 babel.config.js 中添加配置：\\n\\n```js\\n{\\n  \\\"plugins\\\": [\\n    [\\n      \\\"import\\\",\\n      {\\n        \\\"libraryName\\\": \\\"@antmjs/vantui\\\",\\n        \\\"libraryDirectory\\\": \\\"es\\\",\\n        \\\"style\\\": true\\n      },\\n      \\\"@antmjs/vantui\\\"\\n    ]\\n  ]\\n}\\n```\\n\\n```js\\n{\\n  \\\"plugins\\\": [\\n    [\\n      \\\"import\\\",\\n      {\\n        \\\"libraryName\\\": \\\"@antmjs/vantui\\\",\\n        \\\"libraryDirectory\\\": \\\"es\\\",\\n        \\\"style\\\": (name) => `${name}/style/less`,\\n      },\\n      \\\"@antmjs/vantui\\\"\\n    ]\\n  ]\\n}\\n```\\n\\n接着你可以在代码中直接引入 VantUI 组件，插件会自动将代码转化为按需引入的形式。\\n\\n```js\\n// 原始代码\\nimport { Button } from '@antmjs/vantui'\\n\\n// 编译后代码\\nimport Button from '@antmjs/vantui/es/button'\\nimport '@antmjs/vantui/es/button/style'\\n```\\n\\n### 方式二. 在 Vite 项目中按需引入组件\\n\\n对于 vite 项目，可以使用 [vite-plugin-style-import](https://github.com/anncwb/vite-plugin-style-import) 实现按需引入, 原理和 `babel-plugin-import` 类似。\\n\\n```bash\\n# 安装插件\\nnpm i vite-plugin-style-import -D\\n```\\n\\n```js\\n// vite.config.js\\nimport styleImport from 'vite-plugin-style-import'\\n\\nexport default {\\n  plugins: [\\n    styleImport({\\n      libs: [\\n        {\\n          libraryName: '@antmjs/vantui',\\n          esModule: true,\\n          resolveStyle: (name) => `@antmjs/vantui/es/${name}/style`,\\n        },\\n      ],\\n    }),\\n  ],\\n}\\n```\\n\\n### 方式三. 手动按需引入组件\\n\\n在不使用插件的情况下，可以手动引入需要使用的组件和样式。\\n\\n```js\\n// 引入组件\\nimport Button from '@antmjs/vantui/es/button'\\n// 引入组件对应的样式，若组件没有样式文件，则无须引入\\nimport '@antmjs/vantui/es/button/style'\\n```\\n\\n### 方式四. 导入所有组件\\n\\nVant 支持一次性导入所有组件，引入所有组件会增加代码包体积，因此不推荐这种做法。\\n\\n```js\\n// 不需要更改主题，引用它\\nimport '@antmjs/vantui/lib/index.css'\\n// 需要通过less变量/var()更改主题，引用它\\nimport '@antmjs/vantui/lib/index.less'\\n```\\n\\n> Tips: 配置按需引入后，将不允许直接导入所有组件。\\n\\n### 注意\\n\\n```js\\n// Taro小程序\\n\\\"miniCssExtractPluginOption\\\": {\\n  \\\"ignoreOrder\\\": true,\\n}\\n```\\n\\n```js\\n// react\\nnew MiniCssExtractPlugin({\\n  \\\"ignoreOrder\\\": true,\\n  ...\\n})\\n```\\n\\n> 线上打包的时候会提示 conflicating order between ... 此类警告，可以通过 ignoreOrder:true 关闭\\n\\n### 单位尺寸转化问题\\n\\nVantUI 默认的尺寸规则 [作用参考](https://taro-docs.jd.com/taro/docs/size) [修改参考](https://taro-docs.jd.com/taro/docs/config)\\n\\n```json\\n{\\n  \\\"designWidth\\\": 750,\\n  \\\"deviceRatio\\\": {\\n    \\\"640\\\": 2.34 / 2,\\n    \\\"750\\\": 1,\\n    \\\"828\\\": 1.81 / 2,\\n  },\\n}\\n```\\n\\n如何在 js 中转换单位\\n\\n```js\\nimport { pxTransform } from '@antmjs/vantui'\\n// 小程序转rpx H5转rem\\npxTransform(10)\\n```\\n\\n### 兼容 Vant Weapp 以及 兼容项目配置的尺寸设置为非 750 导致组件库的样式偏大偏小问题\\n\\nVant Weapp 要求 pxTransform 的 selectorBlackList 要设置成 [/van-/]以免组件被转换成 rpx 之后缩小一倍。而 vantui 组件默认适配的 rpx，所以尺寸都是按照 750 的设计稿比例转换过的，但是类名和 Vant Weapp 是一致的，所以设置 selectorBlackList: [/van-/] 也会影响到 vantui 使其组件视觉上看去放大了一倍。针对这个问题，以下配置可以解决这个问题。同时也能兼容项目配置的尺寸设置为非 750 导致组件库的样式偏大偏小问题\\n\\n```js\\n// 这个不用安装，taro已经装过了，直接require就好了\\nconst pxtransform = require('postcss-pxtransform')\\nconst config = {\\n  mini: {\\n    webpackChain(chain) {\\n      const lessRule = chain.module.rules.get('less')\\n      const lessRuleCfg = {\\n        test: /@antmjs[\\\\\\\\/]vantui(.+?)\\\\.less$/,\\n        oneOf: [\\n          {\\n            use: [],\\n          },\\n        ],\\n      }\\n      lessRule.toConfig().oneOf[0].use.map((use) => {\\n        if (/postcss-loader/.test(use.loader)) {\\n          const newUse = {\\n            loader: use.loader,\\n            options: {\\n              sourceMap: use.options.sourceMap,\\n              postcssOptions: {\\n                plugins: [],\\n              },\\n            },\\n          }\\n          use.options.postcssOptions.plugins.map((xitem) => {\\n            if (xitem.postcssPlugin === 'postcss-pxtransform') {\\n              newUse.options.postcssOptions.plugins.push(\\n                pxtransform({\\n                  platform: process.env.TARO_ENV,\\n                  designWidth: 750,\\n                  deviceRatio: {\\n                    640: 2.34 / 2,\\n                    750: 1,\\n                    828: 1.81 / 2,\\n                  },\\n                  selectorBlackList: [],\\n                }),\\n              )\\n            } else {\\n              newUse.options.postcssOptions.plugins.push(xitem)\\n            }\\n          })\\n          lessRuleCfg.oneOf[0].use.push({ ...newUse })\\n        } else {\\n          lessRuleCfg.oneOf[0].use.push({ ...use })\\n        }\\n      })\\n      chain.module.rule('vantuiLess').merge(lessRuleCfg)\\n      lessRule.exclude.clear().add(/@antmjs[\\\\\\\\/]vantui/)\\n    },\\n  },\\n}\\n```\\n\";","export default \"# 样式覆盖\\n\\n### 样式类覆盖\\n\\n得益于 Taro3 的实现，我们无需再关注小程序的样式隔离问题，所以我们可以常规使用样式覆盖\\n\\n```jsx\\n<Button type=\\\"primary\\\">主要按钮</Button>\\n```\\n\\n```css\\n/* page.less */\\n.van-button--primary {\\n  font-size: 20px;\\n  background-color: pink;\\n}\\n```\\n\\n### 使用 CSS 变量\\n\\n@antmjs/vantui 为部分 CSS 属性开放了基于 CSS 属性的定制方案。\\n\\n相较于 样式类覆盖，这种方案支持在页面或应用级别对多个组件的样式做批量修改以进行主题样式的定制。\\n\\n当然，用它来修改单个组件的部分样式也是绰绰有余的。具体的使用方法请查阅[定制主题](#/theme)\\n\";","export default \"# 定制主题\\n\\n### 背景知识\\n\\nTaro3 的架构摒弃了小程序自定义组件带来的复杂性，所以 @antmjs/vantui 使用与之配套的 [CSS 变量](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties) 来实现定制主题。链接中的内容可以帮助你对这两个概念有基本的认识，避免许多不必要的困扰。\\n\\nCSS 变量 的兼容性要求可以在 [这里](https://caniuse.com/#feat=css-variables) 查看。对于不支持 CSS 变量 的设备，定制主题将不会生效，不过不必担心，默认样式仍会生效。\\n\\n### 样式变量\\n\\n定制使用的 CSS 变量 与 Less 变量 同名，下面是一些基本的样式变量，所有可用的颜色变量请参考 [配置文件](https://github.com/AntmJS/vantui/blob/main/packages/vantui/src/style/var.less)，你可以覆盖其变量达到定制主题的目的。\\n\\n```less\\n// Component Colors\\n@text-color: #323233;\\n@border-color: #ebedf0;\\n@active-color: #f2f3f5;\\n@background-color: #f7f8fa;\\n@background-color-light: #fafafa;\\n```\\n\\n## 定制方法\\n\\n### 步骤一 引入样式源文件\\n\\n定制主题时，需要引入组件对应的 Less 样式文件，支持按需引入和手动引入两种方式。\\n\\n#### 按需引入样式（推荐）\\n\\n在 babel.config.js 中配置按需引入样式源文件，注意 babel 6 不支持按需引入样式，请手动引入样式。\\n\\n```js\\nmodule.exports = {\\n  plugins: [\\n    [\\n      'import',\\n      {\\n        libraryName: '@antmjs/vantui',\\n        libraryDirectory: 'es',\\n        // 指定样式路径\\n        style: (name) => `${name}/style/less`,\\n      },\\n      '@antmjs/vantui',\\n    ],\\n  ],\\n}\\n```\\n\\n#### 手动引入样式\\n\\n```js\\n// 引入全部样式\\nimport '@antmjs/vantui/lib/index.less'\\n\\n// 引入单个组件样式\\nimport '@antmjs/vantui/lib/button/style/less'\\n```\\n\\n### 步骤二 修改样式变量\\n\\n#### 通过覆盖 less 主题方式修改\\n\\n使用 Less 提供的 [modifyVars](http://lesscss.org/usage/#using-less-in-the-browser-modify-variables) 即可对变量进行修改，下面是参考的 webpack 配置。\\n\\n```js\\n// webpack.config.js\\nmodule.exports = {\\n  rules: [\\n    {\\n      test: /\\\\.less$/,\\n      use: [\\n        // ...其他 loader 配置\\n        {\\n          loader: 'less-loader',\\n          options: {\\n            // 若 less-loader 版本小于 6.0，请移除 lessOptions 这一级，直接配置选项。\\n            lessOptions: {\\n              modifyVars: {\\n                // 直接覆盖变量\\n                'text-color': '#111',\\n                'border-color': '#eee',\\n                // 或者可以通过 less 文件覆盖（文件路径为绝对路径）\\n                hack: `true; @import \\\"your-less-file-path.less\\\";`,\\n              },\\n            },\\n          },\\n        },\\n      ],\\n    },\\n  ],\\n}\\n```\\n\\n#### 通过 css 变量形式修改\\n\\n##### 定制单个组件的主题样式\\n\\n> 在 less 中为组件设置 CSS 变量\\n\\n```jsx\\nexport default Index () {\\n  return <Button className=\\\"my-button\\\">\\n    默认按钮\\n  </Button>\\n}\\n```\\n\\n```less\\n.my-button {\\n  --button-border-radius: 10px;\\n  --button-default-color: #f2f3f5;\\n}\\n```\\n\\n> 或通过 style 属性来设置 CSS 变量，这使你能够轻松实现主题的动态切换\\n\\n```jsx\\nexport default Index () {\\n  const [buttonStyle, setButtonStyle] = useState({buttonStyle: \\\"--button-border-radius: 10px;--button-default-color: green;\\\"})\\n  useEffect(functon () {\\n    setTimeout(function () {\\n      setButtonStyle({buttonStyle: \\\"--button-border-radius: 2px;--button-default-color: pink;\\\"})\\n    }, 2000)\\n  }, [])\\n  return <Button style={buttonStyle}>\\n    默认按钮\\n  </Button>\\n}\\n```\\n\\n##### 定制多个组件的主题样式\\n\\n> 与单个组件的定制方式类似，只需用一个 container 节点包裹住需要定制的组件，并将 CSS 变量 设置在 container 节点上\\n\\n```jsx\\nexport default Index () {\\n  return <View classsName=\\\"container\\\">\\n    <Button className=\\\"my-button\\\">\\n      默认按钮\\n    </Button>\\n    <Toast id=\\\"van-toast\\\" />\\n  </View>\\n}\\n```\\n\\n```less\\n.container {\\n  --button-border-radius: 10px;\\n  --button-default-color: #f2f3f5;\\n  --toast-max-width: 100px;\\n  --toast-background-color: pink;\\n}\\n```\\n\\n##### 定制全局主题样式\\n\\n> 在 app.less 中，写入 CSS 变量，即可对全局生效\\n\\n```less\\npage {\\n  --button-border-radius: 10px;\\n  --button-default-color: #f2f3f5;\\n  --toast-max-width: 100px;\\n  --toast-background-color: pink;\\n}\\n```\\n\";","export default \"# 如何在 React 中使用（单纯的 React 应用，非 Taro 应用）\\n\\n### 在 React 应用中使用需要在如下文件中添加代码\\n\\n```bash\\nyarn add @tarojs/taro @tarojs/components @antmjs/vantui\\nyarn add @antmjs/babel-preset --dev\\n```\\n\\n- index.html\\n\\n```html\\n<head>\\n  <script>\\n    !(function (n) {\\n      function e() {\\n        var e = n.document.documentElement,\\n          t = e.getBoundingClientRect().width\\n        e.style.fontSize =\\n          t >= 640 ? '40px' : t <= 320 ? '20px' : (t / 320) * 20 + 'px'\\n      }\\n      n.addEventListener('resize', function () {\\n        e()\\n      }),\\n        e()\\n    })(window)\\n  </script>\\n</head>\\n```\\n\\n- src/index.js (入口文件)\\n\\n```js\\nimport { init } from '@antmjs/vantui'\\nimport { defineCustomElements, applyPolyfills } from '@tarojs/components/loader'\\n\\ninit()\\napplyPolyfills().then(function () {\\n  defineCustomElements(window)\\n})\\n```\\n\\n- webpack.config.js\\n\\n```js\\n{\\n  resolve: {\\n    mainFields: [\\n      'main:h5',\\n      'browser',\\n      'module',\\n      'jsnext:main',\\n      'main',\\n    ],\\n    alias: {\\n      // 默认@tarojs/components要指向dist-h5/react，而loader和taro-components.css只要直接指向@tarojs/components就行\\n      // 理论上还有优化的空间，慢慢来，持续迭代\\n      '@tarojs/components/dist/taro-components/taro-components.css': path.resolve(process.cwd(), './node_modules/@tarojs/components/dist/taro-components/taro-components.css'),\\n      '@tarojs/components/loader': path.resolve(process.cwd(), './node_modules/@tarojs/components/loader'),\\n      '@tarojs/components': path.resolve(process.cwd(), './node_modules/@tarojs/components/dist-h5/react'),\\n      react: path.resolve(process.cwd(), './node_modules/react'),\\n      'react-dom': path.resolve(process.cwd(), './node_modules/react-dom'),\\n    },\\n  },\\n  module: {\\n    rules: [\\n      {\\n        // 这里其实可以在自己的webpack内配置，核心就是匹配到test的部分不触发polyfill，仅仅更新下语法就行，否则会报错\\n        test: /node_modules[\\\\\\\\/]@tarojs(.+?)\\\\.[tj]sx?$/i,\\n        loader: require.resolve('babel-loader'),\\n        options: {\\n          presets: [\\n            [\\n              '@antmjs/babel-preset',\\n              {\\n                presets: {\\n                  env: {\\n                    debug: false,\\n\\n                    /**\\n                     * false: 不处理polyfill，自己手动引入【全量】\\n                     * usage: 按需加载 polyfill，且不需要手动引入【按需】\\n                     * entry: 必须手动引入，但会根据设置的目标环境全量导入【按环境全量】\\n                     * 注：在 Babel 7.4.0 之后的版本，Babel官方明确建议了不再使用 @babel/polyfill ，建议使用 core-js/stable 和 regenerator-runtime/runtime。本包已经安装了core-js、@babel/plugin-transform-runtime和@babel/runtime，所以选择false或者entry选项的只需要在主文件顶部引入core-js即可\\n                     */\\n                    useBuiltIns: false,\\n                    corejs: false,\\n                    modules: false, // 对es6的模块文件不做转译，以便使用tree shaking、sideEffects等\\n                  },\\n                  react: {\\n                    runtime: 'automatic',\\n                  },\\n                  typescript: {\\n                    isTSX: true,\\n                    jsxPragma: 'React',\\n                    allExtensions: true,\\n                    allowNamespaces: true,\\n                  },\\n                },\\n                decorators: {\\n                  legacy: false,\\n                  decoratorsBeforeExport: false,\\n                },\\n                classProperties: {\\n                  loose: false,\\n                },\\n                runtime: {\\n                  absoluteRuntime: path.dirname(\\n                    require.resolve(\\n                      '@babel/runtime-corejs3/package.json',\\n                    ),\\n                  ),\\n                  version: require('@babel/runtime-corejs3/package.json')\\n                    .version,\\n                  corejs: false,\\n                  helpers: true, // 使用到@babel/runtime\\n                  regenerator: true, // 使用到@babel/runtime\\n                  useESModules: false,\\n                },\\n                exclude: [/@babel[/|\\\\\\\\\\\\\\\\]runtime/, /core-js/],\\n              },\\n            ],\\n          ],\\n        },\\n      },\\n      {\\n        // 可以参考Taro的自适应方案\\n        test: /\\\\.less$/\\n        use: [\\n          // 这里展示的是组件核心需要的loader，其他loader请自行添加\\n          {\\n            loader: require.resolve('postcss-loader'),\\n            options: {\\n              ident: 'postcss',\\n              plugins: () => [\\n                require('postcss-pxtransform')({\\n                  platform: 'h5',\\n                  designWidth: 750,\\n                })\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  plugins: [\\n    // 为了使移动H5和Taro小程序保持同一套组件，原因在介绍有说明，所以这里需要把Taro内置的一些插件属性给加进来\\n    new webpack.DefinePlugin({\\n      ENABLE_INNER_HTML: true,\\n      ENABLE_ADJACENT_HTML: true,\\n      ENABLE_TEMPLATE_CONTENT: true,\\n      ENABLE_CLONE_NODE: true,\\n      ENABLE_SIZE_APIS: false,\\n    }),\\n    new webpack.EnvironmentPlugin({\\n      LIBRARY_ENV: 'react',\\n      TARO_ENV: 'h5',\\n    }),\\n    // const VantUIPlugin = require('@antmjs/plugin-vantui')\\n    // 如果用的就是750，则不需要添加该插件了\\n    new VantUIPlugin({\\n      designWidth: 750,\\n      deviceRatio: {\\n        640: 2.34 / 2,\\n        750: 1,\\n        828: 1.81 / 2,\\n      },\\n    }),\\n  ],\\n}\\n\\n```\\n\\n```bash\\nTARO_ENV=h5 yarn start\\n```\\n\\n> 愉快的玩耍吧！\\n\";","export default \"## ts 同步到文档说明\\n\\n### vantui-doc 下执行同步命令\\n\\n将 vantui/types 中 d.ts 的类型描述转换为文档中的 API props\\n\\n```bash\\nyarn docs-ts\\n```\\n\\n### ts 中注释\\n\\n- 只转换 export 的属性\\n- 导出类型的注释描述只支持@title 和@description\\n- 属性类型的注释描述只支持@default 和@description\\n- 转换后文档的组件 API 说明 展示的顺序和 ts 的 export 的顺序一致，所以 d.ts 中组件参数的 export 尽量放在最开始\\n\\n```ts\\n/**\\n * @title 组件实例\\n * @description 通过ref获取到的方法如下\\n */\\nexport type xxProps = {\\n  /**\\n   * @description 获取每一列的值\\n   * @default XX\\n   */\\n  xxvalue?: string\\n}\\n```\\n\";","export default \"# 高级模版功能说明\\n\\n###\\n\\n[高级版 React In Taro 模版工程](https://github.com/AntmJS/temptaro)：目前支持微信、支付宝、抖音、快手、百度小程序；支持 H5\\n\\n### 为什么封装一个高级版\\n\\n- 笔者是 React 的重度使用者，也开发过非常多的 React 应用，也从一线开发一步一步走到管理岗。回想一下，React 很大一部分“问题”是什么？是处理数据依赖不够优雅，不管是从 componentWillReceiveProps 到现在的 useEffect，或者各种全局数据状态管理工具，在时间紧且业务逻辑稍微复杂一点的场景，写出来的结果是可想而知的《PS：业务都来不及写，还管你优不优雅》。为什么很多国内中小型公司用 VUE，我想有一点点原因吧，写起来至少比 React 舒坦；\\n\\n- 另外一方面，写了无数个页面的我，发现每个页面基本都逃不出进来的时候 loading、然后渲染正常页面，或者渲染异常页面；下拉刷新；有分页的加个上划加载更多；点击的时候要控制抖动；错误的时候要 Toast；没登录的时候要弹出登录；八九不离十，都是差不多的，那有没有可能把这些重复的工作封装起来呢，嗯，我们这么做了；\\n\\n- 那对于我们来说，其实目的很单一，提高团队协作开发效率，提升代码质量，提高代码可维护性，我想这个模版能解决一些问题吧。当然额外增加了一个实例相比较研发速度及质量，我认为可以忽略；这个模版设计的初衷也是满足中小型企业用的，大公司有足够的资源、时间、规范等解决这些问题。最后，哪里有问题可以进群沟通交流。\\n\\n### 功能说明\\n\\n- 默认集成了 prettier eslint stylelint 解决编码规范问题\\n- 默认集成了 commitlint commitizen 解决 commit 规范问题\\n- 默认集成了 husky lint-staged 解决了 commit 之前自动校验代码规范\\n- 通过@antmjs/rapper 库使得 action 层能实现根据 TS 类型自动生成 action 逻辑，保证类型安全\\n- 通过 yarn swagger 使得 action 层也可以自动根据服务端的 swagger api 自动生成 action 逻辑，保证类型安全\\n- 通过@antmjs/iconfont 可以通过 yarn iconfont 兼容 iconfont 图标\\n- 通过@antmjs/trace 可以自己处理埋点需求\\n- 通过@antmjs/trace 可以自动收集未捕获异常\\n- 通过@antmjs/trace 可以很方便的上报埋点需求及异常信息\\n- 通过@antmjs/warning 可以快速的监听到指定文件的变动以快速告知相关合作研发的伙伴，比如谁谁谁私自变更了包依赖或者添加、删除了一个包等\\n- 通过@antmjs/cache 可以很方便的管理全局临时缓存和永久缓存\\n- 通过 recoil 作为 store 的管理工具\\n- 封装了 Container 组件用来自动管理顶部导航栏、下拉刷新、页面异常处理、登录等通用性逻辑\\n- 默认兼容了各端的的一些底层数据不一致，比如页面跳转或者扫码进来的数据统一 decode\\n- 默认封装了一些常用的组件在 components 目录下\\n- 默认封装了 Request 请求，统一规范，通过 TS 的加持，使得响应标准一致\\n- 默认添加了三种类型的页面模版(能覆盖百分之七八十的业务)，普通模版（自动下拉刷新）、分页模版（自动下拉刷新、上划分页），Tabs 分页模版（自动下拉刷新、上划分页、tab 切换及搜索）\\n- 集成了开箱即用的主题变更逻辑\\n- 通过@antmjs/vantui 的 Unite“组件”以空间换时间的方案加快研发速度，同时保证 TS 类型安全\\n\\n### Unite 是什么\\n\\n```jsx\\n// 代码不多，可以自己看源码\\nimport { Unite } from '@antmjs/vantui'\\n// 和UI无关的全局数据定义在这里面，具体可以看项目模版\\nimport {} from '@/cache'\\n// 和UI相关的全局数据定义在这里面，具体可以看项目模版\\nimport {} from '@/store'\\n\\n// 一切都是类型安全，一切都是自动提示 ！哈哈哈哈\\nexport default Unite(\\n  {\\n    // 和UI相关的当前页面变量定义在state里，和UI无关的当前页面变量定义在和state同层，比如tempData1,tempData2\\n    state: {},\\n    tempData1: 'xxx',\\n    tempData2: 'xxx',\\n    // onLoad onReady onShow 如果有发起异步请求的，记得加上async await 否则下拉刷新会打开后立即关闭\\n    async onLoad() {\\n      // 通过this.state可以取到state的结果\\n      // 通过this.props可以取到props的结果\\n      // 通过this.location可以取到路由的结果\\n      // 通过this.loading可以取到当前正在异步加载中的方法\\n      // 通过this.hooks可以取到下面传递过来的hooks数据\\n      // 通过this.error可以取到错误数据，一般不需要用到，Container会通过全局Context去获取及处理\\n    },\\n    async onReady() {},\\n    async onShow() {},\\n    async onHide() {},\\n  },\\n  // 这里返回的state loading error 和上方this一致，events除了上方定义的方法外，还有部分内置的方法比如；setHooks setError\\n  function ({ state, events, loading, error }, props) {\\n    // 伪代码\\n    const [menuButton, setMenuButton]: any = useRecoilState(menuButtonStore)\\n    // 这里通过setHooks方法可以将全局数据及全局数据的设置方法传递过去，方法里面可以通过this.hooks['xxx']获取到\\n    events.setHooks({\\n      xxx: menuButton,\\n      yyy: setMenuButton,\\n    })\\n    // 这里可以写hooks\\n    useEffect(() => {}, [])\\n    return (\\n      // 这里可以引入Container组件包裹起来，内置导航栏、下拉刷新逻辑、自动处理异常、登录等，具体可以看Container组件\\n      <View>Unite</View>\\n    )\\n  },\\n  // cancelInterception 默认对事件都添加了“防抖”策略，即触发async方法只有等结束之后再点才有效\\n  { page: true, cancelInterception: [] },\\n)\\n```\\n\\n### Unite 解决了什么\\n\\n- 既能使用 hooks 的能力，又能像 vue 一样快速开发 React 应用，避免了依赖问题\\n- 类型安全\\n- 自动捕获异常，开发只需关注业务本身逻辑\\n- 自动收集正在请求的方法，以 true ｜ false 的形式返回给业务侧\\n- 自动处理下拉刷新逻辑\\n- 建议新项目可以试试这个模版\\n\\n注： 目前成功或者错误的处理都遵循{success: true, data: xxx} {success: false, code: 'xxx', message: 'xxx'} 的规范，服务端返回的格式返回后建议前端做一个层处理，模版内 Request 部分有说明\\n\";","export default \"# Button 按钮\\n\\n### 介绍\\n\\n按钮用于触发一个操作，如提交表单。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport {\\n  Button,\\n  MiniLoginButton,\\n  MiniPhoneButton,\\n  MiniUserButton,\\n} from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 按钮类型\\n\\n支持`default`、`primary`、`info`、`warning`、`danger`五种类型，默认为`default`。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button type=\\\"default\\\">默认按钮</Button>\\n      <Button type=\\\"primary\\\">主要按钮</Button>\\n      <Button type=\\\"info\\\">信息按钮</Button>\\n      <Button type=\\\"warning\\\">警告按钮</Button>\\n      <Button type=\\\"danger\\\">危险按钮</Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 朴素按钮\\n\\n通过`plain`属性将按钮设置为朴素按钮，朴素按钮的文字为按钮颜色，背景为白色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button plain type=\\\"primary\\\">\\n        朴素按钮\\n      </Button>\\n      <Button plain type=\\\"info\\\">\\n        朴素按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 细边框\\n\\n设置`hairline`属性可以开启 0.5px 边框，基于伪类实现。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button plain hairline type=\\\"primary\\\">\\n        细边框按钮\\n      </Button>\\n      <Button plain hairline type=\\\"info\\\">\\n        细边框按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 禁用状态\\n\\n通过`disabled`属性来禁用按钮，此时按钮的`onClick`事件不会触发。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button disabled type=\\\"primary\\\">\\n        禁用状态\\n      </Button>\\n      <Button disabled type=\\\"info\\\">\\n        禁用状态\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 加载状态\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button loading type=\\\"primary\\\" />\\n      <Button loading type=\\\"primary\\\" loadingType=\\\"spinner\\\" />\\n      <Button loading type=\\\"info\\\" loadingText=\\\"加载中...\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 按钮形状\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button square type=\\\"primary\\\">\\n        方形按钮\\n      </Button>\\n      <Button round type=\\\"info\\\">\\n        圆形按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 图标按钮\\n\\n通过`icon`属性设置按钮图标，支持 Icon 组件里的所有图标，也可以传入图标 URL。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button icon=\\\"starO\\\" type=\\\"primary\\\" />\\n      <Button icon=\\\"starO\\\" type=\\\"primary\\\">\\n        按钮\\n      </Button>\\n      <Button\\n        icon=\\\"https://antm-js.gitee.io/resource/antmjs-vantui.jpg\\\"\\n        type=\\\"info\\\"\\n      >\\n        按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 按钮尺寸\\n\\n支持`large`、`normal`、`small`、`mini`四种尺寸，默认为`normal`。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" size=\\\"large\\\">\\n        大号按钮\\n      </Button>\\n      <Button type=\\\"primary\\\" size=\\\"normal\\\">\\n        普通按钮\\n      </Button>\\n      <Button type=\\\"primary\\\" size=\\\"small\\\">\\n        小型按钮\\n      </Button>\\n      <Button type=\\\"primary\\\" size=\\\"mini\\\">\\n        迷你按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 块级元素\\n\\n通过`block`属性可以将按钮的元素类型设置为块级元素。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" block>\\n        块级元素\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n通过`color`属性可以自定义按钮的颜色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Button color=\\\"#7232dd\\\">单色按钮</Button>\\n      <Button color=\\\"#7232dd\\\" plain>\\n        单色按钮\\n      </Button>\\n      <Button color=\\\"linear-gradient(to right, #4bb0ff, #6149f6)\\\">\\n        渐变色按钮\\n      </Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### ButtonProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/button.d.ts)\\n\\n| 参数        | 说明                 | 类型                                                                                                                                                                                                                                                                                     | 默认值 | 必填    |\\n| ----------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| icon        | 传入 Icon 的 name 值 | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| classPrefix | -                    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| type        | -                    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"default\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"primary\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"info\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"warning\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"danger\\\"<br/>_ | -      | `false` |\\n| size        | -                    | _&nbsp;&nbsp;\\\"small\\\"&nbsp;&brvbar;&nbsp;\\\"normal\\\"&nbsp;&brvbar;&nbsp;\\\"large\\\"&nbsp;&brvbar;&nbsp;\\\"mini\\\"<br/>_                                                                                                                                                                              | -      | `false` |\\n| block       | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| round       | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| square      | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| loading     | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| hairline    | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| disabled    | -                    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| loadingText | -                    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| loadingSize | -                    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| loadingType | -                    | _&nbsp;&nbsp;\\\"spinner\\\"&nbsp;&brvbar;&nbsp;\\\"circular\\\"<br/>_                                                                                                                                                                                                                               | -      | `false` |\\n| color       | -                    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| children    | -                    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n\";","export default \"# Cell 单元格\\n\\n### 介绍\\n\\n单元格为列表中的单个展示项。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Cell, CellGroup } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n`Cell`可以单独使用，也可以与`CellGroup`搭配使用。`CellGroup`可以为`Cell`提供上下外边框。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <CellGroup>\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" label=\\\"描述信息\\\" border={false} />\\n      </CellGroup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 卡片风格\\n\\n通过 CellGroup 的 `inset` 属性，可以将单元格转换为圆角卡片风格。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <CellGroup inset>\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" label=\\\"描述信息\\\" />\\n      </CellGroup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 单元格大小\\n\\n通过`size`属性可以控制单元格的大小。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell title=\\\"单元格\\\" value=\\\"内容\\\" size=\\\"large\\\" />\\n      <Cell title=\\\"单元格\\\" value=\\\"内容\\\" size=\\\"large\\\" label=\\\"描述信息\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 展示图标\\n\\n通过`icon`属性在标题左侧展示图标。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell title=\\\"单元格\\\" icon=\\\"locationO\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 展示箭头\\n\\n设置`isLink`属性后会在单元格右侧显示箭头，并且可以通过`arrowDirection`属性控制箭头方向。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell title=\\\"单元格\\\" isLink />\\n      <Cell title=\\\"单元格\\\" isLink value=\\\"内容\\\" />\\n      <Cell title=\\\"单元格\\\" isLink value=\\\"内容\\\" arrowDirection=\\\"down\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 页面跳转\\n\\n可以通过`url`属性进行页面跳转，通过`linkType`属性控制跳转类型。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell\\n        isLink\\n        title=\\\"单元格\\\"\\n        linkType=\\\"navigateTo\\\"\\n        url=\\\"/pages/dashboard/index\\\"\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 分组标题\\n\\n通过`CellGroup`的`title`属性可以指定分组标题。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <CellGroup title=\\\"分组1\\\">\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n      </CellGroup>\\n      <CellGroup title=\\\"分组2\\\">\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n      </CellGroup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义渲染内容\\n\\n如以上用法不能满足你的需求，可以使用`renderTitle`和`renderRightIcon`来渲染内容\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell\\n        value=\\\"内容\\\"\\n        icon=\\\"shop-o\\\"\\n        isLink\\n        renderTitle={\\n          <View>\\n            <View className=\\\"title\\\">单元格</View>\\n            <Tag type=\\\"danger\\\">标签</Tag>\\n          </View>\\n        }\\n      />\\n      <Cell\\n        title=\\\"单元格\\\"\\n        border={false}\\n        renderRightIcon={<Icon name=\\\"search\\\"></Icon>}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 垂直居中\\n\\n通过`center`属性可以让`Cell`的左右内容都垂直居中。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Cell center={true} title=\\\"单元格\\\" value=\\\"内容\\\" label=\\\"描述信息\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### CellProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/cell.d.ts)\\n\\n| 参数            | 说明                           | 类型                                                                                          | 默认值     | 必填    |\\n| --------------- | ------------------------------ | --------------------------------------------------------------------------------------------- | ---------- | ------- |\\n| url             | 点击后跳转的链接地址           | _&nbsp;&nbsp;string<br/>_                                                                     | -          | `false` |\\n| linkType        | 点击后跳转的链接地址           | _&nbsp;&nbsp;\\\"navigateTo\\\"&nbsp;&brvbar;&nbsp;\\\"reLaunch\\\"&nbsp;&brvbar;&nbsp;\\\"redirectTo\\\"<br/>_ | navigateTo | `false` |\\n| title           | 左侧标题                       | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                           | -          | `false` |\\n| value           | 右侧内容                       | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                           | -          | `false` |\\n| icon            | 标题下方的描述信息             | _&nbsp;&nbsp;string<br/>_                                                                     | -          | `false` |\\n| size            | 单元格大小，可选值为 large     | _&nbsp;&nbsp;\\\"large\\\"<br/>_                                                                    | -          | `false` |\\n| label           | 标题下方的描述信息             | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| center          | 是否使内容垂直居中             | _&nbsp;&nbsp;boolean<br/>_                                                                    | -          | `false` |\\n| isLink          | 是否展示右侧箭头并开启点击反馈 | _&nbsp;&nbsp;boolean<br/>_                                                                    | -          | `false` |\\n| required        | 是否显示表单必填星号           | _&nbsp;&nbsp;boolean<br/>_                                                                    | false      | `false` |\\n| clickable       | 是否开启点击反馈               | _&nbsp;&nbsp;boolean<br/>_                                                                    | false      | `false` |\\n| titleWidth      | 标题宽度，须包含单位           | _&nbsp;&nbsp;string<br/>_                                                                     | -          | `false` |\\n| style           | -                              | _&nbsp;&nbsp;string<br/>_                                                                     | -          | `false` |\\n| arrowDirection  | 箭头方向                       | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"up\\\"&nbsp;&brvbar;&nbsp;\\\"down\\\"<br/>_                   | -          | `false` |\\n| border          | 是否显示下边框                 | _&nbsp;&nbsp;boolean<br/>_                                                                    | -          | `false` |\\n| titleStyle      | 标题样式                       | _&nbsp;&nbsp;CSSProperties<br/>_                                                              | -          | `false` |\\n| renderTitle     | 自定义渲染标题                 | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| renderIcon      | 自定义渲染左侧 icon            | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| renderLabel     | 自定义 label 显示内容          | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| renderRightIcon | 自定义 icon 显示内容           | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| renderExtra     | 自定义右边内容后跟随的内容     | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n| children        | -                              | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -          | `false` |\\n\\n### CellGroup Props [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/cell.d.ts)\\n\\n| 参数     | 说明                   | 类型                         | 默认值 | 必填    |\\n| -------- | ---------------------- | ---------------------------- | ------ | ------- |\\n| title    | 标题                   | _&nbsp;&nbsp;ReactNode<br/>_ | -      | `false` |\\n| border   | 是否显示外边框         | _&nbsp;&nbsp;boolean<br/>_   | true   | `false` |\\n| inset    | 是否展示为圆角卡片风格 | _&nbsp;&nbsp;boolean<br/>_   | false  | `false` |\\n| children | -                      | _&nbsp;&nbsp;ReactNode<br/>_ | -      | `false` |\\n\";","export default \"# ConfigProvider 全局配置\\n\\n### 介绍\\n\\n用于配置 Vant Weapp 组件的主题样式。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { ConfigProvider } from '@antmjs/vantui'\\n```\\n\\n## 定制主题\\n\\n### 介绍\\n\\nVant Weapp 组件通过丰富的 [CSS 变量](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties) 来组织样式，通过覆盖这些 CSS 变量，可以实现**定制主题、动态切换主题**等效果。\\n\\n#### 示例\\n\\n以 Button 组件为例，查看组件的样式，可以看到 `.vanButton--primary` 类名上存在以下变量：\\n\\n```css\\n.vanButton--primary {\\n  color: var(--buttonPrimaryColor, #fff);\\n  background: var(--buttonPrimaryBackgroundColor, #07c160);\\n  border: var(--buttonBorderWidth, 1px) solid var(\\n      --buttonPrimaryBorderColor,\\n      #07c160\\n    );\\n}\\n```\\n\\n### 自定义 CSS 变量\\n\\n#### 通过 CSS 覆盖\\n\\n你可以直接在代码中覆盖这些 CSS 变量，Button 组件的样式会随之发生改变：\\n\\n```css\\n/* 添加这段样式后，Primary Button 会变成红色 */\\npage {\\n  --buttonPrimaryBackgroundColor: red;\\n}\\n```\\n\\n### 通过 ConfigProvider 覆盖\\n\\n`ConfigProvider` 组件提供了覆盖 CSS 变量的能力，你需要在根节点包裹一个 `ConfigProvider` 组件，并通过 `themeVars` 属性来配置一些主题变量。\\n\\n```jsx\\nconst themeVars = {\\n  rateIconFullColor: '#e19a9a',\\n  sliderBarHeight: '4px',\\n  sliderButtonWidth: '20px',\\n  sliderButtonHeight: '20px',\\n  sliderActiveBackgroundColor: '#e19a9a',\\n  buttonPrimaryBorderColor: '#e19a9a',\\n  buttonPrimaryBackgroundColor: '#e19a9a',\\n}\\n\\nfunction Demo() {\\n  const [rate, setRate] = react.useState(4)\\n  const [slider, setSlider] = react.useState(50)\\n\\n  return (\\n    <>\\n      <ConfigProvider themeVars={themeVars}>\\n        <CellGroup>\\n          <Field\\n            label=\\\"评分\\\"\\n            renderInput={\\n              <Rate value={rate} onChange={(e) => setRate(e.detail)}></Rate>\\n            }\\n          ></Field>\\n          <Field\\n            label=\\\"滑块\\\"\\n            border={false}\\n            renderInput={\\n              <View style=\\\"width: 100%\\\">\\n                <Slider\\n                  value={slider}\\n                  onChange={(e) => setSlider(e.detail)}\\n                ></Slider>\\n              </View>\\n            }\\n          ></Field>\\n        </CellGroup>\\n        <View style=\\\"margin: 16px\\\">\\n          <Button round block type=\\\"primary\\\">\\n            提交\\n          </Button>\\n        </View>\\n      </ConfigProvider>\\n      <ConfigProvider>\\n        <CellGroup>\\n          <Field\\n            label=\\\"评分\\\"\\n            renderInput={\\n              <Rate value={rate} onChange={(e) => setRate(e.detail)}></Rate>\\n            }\\n          ></Field>\\n          <Field\\n            label=\\\"滑块\\\"\\n            border={false}\\n            renderInput={\\n              <View style=\\\"width: 100%\\\">\\n                <Slider\\n                  value={slider}\\n                  onChange={(e) => setSlider(e.detail)}\\n                ></Slider>\\n              </View>\\n            }\\n          ></Field>\\n        </CellGroup>\\n        <View style=\\\"margin: 16px\\\">\\n          <Button round block type=\\\"primary\\\">\\n            提交\\n          </Button>\\n        </View>\\n      </ConfigProvider>\\n    </>\\n  )\\n}\\n```\\n\\n### ConfigProviderProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/config-provider.d.ts)\\n\\n| 参数      | 说明           | 类型                                 | 默认值 | 必填   |\\n| --------- | -------------- | ------------------------------------ | ------ | ------ |\\n| themeVars | 自定义主题变量 | _&nbsp;&nbsp;Normal.IAnyObject<br/>_ | -      | `true` |\\n| children  | -              | _&nbsp;&nbsp;ReactNode<br/>_         | -      | `true` |\\n\";","export default \"# Icon 图标\\n\\n### 介绍\\n\\n基于字体的图标集，可以通过 Icon 组件使用，也可以在其他组件中通过 icon 属性引用。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Icon } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n- `Icon`的`name`属性支持传入图标名称或图片链接。\\n- 设置`dot`属性后，会在图标右上角展示一个小红点。设置`info`属性后，会在图标右上角展示相应的徽标。\\n- 设置`color`属性来控制图标颜色。\\n- 设置`size`属性来控制图标大小。\\n- 如果需要在现有 Icon 的基础上使用更多图标，可以引入第三方 iconfont 对应的字体文件和 CSS 文件，之后就可以在 Icon 组件中直接使用。例如，可以在 `app.less` 文件中引入。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      <Row>\\n        <View className=\\\"demo-block__title\\\">基本用法</View>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"32px\\\" className=\\\"icon\\\"></Icon>\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon\\n            name=\\\"https://b.yzcdn.cn/vant/icon-demo-1126.png\\\"\\n            size=\\\"32px\\\"\\n            className=\\\"icon\\\"\\n          ></Icon>\\n        </Col>\\n      </Row>\\n      <Row>\\n        <View className=\\\"demo-block__title\\\">提示信息</View>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"32px\\\" className=\\\"icon\\\" dot></Icon>\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"32px\\\" className=\\\"icon\\\" info=\\\"9\\\"></Icon>\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"32px\\\" className=\\\"icon\\\" info=\\\"99+\\\"></Icon>\\n        </Col>\\n      </Row>\\n      <Row>\\n        <View className=\\\"demo-block__title\\\">图标颜色</View>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon\\n            color=\\\"#1989fa\\\"\\n            name=\\\"chat-o\\\"\\n            size=\\\"32px\\\"\\n            className=\\\"icon\\\"\\n          ></Icon>\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon\\n            color=\\\"#07c160\\\"\\n            name=\\\"chat-o\\\"\\n            size=\\\"32px\\\"\\n            className=\\\"icon\\\"\\n          ></Icon>\\n        </Col>\\n      </Row>\\n      <Row>\\n        <View className=\\\"demo-block__title\\\">图标大小</View>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"40\\\" className=\\\"icon\\\"></Icon>\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"chat-o\\\" size=\\\"3rem\\\" className=\\\"icon\\\"></Icon>\\n        </Col>\\n      </Row>\\n\\n      <Row>\\n        <View className=\\\"demo-block__title\\\">自定义图标</View>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"demo1\\\" classPrefix=\\\"page-icon\\\" size=\\\"40px\\\" />\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"demo2\\\" classPrefix=\\\"page-icon\\\" size=\\\"40px\\\" />\\n        </Col>\\n        <Col className=\\\"col\\\" span=\\\"6\\\">\\n          <Icon name=\\\"demo3\\\" classPrefix=\\\"page-icon\\\" size=\\\"40px\\\" />\\n        </Col>\\n      </Row>\\n    </>\\n  )\\n}\\n```\\n\\n引入第三方或自定义的字体图标样式\\n\\n```css\\n@font-face {\\n  font-family: 'iconfont';\\n  src: url('data: charset=utf-8;base64, .......') format('truetype');\\n}\\n\\n.page-icon {\\n  font-family: 'iconfont' !important;\\n  font-size: 16px;\\n  font-style: normal;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n.page-icon-demo1::before {\\n  content: '\\\\ea3c';\\n}\\n\\n.page-icon-demo2::before {\\n  content: '\\\\ea3d';\\n}\\n\\n.page-icon-demo3::before {\\n  content: '\\\\ea3e';\\n}\\n```\\n\\n### 基础图标\\n\\n```jsx\\nimport icons from '@vant/icons'\\nfunction Demo() {\\n  return (\\n    <>\\n      {icons.basic.map((name) => (\\n        <Col span=\\\"6\\\" style={{ paddingTop: '20px', paddingBottom: '20px' }}>\\n          <Icon name={name} size=\\\"32px\\\" />\\n          <Text>{name}</Text>\\n        </Col>\\n      ))}\\n    </>\\n  )\\n}\\n```\\n\\n### 线框图标\\n\\n```jsx\\nimport icons from '@vant/icons'\\nfunction Demo() {\\n  return (\\n    <>\\n      {icons.outline.map((name) => (\\n        <Col\\n          span=\\\"6\\\"\\n          style={{ paddingTop: '20px', paddingBottom: '20px', height: '100px' }}\\n        >\\n          <Icon name={name} size=\\\"32px\\\" />\\n          <Text style={{ textAlign: 'center' }}>{name}</Text>\\n        </Col>\\n      ))}\\n    </>\\n  )\\n}\\n```\\n\\n### 实心图标\\n\\n```jsx\\nimport icons from '@vant/icons'\\nfunction Demo() {\\n  return (\\n    <>\\n      {icons.filled.map((name) => (\\n        <Col\\n          span=\\\"6\\\"\\n          style={{ paddingTop: '20px', paddingBottom: '20px', height: '100px' }}\\n        >\\n          <Icon name={name} size=\\\"32px\\\" />\\n          <Text style={{ textAlign: 'center' }}>{name}</Text>\\n        </Col>\\n      ))}\\n    </>\\n  )\\n}\\n```\\n\\n### IconProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/icon.d.ts)\\n\\n| 参数        | 说明                         | 类型                                                       | 默认值    | 必填    |\\n| ----------- | ---------------------------- | ---------------------------------------------------------- | --------- | ------- |\\n| dot         | 是否显示图标右上角小红点     | _&nbsp;&nbsp;boolean<br/>_                                 | -         | `false` |\\n| info        | 图标右上角文字提示           | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_        | false     | `false` |\\n| size        | 图标大小，如 20px，单位为 px | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_        | -         | `false` |\\n| color       | 图标颜色                     | _&nbsp;&nbsp;string<br/>_                                  | -         | `false` |\\n| style       | 自定义样式                   | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;CSSProperties<br/>_ | -         | `false` |\\n| classPrefix | 类名前缀                     | _&nbsp;&nbsp;string<br/>_                                  | vant-icon | `false` |\\n| name        | 图标名称或图片链接           | _&nbsp;&nbsp;string<br/>_                                  | -         | `false` |\\n\";","export default \"# Image 图片\\n\\n### 介绍\\n\\n增强版的 img 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Image } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Image\\n      width=\\\"100px\\\"\\n      height=\\\"100px\\\"\\n      src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 填充模式\\n\\n通过`fit`属性可以设置图片填充模式，可选值见下方表格。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Row gutter=\\\"20\\\">\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"contain\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>contain</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"cover\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>cover</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"fill\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>fill</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"none\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>none</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"scaleDown\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>scaleDown</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"widthFix\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>widthFix</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"100px\\\"\\n          fit=\\\"heightFix\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        />\\n        <View>heightFix</View>\\n      </Col>\\n    </Row>\\n  )\\n}\\n```\\n\\n### 圆形图片\\n\\n通过`round`属性可以设置图片变圆，注意当图片宽高不相等且`fit`为`contain`或`scaleDown`时，将无法填充一个完整的圆形。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Image\\n      round\\n      width=\\\"100px\\\"\\n      height=\\\"100px\\\"\\n      src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 图片懒加载\\n\\n图片懒加载，在即将进入一定范围（上下三屏）时才开始加载。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Row gutter=\\\"20\\\">\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"27vw\\\"\\n          src=\\\"https://img.yzcdn.cn/vant/cat.jpeg\\\"\\n        ></Image>\\n        <View className=\\\"text\\\">默认提示</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image\\n          width=\\\"100%\\\"\\n          height=\\\"27vw\\\"\\n          renderLoading={<Loading type=\\\"spinner\\\" size=\\\"20\\\" vertical></Loading>}\\n        ></Image>\\n        <View className=\\\"text\\\">自定义提示</View>\\n      </Col>\\n    </Row>\\n  )\\n}\\n```\\n\\n### 加载中提示\\n\\n`Image`组件提供了默认的加载中提示，支持通过`loading`插槽自定义内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Row gutter=\\\"20\\\">\\n      <Col span=\\\"8\\\">\\n        <Image width=\\\"100%\\\" height=\\\"27vw\\\" src=\\\"x\\\"></Image>\\n        <View className=\\\"text\\\">默认提示</View>\\n      </Col>\\n      <Col span=\\\"8\\\">\\n        <Image width=\\\"100%\\\" height=\\\"27vw\\\" renderLoading={<Loading />}></Image>\\n        <View className=\\\"text\\\">自定义加载中</View>\\n      </Col>\\n    </Row>\\n  )\\n}\\n```\\n\\n### 加载失败提示\\n\\n`Image`组件提供了默认的加载失败提示，支持通过`renderError`来自定义内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Image\\n        width=\\\"100px\\\"\\n        height=\\\"100px\\\"\\n        src=\\\"xxxx\\\"\\n        renderError={<Text>加载失败</Text>}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### ImageProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/image.d.ts)\\n\\n| 参数                | 说明                                 | 类型                                                                                                                                                                                                                                                                                                                                        | 默认值 | 必填    |\\n| ------------------- | ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| src                 | 图片链接                             | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `true`  |\\n| round               | 是否圆角                             | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | false  | `false` |\\n| width               | 宽度，单位为 px                      | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                         | -      | `false` |\\n| height              | 高度，单位为 px                      | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                         | -      | `false` |\\n| radius              | 圆角大小                             | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                         | 0      | `false` |\\n| lazyLoad            | 是否懒加载                           | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | false  | `false` |\\n| showMenuByLongpress | 是否开启长按图片显示识别小程序码菜单 | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | false  | `false` |\\n| fit                 | 图片填充模式                         | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"contain\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"cover\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"fill\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"widthFix\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"heightFix\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"none\\\"<br/>_ | fill   | `false` |\\n| showError           | 是否展示图片加载失败提示             | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | false  | `false` |\\n| showLoading         | 是否使用 loading 状态                | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | true   | `false` |\\n| renderLoading       | 渲染 loading 展示元素                | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderError         | 渲染错误描述展示元素                 | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n\";","export default \"# Layout 布局\\n\\n### 介绍\\n\\nLayout 提供了`vanRow`和`vanCol`两个组件来进行行列布局。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Row, Col } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基本用法\\n\\nLayout 组件提供了`24列栅格`，通过在`Col`上添加`span`属性设置列所占的宽度百分比。此外，添加`offset`属性可以设置列的偏移宽度，计算方式与 span 相同。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Row>\\n        <Col span=\\\"8\\\" className=\\\"dark\\\">\\n          span: 8\\n        </Col>\\n        <Col span=\\\"8\\\" className=\\\"light\\\">\\n          span: 8\\n        </Col>\\n        <Col span=\\\"8\\\" className=\\\"dark\\\">\\n          span: 8\\n        </Col>\\n      </Row>\\n      <Row>\\n        <Col span=\\\"4\\\" className=\\\"dark\\\">\\n          span: 4\\n        </Col>\\n        <Col span=\\\"10\\\" className=\\\"light\\\" offset=\\\"4\\\">\\n          offset: 4, span: 10\\n        </Col>\\n      </Row>\\n      <Row>\\n        <Col offset=\\\"12\\\" span=\\\"12\\\" className=\\\"dark\\\">\\n          offset: 12, span: 12\\n        </Col>\\n      </Row>\\n    </View>\\n  )\\n}\\n```\\n\\n### 设置列元素间距\\n\\n通过`gutter`属性可以设置列元素之间的间距，默认间距为 0。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Row gutter=\\\"20\\\">\\n        <Col span=\\\"8\\\" className=\\\"dark\\\">\\n          span: 8\\n        </Col>\\n        <Col span=\\\"8\\\" className=\\\"dark\\\">\\n          span: 8\\n        </Col>\\n        <Col span=\\\"8\\\" className=\\\"dark\\\">\\n          span: 8\\n        </Col>\\n      </Row>\\n    </View>\\n  )\\n}\\n```\\n\\n### ColProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/col.d.ts)\\n\\n| 参数     | 说明                                         | 类型                                                | 默认值 | 必填    |\\n| -------- | -------------------------------------------- | --------------------------------------------------- | ------ | ------- |\\n| span     | 列元素宽度                                   | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `true`  |\\n| offset   | 列元素偏移距离                               | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| gutter   | 列元素之间的间距（单位为 px）, 从 Row 上获取 | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| children | -                                            | _&nbsp;&nbsp;React.ReactNode<br/>_                  | -      | `true`  |\\n\\n### Row Props [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/col.d.ts)\\n\\n| 参数     | 说明                          | 类型                                                | 默认值 | 必填    |\\n| -------- | ----------------------------- | --------------------------------------------------- | ------ | ------- |\\n| gutter   | 列元素之间的间距（单位为 px） | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| children | -                             | _&nbsp;&nbsp;React.ReactNode<br/>_                  | -      | `true`  |\\n\";","export default \"# Popup 弹出层\\n\\n### 介绍\\n\\n弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Popup } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`show`属性控制弹出层是否展示。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"展示弹出层\\\" isLink onClick={() => setShow(true)} />\\n      <Popup show={show} onClose={() => setShow(false)}>\\n        内容\\n      </Popup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 弹出位置\\n\\n通过`position`属性设置弹出位置，默认居中弹出，可以设置为`top`、`bottom`、`left`、`right`。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [position, setPosition] = react.useState('top')\\n\\n  const showAction = function (position) {\\n    setPosition(position)\\n    setShow(true)\\n  }\\n\\n  return (\\n    <View>\\n      <Cell title=\\\"顶部弹出\\\" isLink onClick={() => showAction('top')} />\\n      <Cell title=\\\"底部弹出\\\" isLink onClick={() => showAction('bottom')} />\\n      <Cell title=\\\"左侧弹出\\\" isLink onClick={() => showAction('left')} />\\n      <Cell title=\\\"右侧弹出\\\" isLink onClick={() => showAction('right')} />\\n      <Popup show={show} position={position} onClose={() => setShow(false)}>\\n        内容{position}\\n      </Popup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 关闭图标\\n\\n设置`closeable`属性后，会在弹出层的右上角显示关闭图标，并且可以通过`closeIcon`属性自定义图标，使用`closeIconPosition`属性可以自定义图标位置。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"关闭图标\\\" isLink onClick={() => setShow(true)} />\\n      <Popup\\n        closeable\\n        closeIcon=\\\"close\\\"\\n        show={show}\\n        onClose={() => setShow(false)}\\n        closeIconPosition=\\\"topRight\\\"\\n      >\\n        内容\\n      </Popup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 圆角弹窗\\n\\n设置`round`属性后，弹窗会根据弹出位置添加不同的圆角样式。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"圆角弹窗\\\" isLink onClick={() => setShow(true)} />\\n      <Popup round show={show} onClose={() => setShow(false)}>\\n        内容\\n      </Popup>\\n    </View>\\n  )\\n}\\n```\\n\\n### 禁止滚动穿透\\n\\n使用组件时，会发现内容部分滚动到底时，继续划动会导致底层页面的滚动，这就是滚动穿透。\\n\\n目前，组件可以通过 `lockScroll` 属性处理部分滚动穿透问题。 **但由于小程序自身原因，弹窗内容区域仍会出现滚动穿透。** 不过，我们为开发者提供了一个推荐方案以完整解决滚动穿透：\\n\\n#### [pageMeta](https://developers.weixin.qq.com/miniprogram/dev/component/pageMeta.html)\\n\\n当小程序基础库最低版本在 2.9.0 以上时，即可使用 [pageMeta](https://developers.weixin.qq.com/miniprogram/dev/component/pageMeta.html) 组件动态修改页面样式\\n\\n```jsx\\n<View>\\n  {/*  pageMeta 只能是页面内的第一个节点  */}\\n  <pageMeta pageStyle={state.show ? 'overflow: hidden;' : ''} />\\n  <Popup show={state.show} />\\n</View>\\n```\\n\\n### PopupProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/popup.d.ts)\\n\\n| 参数                | 说明                               | 类型                                                                                                                                                                                                                                                 | 默认值 | 必填    |\\n| ------------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| round               | 是否显示圆角                       | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | -      | `false` |\\n| closeable           | 是否显示关闭图标                   | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | -      | `false` |\\n| overlayStyle        | 自定义遮罩层样式                   | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n| transition          | 执行                               | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n| zIndex              | 弹出层的层级                       | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n| overlay             | 是否显示遮罩层                     | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | -      | `false` |\\n| closeIcon           | 关闭图标名称或图片链接             | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n| closeIconPosition   | 关闭图标名称或图片链接的位置       | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"top-left\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"top-right\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"bottom-left\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"bottom-right\\\"<br/>_ | -      | `false` |\\n| closeOnClickOverlay | 是否在点击遮罩层后关闭             | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | true   | `false` |\\n| position            | 弹出位置                           | _&nbsp;&nbsp;\\\"top\\\"&nbsp;&brvbar;&nbsp;\\\"bottom\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"&nbsp;&brvbar;&nbsp;\\\"left\\\"<br/>_                                                                                                                                            | center | `false` |\\n| safeAreaInsetBottom | 是否为 iPhoneX 留出底部安全距离    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | true   | `false` |\\n| safeAreaInsetTop    | 是否留出顶部安全距离（状态栏高度） | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                           | false  | `false` |\\n| children            | -                                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                         | -      | `false` |\\n| onClickOverlay      | 点击蒙层触发的方法                 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                              | -      | `false` |\\n| onClose             | 蒙层关闭触发的方法                 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                              | -      | `false` |\\n\";","export default \"# 内置样式\\n\\n### 介绍\\n\\nVant 中默认包含了一些常用样式，可以直接通过 className 的方式使用。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```css\\n@import '@antmjs/vantui/es/style/base.less';\\n```\\n\\n## 代码演示\\n\\n### 文字省略\\n\\n当文本内容长度超过容器最大宽度时，自动省略多余的文本。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      <View\\n        class=\\\"van-ellipsis\\\"\\n        style={{ width: '200px', marginBottom: '20px' }}\\n      >\\n        这是一段宽度限制 250px 的文字，后面的内容会省略。\\n      </View>\\n\\n      {/**  最多显示两行**/}\\n      <View\\n        class=\\\"van-multi-ellipsis--l2\\\"\\n        style={{ width: '200px', marginBottom: '20px' }}\\n      >\\n        这是一段最多显示两行的文字，后面的内容会省略。\\n        这是一段最多显示两行的文字，后面的内容会省略。\\n      </View>\\n\\n      {/**  最多显示三行**/}\\n      <View class=\\\"van-multi-ellipsis--l3\\\" style={{ width: '200px' }}>\\n        这是一段最多显示三行的文字，后面的内容会省略。\\n        这是一段最多显示两行的文字，后面的内容会省略。\\n        这是一段最多显示两行的文字，后面的内容会省略。\\n      </View>\\n    </>\\n  )\\n}\\n```\\n\\n### 1px 边框\\n\\n为元素添加 Retina 屏幕下的 1px 边框（即 hairline），基于伪类 transform 实现。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      {/**  上边框,可选各个方向 **/}\\n      <View\\n        class=\\\"van-hairline--top\\\"\\n        style={{ width: '200px', marginBottom: '20px' }}\\n      ></View>\\n\\n      {/**  全边框 **/}\\n      <View\\n        class=\\\"van-hairline--surround\\\"\\n        style={{ width: '200px', marginBottom: '20px', height: '200px' }}\\n      >\\n        全边框\\n      </View>\\n    </>\\n  )\\n}\\n```\\n\\n### 全局字体\\n\\n推荐在 app.wxss 中设置以下全局字体，以保证在不同设备上提供最佳的视觉体验。\\n\\n```css\\npage {\\n  fontfamily: -appleSystem, BlinkMacSystemFont, 'Helvetica Neue', Helvetica,\\n    Segoe UI, Arial, Roboto, 'PingFang SC', 'miui', 'Hiragino Sans GB', 'Microsoft Yahei',\\n    sansSerif;\\n}\\n```\\n\";","export default \"# Toast 轻提示\\n\\n### 介绍\\n\\n在页面中间弹出黑色半透明提示，用于消息通知、加载提示、操作结果提示等场景。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Toast } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 文字提示\\n\\n须要在 JSX 里面申明后，才能用命令式调用\\n\\n```javascript\\nimport { Toast } from 'vantui'\\n```\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Toast.show('我是提示文案')\\n  }\\n\\n  const showLong = () => {\\n    Toast.show('我是提示文案, 超过了十五就会换行额～～～')\\n  }\\n\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" onClick={show}>\\n        文字提示\\n      </Button>\\n      <Button type=\\\"primary\\\" onClick={showLong}>\\n        长文字提示\\n      </Button>\\n      <Toast id=\\\"vanToast-demo1\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 加载提示\\n\\n使用 `Toast.loading` 方法展示加载提示，通过 `forbidClick` 属性可以禁用背景点击，通过 `loadingType` 属性可以自定义加载图标类型。\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Toast.success({\\n      message: '成功文案',\\n      selector: '#vanToast-demo2',\\n    })\\n  }\\n\\n  const showLong = () => {\\n    Toast.fail({\\n      message: '失败文案',\\n      selector: '#vanToast-demo2',\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" onClick={show}>\\n        加载提示\\n      </Button>\\n      <Button type=\\\"primary\\\" onClick={showLong}>\\n        自定义加载图标\\n      </Button>\\n      <Toast id=\\\"vanToast-demo2\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 成功/失败提示\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Toast.success({\\n      message: '成功文案',\\n      selector: '#vanToast-demo2',\\n    })\\n  }\\n\\n  const showLong = () => {\\n    Toast.loading({\\n      message: '失败文案',\\n      selector: '#vanToast-demo2',\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Button type=\\\"info\\\" onClick={show}>\\n        成功\\n      </Button>\\n      <Button type=\\\"danger\\\" onClick={showLong}>\\n        失败\\n      </Button>\\n      <Toast id=\\\"vanToast-demo2\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 动态更新提示\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Toast.loading({\\n      duration: 0, // 持续展示 toast\\n      forbidClick: true,\\n      message: '倒计时 3 秒',\\n      selector: '#customSelector',\\n    })\\n\\n    let second = 3\\n    const timer = setInterval(() => {\\n      second--\\n      if (second) {\\n        Toast.loading({\\n          message: `倒计时 ${second} 秒`,\\n        })\\n      } else {\\n        clearInterval(timer)\\n        Toast.clear()\\n      }\\n    }, 1000)\\n  }\\n\\n  return (\\n    <View>\\n      <Button type=\\\"info\\\" onClick={show}>\\n        动态提示\\n      </Button>\\n      <Toast id=\\\"customSelector\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### OnClose 回调函数\\n\\n```javascript\\nToast.show({\\n  type: 'success',\\n  message: '提交成功',\\n  onClose: () => {\\n    console.log('执行OnClose函数')\\n  },\\n})\\n```\\n\\n### ToastProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/toast.d.ts)\\n\\n| 参数        | 说明                                    | 类型                                                                                                                                                                                                                                                                                | 默认值    | 必填    |\\n| ----------- | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ------- |\\n| zIndex      | 弹出层的层级                            | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                           | 1000      | `false` |\\n| duration    | 展示时长(ms)，值为 0 时，toast 不会消失 | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                           | 2000      | `false` |\\n| mask        | 是否有蒙层                              | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                          | false     | `false` |\\n| forbidClick | 是否禁止背景点击                        | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                          | false     | `false` |\\n| type        | 提示类型                                | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"loading\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"success\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"fail\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"html\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"text\\\"<br/>_ | text      | `false` |\\n| position    | 展示位置                                | _&nbsp;&nbsp;\\\"top\\\"&nbsp;&brvbar;&nbsp;\\\"middle\\\"&nbsp;&brvbar;&nbsp;\\\"bottom\\\"<br/>_                                                                                                                                                                                                    | middle    | `false` |\\n| message     | 内容                                    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                        | -         | `false` |\\n| loadingType | 加载图标类型                            | _&nbsp;&nbsp;\\\"circular\\\"&nbsp;&brvbar;&nbsp;\\\"spinner\\\"&nbsp;&brvbar;&nbsp;undefined<br/>_                                                                                                                                                                                             | spinner   | `false` |\\n| selector    | 自定义选择器, 对应元素 id               | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                           | van-toast | `false` |\\n| id          | 设置 id,配合 selector 使用              | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                           | -         | `false` |\\n| children    | -                                       | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                        | -         | `false` |\\n| onClose     | 关闭时的回调函数                        | _&nbsp;&nbsp;()&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                                              | -         | `false` |\\n\\n### Toast 下命令式调用方法 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/toast.d.ts)\\n\\n调用方式传入 ToastProps 或者 ToastProps.message 执行\\n| 参数 | 说明 | 类型 | 默认值 | 必填 |\\n| --- | --- | --- | --- | --- |\\n| show | - | _&nbsp;&nbsp;(options:&nbsp;ToastProps&nbsp;&brvbar;&nbsp;string)&nbsp;=>&nbsp;any<br/>_ | - | `true` |\\n| loading | - | _&nbsp;&nbsp;(options:&nbsp;ToastProps&nbsp;&brvbar;&nbsp;string)&nbsp;=>&nbsp;any<br/>_ | - | `true` |\\n| success | - | _&nbsp;&nbsp;(options:&nbsp;ToastProps&nbsp;&brvbar;&nbsp;string)&nbsp;=>&nbsp;any<br/>_ | - | `true` |\\n| fail | - | _&nbsp;&nbsp;(options:&nbsp;ToastProps&nbsp;&brvbar;&nbsp;string)&nbsp;=>&nbsp;any<br/>_ | - | `true` |\\n| clear | - | _&nbsp;&nbsp;(options?:&nbsp;ToastProps)&nbsp;=>&nbsp;void<br/>_ | - | `true` |\\n| setDefaultOptions | - | _&nbsp;&nbsp;(options:&nbsp;ToastProps)&nbsp;=>&nbsp;void<br/>_ | - | `true` |\\n| resetDefaultOptions | - | _&nbsp;&nbsp;(options:&nbsp;any)&nbsp;=>&nbsp;void<br/>_ | - | `true` |\\n\";","export default \"# Transition 动画\\n\\n### 介绍\\n\\n使元素从一种样式逐渐变化为另一种样式的效果。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Transition } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n- 将元素包裹在 transition 组件内，在元素展示/隐藏时，会有相应的过渡动画。\\n- transition 组件内置了多种动画，可以通过`name`字段指定动画类型。\\n\\n```jsx\\nconst animations = [\\n  'fade',\\n  'fade-up',\\n  'fade-down',\\n  'fade-left',\\n  'fade-right',\\n  'slide-up',\\n  'slide-down',\\n  'slide-left',\\n  'slide-right',\\n]\\nfunction Demo() {\\n  const [show, setShow] = react.useState()\\n  const animationAction = (ss) => {\\n    setShow(ss)\\n    setTimeout(() => {\\n      setShow(false)\\n    }, 1000)\\n  }\\n\\n  return (\\n    <View>\\n      {animations.map((item) => (\\n        <Cell\\n          title={item}\\n          key={item}\\n          onClick={() => animationAction(item)}\\n        ></Cell>\\n      ))}\\n      {animations.map((item) => (\\n        <Transition\\n          duration={{ enter: 300, leave: 1000 }}\\n          className=\\\"center-x\\\"\\n          enterClass=\\\"vanEnterClass\\\"\\n          enterActiveClass=\\\"vanEnterActiveClass\\\"\\n          leaveActiveClass=\\\"vanLeaveActiveClass\\\"\\n          leaveToClass=\\\"vanLeaveToClass\\\"\\n          key={`${item}tran`}\\n          show={show === item}\\n          name={item}\\n        />\\n      ))}\\n    </View>\\n  )\\n}\\n```\\n\\n```css\\n.vanEnterActiveClass,\\n.vanLeaveActiveClass {\\n  transitionproperty: backgroundColor, transform;\\n}\\n\\n.vanEnterClass,\\n.vanLeaveToClass {\\n  backgroundcolor: red;\\n  transform: rotate(-360deg) translate3d(-100%, -100%, 0);\\n}\\n```\\n\\n### TransitionPropsCom [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/transition.d.ts)\\n\\n| 参数     | 说明 | 类型                         | 默认值 | 必填    |\\n| -------- | ---- | ---------------------------- | ------ | ------- |\\n| children | -    | _&nbsp;&nbsp;ReactNode<br/>_ | -      | `false` |\\n\";","export default \"# Calendar 日历\\n\\n### 介绍\\n\\n日历组件用于选择日期或日期区间。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Calendar } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 选择单个日期\\n\\n下面演示了结合单元格来使用日历组件的用法，日期选择完成后会触发`confirm`事件。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"选择单个日期\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 选择多个日期\\n\\n设置`type`为`multiple`后可以选择多个日期，此时`confirm`事件返回的 date 为数组结构，数组包含若干个选中的日期。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"选择多个日期\\\"\\n        value={`${date ? `选择了${date.length}个日期` : ''}`}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        show={show}\\n        type=\\\"multiple\\\"\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.map((date) => date?.valueOf()))\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 选择日期区间\\n\\n设置`type`为`range`后可以选择日期区间，此时`confirm`事件返回的 date 为数组结构，数组第一项为开始时间，第二项为结束时间。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDates = react.useCallback((d) => {\\n    if (d && d.length) {\\n      let text = []\\n      d.forEach((item) => {\\n        const res = new Date(item)\\n        text.push(`${res.getMonth()}-${res.getDate()}`)\\n      })\\n\\n      return text.join(` 至 `)\\n    }\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"选择多个日期\\\"\\n        value={formatDates(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        show={show}\\n        type=\\\"range\\\"\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.map((date) => date?.valueOf()))\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n> Tips: 默认情况下，日期区间的起止时间不能为同一天，可以通过设置 allowSameDay 属性来允许选择同一天。\\n\\n### 快捷选择\\n\\n将`showConfirm`设置为`false`可以隐藏确认按钮，这种情况下选择完成后会立即触发`confirm`事件。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState(Date.now())\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"选择单个日期\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        showConfirm={false}\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n通过`color`属性可以自定义日历的颜色，对选中日期和底部按钮生效。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState(Date.now())\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"选择单个日期\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        color=\\\"#07c160\\\"\\n        showConfirm={false}\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义日期范围\\n\\n通过`minDate`和`maxDate`定义日历的范围，需要注意的是`minDate`和`maxDate`的区间不宜过大，否则会造成严重的性能问题。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDates = react.useCallback((d) => {\\n    if (d && d.length) {\\n      let text = []\\n      d.forEach((item) => {\\n        const res = new Date(item)\\n        text.push(`${res.getMonth() + 1}-${res.getDate()}`)\\n      })\\n\\n      return text.join(` 至 `)\\n    }\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"自定义范围选择\\\"\\n        value={formatDates(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        minDate={new Date(2010, 0, 1).getTime()}\\n        maxDate={new Date(2010, 1, 28).getTime()}\\n        show={show}\\n        type=\\\"range\\\"\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.map((date) => date?.valueOf()))\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义按钮文字\\n\\n通过`confirmText`设置按钮文字，通过`confirmDisabledText`设置按钮禁用时的文字。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDates = react.useCallback((d) => {\\n    if (d && d.length) {\\n      let text = []\\n      d.forEach((item) => {\\n        const res = new Date(item)\\n        text.push(`${res.getMonth() + 1}-${res.getDate()}`)\\n      })\\n\\n      return text.join(` 至 `)\\n    }\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"自定按钮文字\\\"\\n        value={formatDates(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        confirmText=\\\"点击确认\\\"\\n        minDate={new Date(2010, 0, 1).getTime()}\\n        maxDate={new Date(2010, 1, 28).getTime()}\\n        show={show}\\n        type=\\\"range\\\"\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.map((date) => date?.valueOf()))\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义日期文案\\n\\n通过传入`formatter`函数来对日历上每一格的内容进行格式化\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"自定义日期文案\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n        formatter={(day) => {\\n          const month = day.date.getMonth() + 1\\n          const date = day.date.getDate()\\n\\n          if (month === 5) {\\n            if (date === 1) {\\n              day.topInfo = <View style={{ color: 'green' }}>劳动节</View>\\n            } else if (date === 4) {\\n              day.topInfo = '54青年节'\\n            } else if (date === 11) {\\n              day.text = '今天'\\n            }\\n          }\\n\\n          return day\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义弹出位置\\n\\n通过`position`属性自定义弹出层的弹出位置，可选值为`top`、`left`、`right`。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"自定义弹出位置\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        round=\\\"false\\\"\\n        position=\\\"right\\\"\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 日期区间最大范围\\n\\n选择日期区间时，可以通过`maxRange`属性来指定最多可选天数，选择的范围超过最多可选天数时，会弹出相应的提示文案。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDates = react.useCallback((d) => {\\n    if (d && d.length) {\\n      let text = []\\n      d.forEach((item) => {\\n        const res = new Date(item)\\n        text.push(`${res.getMonth()}-${res.getDate()}`)\\n      })\\n\\n      return text.join(` 至 `)\\n    }\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"日期区间最大范围\\\"\\n        value={formatDates(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        maxRange={3}\\n        type=\\\"range\\\"\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.map((date) => date?.valueOf()))\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义周起始日\\n\\n通过 `firstDayOfWeek` 属性设置一周从哪天开始。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [date, setDate] = react.useState()\\n\\n  const formatDate = react.useCallback((d) => {\\n    const res = new Date(d)\\n    return d\\n      ? `${res.getFullYear()}-${res.getMonth() + 1}-${res.getDate()}`\\n      : ''\\n  }, [])\\n\\n  return (\\n    <View>\\n      <Cell\\n        title=\\\"自定义周起始日\\\"\\n        value={formatDate(date)}\\n        onClick={() => setShow(true)}\\n      />\\n      <Calendar\\n        firstDayOfWeek={1}\\n        show={show}\\n        onClose={() => setShow(false)}\\n        onConfirm={(e) => {\\n          setDate(e.detail.value.valueOf())\\n          setShow(false)\\n        }}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 平铺展示\\n\\n将`poppable`设置为`false`，日历会直接展示在页面内，而不是以弹层的形式出现。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Calendar\\n      title=\\\"日历\\\"\\n      poppable={false}\\n      showConfirm={false}\\n      minDate={new Date(2012, 0, 10).getTime()}\\n      maxDate={new Date(2012, 2, 20).getTime()}\\n    />\\n  )\\n}\\n```\\n\\n```css\\n.calendar {\\n  --calendarHeight: 500px;\\n}\\n```\\n\\n### CalendarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/calendar.d.ts)\\n\\n| 参数                | 说明                                               | 类型                                                                                                                                               | 默认值                 | 必填    |\\n| ------------------- | -------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | ------- |\\n| title               | 日历标题                                           | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                       | -                      | `false` |\\n| color               | 主题色，对底部按钮和选中日期生效                   | _&nbsp;&nbsp;string<br/>_                                                                                                                          | #ee0a24                | `false` |\\n| show                | 是否显示日历弹窗                                   | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | false                  | `false` |\\n| formatter           | 日期格式化函数                                     | _&nbsp;&nbsp;(day:&nbsp;Day)&nbsp;=>&nbsp;Day<br/>_                                                                                                | -                      | `false` |\\n| confirmText         | 确认按钮的文字                                     | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                       | -                      | `false` |\\n| rangePrompt         | 范围选择超过最多可选天数时的提示文案               | _&nbsp;&nbsp;string<br/>_                                                                                                                          | 选择天数不能超过 xx 天 | `false` |\\n| showRangePrompt     | 范围选择超过最多可选天数时，是否展示提示文案       | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                       | true                   | `false` |\\n| defaultDate         | 默认选中的日期，type 为 multiple 或 range 时为数组 | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;string[]<br/>_                                                                                              | 今天                   | `false` |\\n| allowSameDay        | 是否允许日期范围的起止时间为同一天                 | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | false                  | `false` |\\n| confirmDisabledText | 确认按钮处于禁用状态时的文字                       | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                       | 确定                   | `false` |\\n| type                | 类型                                               | _&nbsp;&nbsp;\\\"single\\\"&nbsp;&brvbar;&nbsp;\\\"multiple\\\"&nbsp;&brvbar;&nbsp;\\\"range\\\"<br/>_                                                               | -                      | `false` |\\n| minDate             | 可选择的最小日期                                   | _&nbsp;&nbsp;number<br/>_                                                                                                                          | 当前日期               | `false` |\\n| maxDate             | 可选择的最大日期                                   | _&nbsp;&nbsp;number<br/>_                                                                                                                          | 当前日期六个月后       | `false` |\\n| position            | 弹窗弹出的位置                                     | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"&nbsp;&brvbar;&nbsp;\\\"bottom\\\"&nbsp;&brvbar;&nbsp;\\\"top\\\"<br/>_                                          | bottom                 | `false` |\\n| rowHeight           | 日期行高                                           | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                | 64                     | `false` |\\n| round               | 弹窗是否圆角                                       | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| poppable            | 是否以弹层的形式展示日历                           | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| showMark            | 是否显示月份背景水印                               | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| showTitle           | 是否展示日历标题                                   | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| showConfirm         | 是否展示确认按钮                                   | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| showSubtitle        | 是否展示日历副标题（年月）                         | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| safeAreaInsetBottom | 是否开启底部安全区适配                             | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| closeOnClickOverlay | 是否在点击遮罩层后关闭                             | _&nbsp;&nbsp;boolean<br/>_                                                                                                                         | true                   | `false` |\\n| maxRange            | 日期区间最多可选天数，默认无限制                   | _&nbsp;&nbsp;number<br/>_                                                                                                                          | -                      | `false` |\\n| firstDayOfWeek      | 设置周起始日                                       | _&nbsp;&nbsp;0&nbsp;&brvbar;&nbsp;1&nbsp;&brvbar;&nbsp;2&nbsp;&brvbar;&nbsp;3&nbsp;&brvbar;&nbsp;4&nbsp;&brvbar;&nbsp;5&nbsp;&brvbar;&nbsp;6<br/>_ | 0                      | `false` |\\n| onOpen              | -                                                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                            | -                      | `false` |\\n| onClose             | -                                                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                            | -                      | `false` |\\n| onOpened            | -                                                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                            | -                      | `false` |\\n| onClosed            | -                                                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                            | -                      | `false` |\\n| onConfirm           | -                                                  | _&nbsp;&nbsp;(e:&nbsp;CalendarEvents)&nbsp;=>&nbsp;void<br/>_                                                                                      | -                      | `false` |\\n| overRange           | -                                                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                            | -                      | `false` |\\n| onUnselect          | -                                                  | _&nbsp;&nbsp;(e:&nbsp;CalendarEventsSingle)&nbsp;=>&nbsp;void<br/>_                                                                                | -                      | `false` |\\n| onSelect            | -                                                  | _&nbsp;&nbsp;(e:&nbsp;CalendarEvents)&nbsp;=>&nbsp;void<br/>_                                                                                      | -                      | `false` |\\n| onClickSubtitle     | -                                                  | _&nbsp;&nbsp;(a?:&nbsp;any)&nbsp;=>&nbsp;void<br/>_                                                                                                | -                      | `false` |\\n| renderTitle         | 自定义标题                                         | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                                 | -                      | `false` |\\n| renderFooter        | 自定义底部区域内容                                 | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                                 | -                      | `false` |\\n\\n### formatter 回调参数 Day [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/calendar.d.ts)\\n\\n| 参数       | 说明 | 类型                                                                                                                                                                                                                                                                                    |\\n| ---------- | ---- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| date       | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"selected\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"start\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"middle\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"end\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"disabled\\\"<br/>_ |\\n| type       | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                               |\\n| text       | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                                                                     |\\n| bottomInfo | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                               |\\n| className  | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                               |\\n| topInfo    | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                               |\\n\\n### ICalendarInstance [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/calendar.d.ts)\\n\\n使用 ref 获取到的组件实例\\n| 方法 | 说明 | 类型 |\\n| --- | --- | --- |\\n| reset | - | _&nbsp;&nbsp;(date?:&nbsp;Date&nbsp;&brvbar;&nbsp;Date[])&nbsp;=>&nbsp;void<br/>&nbsp;&nbsp;//<br/>_ |\\n| scrollToDate | - | _&nbsp;&nbsp;(date:&nbsp;Date)&nbsp;=>&nbsp;void<br/>_ |\\n\\n### CalendarEvents [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/calendar.d.ts)\\n\\nonConfirm 和 onSelect 的回调函数参数\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| detail | - | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;Date&nbsp;&brvbar;&nbsp;Date[]<br/>&nbsp;&nbsp;}<br/>_ |\\n\\n### CalendarEvents [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/calendar.d.ts)\\n\\nonUnselect 的回调函数参数\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| detail | - | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;Date<br/>&nbsp;&nbsp;}<br/>_ |\\n\";","export default \"# Checkbox 复选框\\n\\n### 介绍\\n\\n在一组备选项中进行多选。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Checkbox, CheckboxGroup } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`value`绑定复选框的勾选状态。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(true)\\n  return (\\n    <Checkbox value={value} onChange={(e) => setValue(e.detail)}>\\n      复选框\\n    </Checkbox>\\n  )\\n}\\n```\\n\\n### 禁用状态\\n\\n- 通过设置`disabled`属性可以禁用复选框。\\n- 通过设置`labelDisabled`属性可以禁用复选框文本点击。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(true)\\n  return (\\n    <View style={{ display: 'flex' }}>\\n      <Checkbox desabled style={{ marginRight: '20px' }}>\\n        禁用1\\n      </Checkbox>\\n      <Checkbox\\n        labelDisabled\\n        value={value}\\n        onChange={(e) => setValue(e.detail)}\\n      >\\n        禁用2\\n      </Checkbox>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义形状、颜色、大小\\n\\n- 将`shape`属性设置为`square`，复选框的形状会变成方形。\\n- 通过`checkedColor`属性可以自定义选中状态下的图标颜色。\\n- 通过`iconSize`属性可以自定义图标的大小。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(true)\\n  const props = {\\n    value: value,\\n    onChange: (e) => setValue(e.detail),\\n  }\\n\\n  return (\\n    <View>\\n      <Cell span={6}>\\n        <Checkbox {...props} shape=\\\"square\\\">\\n          形状\\n        </Checkbox>\\n      </Cell>\\n      <Cell span={6}>\\n        <Checkbox {...props} checkedColor=\\\"#07c160\\\">\\n          颜色\\n        </Checkbox>\\n      </Cell>\\n      <Cell span={6}>\\n        <Checkbox {...props} iconSize=\\\"25px\\\">\\n          颜色\\n        </Checkbox>\\n      </Cell>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义图标\\n\\n通过 icon 插槽自定义图标。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(true)\\n\\n  return (\\n    <Checkbox\\n      value={value}\\n      onChange={(e) => setValue(e.detail)}\\n      renderIcon={\\n        <Image\\n          style={{ width: '30px', height: '30px' }}\\n          src={\\n            value\\n              ? 'https://img.yzcdn.cn/vant/user-active.png'\\n              : 'https://img.yzcdn.cn/vant/user-inactive.png'\\n          }\\n        />\\n      }\\n    >\\n      自定义图标\\n    </Checkbox>\\n  )\\n}\\n```\\n\\n### 复选框组\\n\\n需要与`vanCheckboxGroup`一起使用，选中值是一个数组，通过`value`绑定在`vanCheckboxGroup`上，数组中的项即为选中的`Checkbox`的`name`属性设置的值。\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['a', 'b'])\\n  return (\\n    <CheckboxGroup\\n      value={values}\\n      onChange={(e) => {\\n        console.info(e)\\n        setValues([...e.detail])\\n      }}\\n    >\\n      <Checkbox name=\\\"a\\\">复选框 a</Checkbox>\\n      <Checkbox name=\\\"b\\\">复选框 b</Checkbox>\\n      <Checkbox name=\\\"c\\\">复选框 c</Checkbox>\\n    </CheckboxGroup>\\n  )\\n}\\n```\\n\\n### 水平排列、限制最大可选数\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['a'])\\n  return (\\n    <CheckboxGroup\\n      direction=\\\"horizontal\\\"\\n      value={values}\\n      max={2}\\n      onChange={(e) => {\\n        setValues([...e.detail])\\n      }}\\n    >\\n      <Checkbox name=\\\"a\\\">复选框 a</Checkbox>\\n      <Checkbox name=\\\"b\\\">复选框 b</Checkbox>\\n      <Checkbox name=\\\"c\\\">复选框 c</Checkbox>\\n    </CheckboxGroup>\\n  )\\n}\\n```\\n\\n### 搭配单元格组件使用\\n\\n此时你需要再引入`Cell`和`CellGroup`组件，并通过 checkbox 的 toggle 方法手动触发切换。\\n\\n```jsx\\nconst list = ['aa', 'bb', 'cc']\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['bb'])\\n\\n  const cellClick = (item) => {\\n    if (values.includes(item)) {\\n      values.splice(values.indexOf(item), 1)\\n    } else values.push(item)\\n    setValues([...values])\\n  }\\n\\n  return (\\n    <CheckboxGroup value={values}>\\n      <CellGroup>\\n        {list.map((item, index) => {\\n          return (\\n            <Cell\\n              key={item}\\n              title={'复选框 ' + item}\\n              valueClass=\\\"value-class\\\"\\n              clickable\\n              onClick={() => cellClick(item)}\\n            >\\n              <Checkbox style={{ justifyContent: 'flex-end' }} name={item} />\\n            </Cell>\\n          )\\n        })}\\n      </CellGroup>\\n    </CheckboxGroup>\\n  )\\n}\\n```\\n\\n```css\\n.valueClass {\\n  flex: none !important;\\n}\\n```\\n\\n### CheckboxProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/checkbox.d.ts)\\n\\n| 参数          | 说明 | 类型                                                          | 默认值 | 必填    |\\n| ------------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| name          | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| value         | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| checkedColor  | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| labelPosition | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| labelDisabled | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| shape         | -    | _&nbsp;&nbsp;\\\"round\\\"&nbsp;&brvbar;&nbsp;\\\"square\\\"<br/>_        | -      | `false` |\\n| iconSize      | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_           | -      | `false` |\\n| children      | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| renderIcon    | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\\n### CheckboxGroupProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/checkbox.d.ts)\\n\\n| 参数      | 说明 | 类型                                                          | 默认值 | 必填    |\\n| --------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| max       | -    | _&nbsp;&nbsp;number<br/>_                                     | -      | `false` |\\n| value     | -    | _&nbsp;&nbsp;Array<any><br/>_                                 | -      | `false` |\\n| disabled  | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| direction | -    | _&nbsp;&nbsp;\\\"horizontal\\\"&nbsp;&brvbar;&nbsp;\\\"vertical\\\"<br/>_ | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;Array<ReactNode><br/>_                           | -      | `false` |\\n| onChange  | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# DatetimePicker 时间选择\\n\\n### 介绍\\n\\n用于选择时间，支持日期、时分等时间维度，通常与 [弹出层](#/popup) 组件配合使用。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { DatetimePicker } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 选择完整时间\\n\\n`value` 为时间戳。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    minDate: new Date(2018, 0, 1).getTime(),\\n    currentDate: null,\\n  })\\n\\n  const onInput = react.useCallback(\\n    function (event) {\\n      setState({\\n        ...state,\\n        currentDate: event.detail,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  return (\\n    <DatetimePicker\\n      type=\\\"datetime\\\"\\n      value={state.currentDate}\\n      minDate={state.minDate}\\n      maxDate={state.maxDate}\\n      onInput={onInput}\\n    />\\n  )\\n}\\n```\\n\\n### 选择日期（年月日）\\n\\n`value` 为时间戳，通过传入 `formatter` 函数对选项文字进行处理。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    minDate: new Date(2018, 0, 1).getTime(),\\n    currentDate: null,\\n  })\\n\\n  const onInput = react.useCallback(\\n    function (event) {\\n      setState({\\n        ...state,\\n        currentDate: event.detail,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  const formatter = react.useCallback(function (type, value) {\\n    if (type === 'year') {\\n      return `${value}年`\\n    }\\n\\n    if (type === 'month') {\\n      return `${value}月`\\n    }\\n\\n    return value\\n  })\\n\\n  return (\\n    <DatetimePicker\\n      type=\\\"date\\\"\\n      value={state.currentDate}\\n      minDate={state.minDate}\\n      maxDate={state.maxDate}\\n      onInput={onInput}\\n      formatter={formatter}\\n    />\\n  )\\n}\\n```\\n\\n### 选择日期（年月）\\n\\n`value` 为时间戳。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    currentDate: new Date(2018, 0, 1),\\n    minDate: new Date(2018, 0, 1).getTime(),\\n  })\\n\\n  const onInput = react.useCallback(\\n    function (event) {\\n      setState({\\n        currentDate: event.detail,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  return (\\n    <DatetimePicker\\n      type=\\\"year-month\\\"\\n      value={state.currentDate}\\n      minDate={state.minDate}\\n      onInput={onInput}\\n    />\\n  )\\n}\\n```\\n\\n### 选择时间\\n\\n`value` 为字符串。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    currentDate: '12:00',\\n    minHour: 10,\\n    maxHour: 20,\\n  })\\n\\n  const onInput = react.useCallback(\\n    function (event) {\\n      setState({\\n        currentDate: event.detail,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  return (\\n    <DatetimePicker\\n      type=\\\"time\\\"\\n      value={state.currentDate}\\n      minHour={state.minHour}\\n      maxHour={state.maxHour}\\n      onInput={onInput}\\n    />\\n  )\\n}\\n```\\n\\n### 选项过滤器\\n\\n通过传入 `filter` 函数，可以对选项数组进行过滤，实现自定义时间间隔。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    currentDate: '12:00',\\n    minHour: 10,\\n    maxHour: 20,\\n  })\\n\\n  const onInput = react.useCallback(\\n    function (event) {\\n      setState({\\n        currentDate: event.detail,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  return (\\n    <DatetimePicker\\n      type=\\\"time\\\"\\n      value={state.currentDate}\\n      minHour={state.minHour}\\n      maxHour={state.maxHour}\\n      onInput={onInput}\\n      filter={(type, options) => {\\n        if (type === 'minute') {\\n          return options.filter((option) => option % 5 === 0)\\n        }\\n\\n        return options\\n      }}\\n    />\\n  )\\n}\\n```\\n\\n### DatetimePickerProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/datetime-picker.d.ts)\\n\\n| 参数        | 说明                                   | 类型                                                                                                                                                                                                                                   | 默认值   | 必填    |\\n| ----------- | -------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------- |\\n| value       | 选项的值                               | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                    | null     | `false` |\\n| filter      | 对选项数组进行过滤，实现自定义时间间隔 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string,<br/>&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;(string&nbsp;&brvbar;&nbsp;number)[]<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;(number&nbsp;&brvbar;&nbsp;string)[]<br/>_                  | -        | `false` |\\n| type        | 时间类型，不建议动态修改               | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"datetime\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"date\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"year-month\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"time\\\"<br/>_ | datetime | `false` |\\n| showToolbar | 是否显示顶部栏                         | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                             | true     | `false` |\\n| formatter   | 选项格式化函数                         | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string,<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                           | -        | `false` |\\n| minDate     | 可选的最小时间，精确到分钟             | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 十年前   | `false` |\\n| maxDate     | 可选的最大时间，精确到分钟             | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 十年后   | `false` |\\n| minHour     | 可选的最小小时，针对 type=time         | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 0        | `false` |\\n| maxHour     | 可选的最大小时，针对 type=time         | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 23       | `false` |\\n| minMinute   | 可选的最小分钟，针对 type=time         | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 0        | `false` |\\n| maxMinute   | 可选的最大分钟，针对 type=time         | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                    | 59       | `false` |\\n| onInput     | 当值变化时触发的事件                   | _&nbsp;&nbsp;(e:&nbsp;DatetimePickerEventsByValue)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                             | -        | `false` |\\n| onChange    | 当值变化时触发的事件                   | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;e:&nbsp;DatetimePickerEventsByInstance<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_                                                                                                            | -        | `false` |\\n| onConfirm   | 点击完成按钮时触发的事件               | _&nbsp;&nbsp;(e:&nbsp;DatetimePickerEventsByValue)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                             | -        | `false` |\\n| onCancel    | 点击取消按钮时触发的事件               | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                | -        | `false` |\\n\\n### onInput、onConfirm 的回掉参数 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/datetime-picker.d.ts)\\n\\n继承了@taro/components 的 ITouchEvent\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| detail | 选项的值 | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;value?:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;}<br/>_ |\\n\\n### onChange 的回掉参数 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/datetime-picker.d.ts)\\n\\n| 方法   | 说明                                                                                               | 类型|\\n| ------ | -------------------------------------------------------------------------------------------------- ||\\n| detail | 包含每项的值 columns、当前时间 innerValue、手动设置列数据 setColumns、更新某列值 updateColumnValue | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;datetimePicker:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns:&nbsp;(string&nbsp;&brvbar;&nbsp;number)[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setColumns:&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns:&nbsp;(string&nbsp;&brvbar;&nbsp;number)[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerValue:&nbsp;Date<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateColumnValue:&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;=>&nbsp;Promise<string><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;}<br/>_ |\\n\\n### 组件实例 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/datetime-picker.d.ts)\\n\\n| 方法              | 说明 | 类型                                                                                      |\\n| ----------------- | ---- | ----------------------------------------------------------------------------------------- |\\n| columns           | -    | _&nbsp;&nbsp;(string&nbsp;&brvbar;&nbsp;number)[]<br/>_                                   |\\n| setColumns        | -    | _&nbsp;&nbsp;(columns:&nbsp;(string&nbsp;&brvbar;&nbsp;number)[])&nbsp;=>&nbsp;void<br/>_ |\\n| innerValue        | -    | _&nbsp;&nbsp;Date<br/>_                                                                   |\\n| updateColumnValue | -    | _&nbsp;&nbsp;(value:&nbsp;string)&nbsp;=>&nbsp;Promise<string><br/>_                      |\\n| pickerInstance    | -    | _&nbsp;&nbsp;IPickerInstance<br/>_                                                        |\\n\";","export default \"# Field 输入框\\n\\n### 介绍\\n\\n用户可以在文本框内输入或编辑文字。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Field } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState()\\n\\n  return (\\n    <CellGroup>\\n      <Field\\n        value={value}\\n        placeholder=\\\"请输入用户名\\\"\\n        border={false}\\n        onChange={(e) => setValue(e.detail)}\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 自定义类型\\n\\n根据`type`属性定义不同类型的输入框。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <CellGroup>\\n      <Toast id=\\\"Field-demo2\\\" />\\n      <Field\\n        required\\n        clearable\\n        label=\\\"用户名\\\"\\n        icon=\\\"questionO\\\"\\n        placeholder=\\\"请输入用户名\\\"\\n      />\\n      <Field\\n        type=\\\"password\\\"\\n        label=\\\"密码\\\"\\n        placeholder=\\\"请输入密码\\\"\\n        required\\n        border\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 禁用输入框\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <CellGroup>\\n      <Field\\n        value=\\\"输入框已禁用\\\"\\n        label=\\\"用户名\\\"\\n        leftIcon=\\\"contact\\\"\\n        disabled\\n        border={false}\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 错误提示\\n\\n通过`error`或者`errorMessage`属性增加对应的错误提示。\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    username: '',\\n    phone: '',\\n  })\\n  return (\\n    <CellGroup>\\n      <Field\\n        value={state.username}\\n        label=\\\"用户名\\\"\\n        placeholder=\\\"请输入用户名\\\"\\n        error\\n      />\\n      <Field\\n        value={state.phone}\\n        label=\\\"手机号\\\"\\n        placeholder=\\\"请输入手机号\\\"\\n        errorMessage=\\\"手机号格式错误\\\"\\n        border={false}\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 内容对齐方式\\n\\n可以通过`inputAlign`属性设置内容的对齐方式。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <CellGroup>\\n      <Field label=\\\"用户名\\\" placeholder=\\\"请输入用户名\\\" inputAlign=\\\"right\\\" />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 高度自适应\\n\\n对于 textarea，可以通过`autosize`属性设置高度自适应。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <CellGroup>\\n      <Field\\n        label=\\\"留言\\\"\\n        type=\\\"textarea\\\"\\n        placeholder=\\\"请输入留言\\\"\\n        autosize={{ minHeight: '30px' }}\\n        border={false}\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n### 插入按钮\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <CellGroup>\\n      <Field\\n        center\\n        clearable\\n        label=\\\"短信验证码\\\"\\n        placeholder=\\\"请输入短信验证码\\\"\\n        border\\n        renderButton={\\n          <Button size=\\\"small\\\" type=\\\"primary\\\">\\n            发送验证码\\n          </Button>\\n        }\\n      />\\n    </CellGroup>\\n  )\\n}\\n```\\n\\n## 常见问题\\n\\n### 真机上为什么会出现聚焦时 placeholder 加粗、闪烁的现象？\\n\\n由于微信小程序的 input 组件和 textarea 组件是原生组件，聚焦时会将原生的输入框覆盖在对应位置上，导致了这个现象的产生。\\n\\n相关的讨论可以查看[微信开放社区](https://developers.weixin.qq.com/community/search?query=placeholder%20%E9%97%AA%E7%83%81%20%E5%8A%A0%E7%B2%97)。\\n\\n### 真机上 placeholder 为什么会盖过 popup 等其它组件？\\n\\n由于微信小程序的 input 组件和 textarea 组件是原生组件，遵循原生组件的限制，详情可以查看[原生组件说明](https://developers.weixin.qq.com/miniprogram/dev/component/nativeComponent.html)。\\n\\n### textarea 的 placeholder 在真机上为什么会偏移？\\n\\n微信小程序的 textarea 组件在 Android 和 iOS 中默认样式不同，在 iOS 中会有默认的 `padding`，且无法置 0。\\n\\n同时 `placeholderStyle` 对 `verticalAlign`、`lineHeight` 等大量 css 属性都不生效。\\n\\n这一系列的问题导致了 placeholder 在真机上可能会出现偏移。\\n\\n微信已经在 `2.10.0` 基础库版本后支持移除默认的 `padding`，但低版本仍有问题。详情可以查看 [微信开放社区](https://developers.weixin.qq.com/community/develop/issue/96)。\\n\\n### 手写输入法为什么会丢失部分字符 / 手写输入法为什么不会触发 input 事件？\\n\\n这是微信小程序的 input 组件本身的问题，如果需要兼容手写输入法的场景，可以在 `blur` 事件中取到输入的值。\\n\\n相关的讨论可以查看[微信开放社区](https://developers.weixin.qq.com/community/search?query=input%20%E6%89%8B%E5%86%99%E8%BE%93%E5%85%A5&page=1&block=1&random=1567079239098)。\\n\\n### FieldProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/field.d.ts)\\n\\n| 参数                   | 说明               | 类型                                                                                                                                                                                                                                                                                                                                        | 默认值 | 必填    |\\n| ---------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| value                  | -                  | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                         | -      | `false` |\\n| placeholder            | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| placeholderStyle       | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| placeholderClass       | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| disabled               | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| maxlength              | -                  | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| cursorSpacing          | -                  | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| autoFocus              | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| focus                  | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| cursor                 | -                  | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| selectionStart         | -                  | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| selectionEnd           | -                  | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| adjustPosition         | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| holdKeyboard           | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| type                   | -                  | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"number\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"text\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"idcard\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"digit\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"textarea\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"password\\\"<br/>_ | -      | `false` |\\n| password               | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| confirmType            | -                  | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"send\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"search\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"next\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"go\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"done\\\"<br/>_                                                               | -      | `false` |\\n| confirmHold            | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| autoHeight             | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| fixed                  | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| showConfirmBar         | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| disableDefaultPadding  | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| size                   | -                  | _&nbsp;&nbsp;\\\"large\\\"<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| icon                   | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| label                  | 输入框左侧占位元素 | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| error                  | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| center                 | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| isLink                 | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| leftIcon               | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| rightIcon              | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| autosize               | -                  | _&nbsp;&nbsp;boolean&nbsp;&brvbar;&nbsp;Normal.IAnyObject<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| required               | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| iconClass              | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| clickable              | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| inputAlign             | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| style                  | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| errorMessage           | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| arrowDirection         | -                  | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"up\\\"&nbsp;&brvbar;&nbsp;\\\"down\\\"<br/>_                                                                                                                                                                                                                                                                 | -      | `false` |\\n| showWordLimit          | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| errorMessageAlign      | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| alwaysEmbed            | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| readonly               | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| clearable              | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| clearTrigger           | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| border                 | -                  | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| titleWidth             | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| clearIcon              | -                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                   | -      | `false` |\\n| renderLeftIcon         | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderTitle            | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderInput            | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderRightIcon        | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderIcon             | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| renderButton           | -                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                | -      | `false` |\\n| onInput                | -                  | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| onChange               | -                  | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| onConfirm              | -                  | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| onClickIcon            | -                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                                     | -      | `false` |\\n| onFocus                | -                  | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| onBlur                 | -                  | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| onClear                | -                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                                     | -      | `false` |\\n| onClickInput           | -                  | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                                     | -      | `false` |\\n| onLineChange           | -                  | _&nbsp;&nbsp;CommonEventFunction<TextareaProps.onLineChangeEventDetail><br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| onKeyboardHeightChange | -                  | _&nbsp;&nbsp;CommonEventFunction<TextareaProps.onKeyboardHeightChangeEventDetail><br/>_                                                                                                                                                                                                                                                     | -      | `false` |\\n\";","export default \"# Form 表单\\n\\n### 介绍\\n\\n用于为数据入录、校验，支持输入框、开关、文件上传等组件类型，支持自定义组件\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Form, FormItem } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n可以通过 buton 点击事件`onClick`中在 form 实例 submit 获取数据并处理，或者通过 button 的`formType`触发 onFinish\\nFormItem 需要代理下级表单组件的值和触发事件\\n\\n- 代理的表单组件触发事件为`onChange`, 通过`FormItem.trigger`重新设置\\n- 代理的表单组件默认取值为`value`, 通过`FormItem.valueKey`重新设置\\n- 代理的表单组件触发事件回调事件的默认取值`event.detail`, 通过`FormItem.valueFormat`重新设置\\n\\n```jsx\\nfunction Demo() {\\n  const formIt = react.useRef(null)\\n  const [state, setState] = react.useState({\\n    dateTime: '',\\n  })\\n  // 注册不能回调函数设置必填的提示文案\\n  react.useLayoutEffect(() => {\\n    formIt.current.registerRequiredMessageCallback((label) => {\\n      return `${label}真的不能为空啊`\\n    })\\n  }, [])\\n\\n  react.useEffect(() => {\\n    // 异步更新initialValues\\n    setTimeout(() => {\\n      setState({\\n        dateTime: '2021-12-02 12:12',\\n      })\\n    }, 2000)\\n  }, [])\\n\\n  const handleClick = () => {\\n    formIt.current.validateFields((errorMessage, fieldValues) => {\\n      if (errorMessage && errorMessage.length) {\\n        Dialog.alert({\\n          message: `errorMessage: ${JSON.stringify(errorMessage)}`,\\n          selector: 'form-demo1',\\n        })\\n        return console.info('errorMessage', errorMessage)\\n      }\\n\\n      Dialog.alert({\\n        message: `result: ${JSON.stringify(fieldValues)}`,\\n      })\\n    })\\n  }\\n\\n  return (\\n    <>\\n      <Form\\n        initialValues={{\\n          name: '我是初始值',\\n          dateTime: state.dateTime,\\n          singleSelect: '1',\\n          rate: 2,\\n          slider: '50',\\n        }}\\n        ref={formIt}\\n        onFinish={(errs, res) => console.info(errs, res)}\\n      >\\n        <FormItem\\n          label=\\\"用户名\\\"\\n          name=\\\"userName\\\"\\n          required\\n          rules={{\\n            rule: /[\\\\u4e00-\\\\u9fa5]/,\\n            message: '用户名仅支持中文',\\n          }}\\n          trigger=\\\"onInput\\\"\\n          validateTrigger=\\\"onBlur\\\"\\n          // taro的input的onInput事件返回对应表单的最终值为e.detail.value\\n          valueFormat={(e) => e.detail.value}\\n          renderRight={<Icon name=\\\"user-o\\\" />}\\n        >\\n          <Input placeholder=\\\"请输入用户名（中文）\\\" />\\n        </FormItem>\\n\\n        <FormItem\\n          label=\\\"密码\\\"\\n          name=\\\"password\\\"\\n          required\\n          valueFormat={(e) => e.detail.value}\\n          renderRight={<Icon name=\\\"eye-o\\\" />}\\n        >\\n          <Input placeholder=\\\"请输入密码\\\" type=\\\"password\\\" />\\n        </FormItem>\\n\\n        <FormItem label=\\\"是否打开\\\" name=\\\"opened\\\" valueKey=\\\"checked\\\">\\n          <Switch activeColor=\\\"#07c160\\\" inactiveColor=\\\"#07c160\\\" />\\n        </FormItem>\\n\\n        <FormItem label=\\\"单选框\\\" name=\\\"singleSelect\\\">\\n          <RadioGroup direction=\\\"horizontal\\\">\\n            <Radio name=\\\"1\\\" checkedColor=\\\"#07c160\\\">\\n              单选框 1\\n            </Radio>\\n            <Radio name=\\\"2\\\" checkedColor=\\\"#07c160\\\">\\n              单选框 2\\n            </Radio>\\n          </RadioGroup>\\n        </FormItem>\\n\\n        <FormItem label=\\\"复选框\\\" name=\\\"muiltSelect\\\">\\n          <CheckboxGroup direction=\\\"horizontal\\\">\\n            <Checkbox name=\\\"1\\\" shape=\\\"square\\\" checkedColor=\\\"#07c160\\\">\\n              复选框 1\\n            </Checkbox>\\n            <Checkbox name=\\\"2\\\" shape=\\\"square\\\" checkedColor=\\\"#07c160\\\">\\n              复选框 2\\n            </Checkbox>\\n          </CheckboxGroup>\\n        </FormItem>\\n\\n        <FormItem label=\\\"滑块选择\\\" name=\\\"slider\\\">\\n          <Slider\\n            activeColor=\\\"#07c160\\\"\\n            style={{ width: '200px', marginTop: '10px' }}\\n          />\\n        </FormItem>\\n\\n        <FormItem label=\\\"评分\\\" name=\\\"rate\\\">\\n          <Rate activeColor=\\\"#07c160\\\" />\\n        </FormItem>\\n\\n        <FormItem label=\\\"步进器\\\" name=\\\"stepper\\\">\\n          <Stepper />\\n        </FormItem>\\n        <Button\\n          type=\\\"primary\\\"\\n          className=\\\"van-button-submit\\\"\\n          // onClick={handleClick}\\n          formType=\\\"submit\\\"\\n        >\\n          提交\\n        </Button>\\n      </Form>\\n      <Dialog id=\\\"form-demo1\\\" />\\n    </>\\n  )\\n}\\n```\\n\\n### 支持多层级数据结构\\n\\nFormItem 的 name 属性支持数组的形式, 数组项为字符串的时候挂载到对象上，为数字的时候挂载到数组上\\n第一层固定为对象\\n\\n```jsx\\nfunction Demo() {\\n  const formIt = react.useRef(null)\\n\\n  const multFormItems = function () {\\n    let jsx = []\\n    for (let i = 0; i < 2; i++) {\\n      jsx.push(\\n        <>\\n          <FormItem\\n            label={`名称(${i + 1})`}\\n            name={['useInfo', i, 'name']}\\n            trigger=\\\"onInput\\\"\\n            valueFormat={(e) => e.detail.value}\\n          >\\n            <Input placeholder=\\\"请输入用户名\\\" />\\n          </FormItem>\\n          <FormItem\\n            label={`年龄(${i + 1})`}\\n            name={['useInfo', i, 'age']}\\n            trigger=\\\"onInput\\\"\\n            valueFormat={(e) => e.detail.value}\\n          >\\n            <Input placeholder=\\\"请输入年龄\\\" />\\n          </FormItem>\\n        </>,\\n      )\\n    }\\n    return jsx\\n  }\\n\\n  return (\\n    <Form ref={formIt}>\\n      {multFormItems()}\\n      <Button\\n        className=\\\"van-button-submit\\\"\\n        formType=\\\"submit\\\"\\n        onClick={() =>\\n          Dialog.alert({\\n            message: `result: ${JSON.stringify(\\n              formIt.current.getFieldsValue(),\\n            )}`,\\n            selector: 'form-demo3',\\n          })\\n        }\\n      >\\n        提交\\n      </Button>\\n      <Dialog id=\\\"form-demo3\\\" />\\n    </Form>\\n  )\\n}\\n```\\n\\n### 异步处理和自定义校验\\n\\n- Uploader 的 onAfterRead 事件只返回变更的文件，展示的是多个文件的话需要重新设置\\n- 异步操作的时候返回 Promise\\n\\n```jsx\\nfunction Demo() {\\n  const formIt = react.useRef(null)\\n\\n  const valueFormatUpload = (event, formName, instance) => {\\n    Toast.loading('上传中...')\\n    const { file } = event.detail\\n    let fileList = instance.getFieldValue(formName) || []\\n    fileList = fileList.concat(file)\\n    // 异步更新\\n    return new Promise((resolve) => {\\n      setTimeout(() => {\\n        Toast.clear()\\n        resolve(fileList)\\n      }, 3000)\\n    })\\n  }\\n\\n  const deleteFile = (event) => {\\n    const { index, fileList } = event.detail\\n    fileList.splice(index, 1)\\n\\n    formIt.current.setFieldsValue('file', fileList)\\n  }\\n  return (\\n    <>\\n      <Toast id=\\\"form-demo2-loading\\\" />\\n      <Form ref={formIt}>\\n        <FormItem\\n          name=\\\"file\\\"\\n          required\\n          layout=\\\"vertical\\\"\\n          label=\\\"上传图片(图片大小不得大于 0.1M)\\\"\\n          valueKey=\\\"fileList\\\"\\n          valueFormat={valueFormatUpload}\\n          trigger=\\\"onAfterRead\\\"\\n          validateTrigger=\\\"onAfterRead\\\"\\n          rules={{\\n            rule: (values, call) => {\\n              values.forEach((item, index) => {\\n                if (item.size > 0.1 * 1024 * 1024) {\\n                  return call(`图片(${index + 1})大小不得大于 0.1M`)\\n                }\\n                call(null)\\n              })\\n            },\\n          }}\\n        >\\n          <Uploader name=\\\"file1\\\" onDelete={deleteFile}></Uploader>\\n        </FormItem>\\n      </Form>\\n    </>\\n  )\\n}\\n```\\n\\n### 自定义组件\\n\\n封装 DatetimePickerBox 组件, 应用到 FormItem\\n\\n```jsx\\nfunction Demo() {\\n  const formIt = react.useRef(null)\\n\\n  return (\\n    <Form ref={formIt}>\\n      <FormItem\\n        label=\\\"日期选择\\\"\\n        name=\\\"dateTime\\\"\\n        valueFormat={(e) => e.detail.value}\\n        valueKey=\\\"value\\\"\\n        trigger=\\\"onConfirm\\\"\\n        renderRight={<Icon name=\\\"arrow\\\" />}\\n      >\\n        <DatetimePickerBox_ />\\n      </FormItem>\\n    </Form>\\n  )\\n}\\n\\nfunction DatetimePickerBox_(props) {\\n  const [state, changeState] = react.useState({\\n    show: false,\\n    innerValue: null,\\n  })\\n\\n  const setState = react.useCallback(\\n    (key, value) => {\\n      changeState({\\n        ...state,\\n        [key]: value,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  const toggleShow = react.useCallback((show) => {\\n    setState('show', show)\\n  }, [])\\n\\n  const onConfirm = react.useCallback((e) => {\\n    if (props.onConfirm) props.onConfirm(e)\\n    toggleShow(false)\\n  }, [])\\n\\n  const onCancel = react.useCallback(() => {\\n    if (props.onCancel) props.onCancel()\\n    toggleShow(false)\\n  }, [])\\n\\n  const preFixZero = react.useCallback((n) => {\\n    return n > 9 ? `${n}` : `0${n}`\\n  }, [])\\n\\n  const formatDate = react.useCallback((date) => {\\n    const d = new Date(date)\\n    return `${d.getFullYear()}-${preFixZero(\\n      Number(d.getMonth() + 1),\\n    )}-${d.getDate()} ${d.getHours()}:${d.getMinutes()}`\\n  }, [])\\n\\n  const onChange = react.useCallback((e) => {\\n    setState(innerValue, e.detail.datetimePicker.innerValue)\\n  }, [])\\n\\n  const { value } = props\\n\\n  return (\\n    <>\\n      <View onClick={() => toggleShow(true)} style={{ minWidth: '200px' }}>\\n        {value ? formatDate(value) : '请选择日期'}\\n      </View>\\n      <Popup\\n        position=\\\"bottom\\\"\\n        show={state.show}\\n        onClose={() => toggleShow(false)}\\n      >\\n        <DatetimePicker\\n          type=\\\"datetime\\\"\\n          value={state.innerValue || value}\\n          onConfirm={onConfirm}\\n          onCancel={onCancel}\\n        />\\n      </Popup>\\n    </>\\n  )\\n}\\n```\\n\\n### FormProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/form.d.ts)\\n\\n| 参数           | 说明                                          | 类型                                                                                                                                                                                                | 默认值 | 必填    |\\n| -------------- | --------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| form           | 传入 form 实例（const formStore1 = useRef()） | _&nbsp;&nbsp;IFormInstanceAPI<br/>_                                                                                                                                                                 | -      | `false` |\\n| initialValues  | 初始化表单仓库值                              | _&nbsp;&nbsp;Record<string,&nbsp;any><br/>_                                                                                                                                                         | -      | `false` |\\n| children       | 第一级必须是 FormItem 组件                    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                        | -      | `true`  |\\n| className      | 类名                                          | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                           | -      | `false` |\\n| onFinish       | 表单提交触发，配合 button.formType = submit   | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;errs:&nbsp;string[]&nbsp;&brvbar;&nbsp;null,<br/>&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;Record<string,&nbsp;any><br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onFinishFailed | 表单提交失败触发，会拦截 onFinish             | _&nbsp;&nbsp;(errs:&nbsp;string[]&nbsp;&brvbar;&nbsp;null)&nbsp;=>&nbsp;void<br/>_                                                                                                                  | -      | `false` |\\n\\n### FormItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/form.d.ts)\\n\\n| 参数              | 说明                                                                       | 类型| 默认值     | 必填    |\\n| ----------------- | -------------------------------------------------------------------------- || ---------- | ------- |\\n| name              | 对应表单字段名                                                             | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number><br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                             | -          | `true`  |\\n| children          | 第一级操作表单组件                                                         | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | -          | `true`  |\\n| label             | 表单 label                                                                 | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | -          | `true`  |\\n| layout            | 垂直 ｜ 水平                                                               | _&nbsp;&nbsp;\\\"vertical\\\"&nbsp;&brvbar;&nbsp;\\\"horizontal\\\"<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | horizontal | `false` |\\n| required          | 是否必填                                                                   | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | false      | `false` |\\n| validateTrigger   | 验证表单触发方法名                                                         | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | onChange   | `false` |\\n| labelClassName    | label 的外层 className                                                     | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | -          | `false` |\\n| requiredClassName | required 的外层 className                                                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | -          | `false` |\\n| controllClassName | 表单组件的外层 className                                                   | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | -          | `false` |\\n| className         | formItem 最外层 className                                                  | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | -          | `false` |\\n| requiredIcon      | 自定义必填标识                                                             | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | -          | `false` |\\n| feedback          | 验证后反馈的信息，可设置为校验成功、失败、都展示或隐藏                     | _&nbsp;&nbsp;\\\"success\\\"&nbsp;&brvbar;&nbsp;\\\"failed\\\"&nbsp;&brvbar;&nbsp;\\\"all\\\"&nbsp;&brvbar;&nbsp;\\\"hidden\\\"<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                    | failed     | `false` |\\n| renderRight       | 自定义渲染右边内容                                                         | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | -          | `false` |\\n| trigger           | 表单交互触发方法                                                           | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | onChange   | `false` |\\n| valueKey          | 表单控制展示的具体值的字段名                                               | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | value      | `false` |\\n| valueFormat       | 根据表单交互回掉函数（时间）参数的重新定义                                 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;any,<br/>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number>,<br/>&nbsp;&nbsp;&nbsp;&nbsp;IFormInstance:&nbsp;IFormInstanceAPI<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                                                  | value      | `false` |\\n| rules             | 正则校验值，或者自定义校验后 call 回掉函数返回错误信息，支持数组或单项设置 | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;rule:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;((<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;any,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call:&nbsp;(errMess:&nbsp;string)&nbsp;=>&nbsp;void<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;=>&nbsp;void)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;RegExp<br/>&nbsp;&nbsp;&nbsp;&nbsp;message?:&nbsp;string<br/>&nbsp;&nbsp;}[]<br/>_ | -          | `false` |\\n\\n### IFormInstance [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/form.d.ts)\\n\\n通过 ref 获取到的 form 的实例\\n| 方法 | 说明 | 类型 |\\n| --- | --- | --- |\\n| registerValidateFields | 注册校验规则 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number>,<br/>&nbsp;&nbsp;&nbsp;&nbsp;control:&nbsp;Record<string,&nbsp;any>,<br/>&nbsp;&nbsp;&nbsp;&nbsp;model:&nbsp;Record<string,&nbsp;any><br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n| registerRequiredMessageCallback | 注册必填项为空时的回调函数 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;callback:&nbsp;(label:&nbsp;string)&nbsp;=>&nbsp;string<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n| unRegisterValidate | 注册校验规则 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number><br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n| resetFields | 重置表单 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n| setFields | 设置多个表单值 | _&nbsp;&nbsp;(object:&nbsp;Record<string,&nbsp;any>)&nbsp;=>&nbsp;void<br/>_ |\\n| setFieldsValue | 设置单个表单值 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number>,<br/>&nbsp;&nbsp;&nbsp;&nbsp;modelValue:&nbsp;any<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;any<br/>_ |\\n| getFieldsValue | 获取所有表单值 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;Record<string,&nbsp;any><br/>_ |\\n| getFieldValue | 获取单个表单值 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string&nbsp;&brvbar;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number><br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;any<br/>_ |\\n| validateFields | 校验表单，并获取错误信息和所有表单值 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;callback:&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorMess:&nbsp;Array<string>&nbsp;&brvbar;&nbsp;null,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;Record<string,&nbsp;any><br/>&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n| submit | 校验表单，并获取错误信息和所有表单值，触发 form.onFinish 和 onFinishFailed | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;callback?:&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errs:&nbsp;Array<string>&nbsp;&brvbar;&nbsp;null,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;Record<string,&nbsp;string><br/>&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n\";","export default \"# Picker 选择器\\n\\n### 介绍\\n\\n提供多个选项集合供用户选择，支持单列选择和多列级联，通常与 [弹出层](#/popup) 组件配合使用。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Picker } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nconst columns = ['杭州', '宁波', '温州', '嘉兴', '湖州']\\nfunction Demo() {\\n  const onChange = (event) => {\\n    const { picker, value, index } = event.detail\\n    Toast.show(`当前值：${value}, 当前索引：${index}`)\\n  }\\n  return (\\n    <>\\n      <Toast />\\n      <Picker columns={columns} onChange={onChange} />\\n    </>\\n  )\\n}\\n```\\n\\n### 默认选中项\\n\\n单列选择器可以直接通过`defaultIndex`属性设置初始选中项的索引值。\\n\\n```jsx\\nconst columns = ['杭州', '宁波', '温州', '嘉兴', '湖州']\\nfunction Demo() {\\n  const onChange = (event) => {\\n    const { picker, value, index } = event.detail\\n    Toast.show(`当前值：${value}, 当前索引：${index}`)\\n  }\\n  return (\\n    <>\\n      <Toast />\\n      <Picker defaultIndex={2} columns={columns} onChange={onChange} />\\n    </>\\n  )\\n}\\n```\\n\\n### 展示顶部栏\\n\\n```jsx\\nconst columns = ['杭州', '宁波', '温州', '嘉兴', '湖州']\\nfunction Demo() {\\n  const onChange = (event) => {\\n    const { picker, value, index } = event.detail\\n    Toast.show(`当前值：${value}, 当前索引：${index}`)\\n  }\\n  return (\\n    <>\\n      <Toast />\\n      <Picker\\n        showToolbar\\n        title=\\\"标题\\\"\\n        defaultIndex={2}\\n        columns={columns}\\n        onChange={onChange}\\n        onCancel={() => Toast.show('onCancel')}\\n        onConfirm={() => Toast.show('onConfirm')}\\n      />\\n    </>\\n  )\\n}\\n```\\n\\n### 多列联动\\n\\n```jsx\\nconst citys = {\\n  浙江: ['杭州', '宁波', '温州', '嘉兴', '湖州'],\\n  福建: ['福州', '厦门', '莆田', '三明', '泉州'],\\n}\\nfunction Demo() {\\n  const [columns, setColumns] = react.useState([\\n    {\\n      values: Object.keys(citys),\\n      className: 'column1',\\n    },\\n    {\\n      values: citys['浙江'],\\n      className: 'column2',\\n      defaultIndex: 2,\\n    },\\n  ])\\n\\n  const onChange = (event) => {\\n    const { picker, value, index } = event.detail\\n    picker.setColumnValues(1, citys[value[0]])\\n  }\\n  return (\\n    <>\\n      <Toast />\\n      <Picker columns={columns} onChange={onChange} />\\n    </>\\n  )\\n}\\n```\\n\\n### 禁用选项\\n\\n选项可以为对象结构，通过设置 disabled 来禁用该选项。\\n\\n```jsx\\nconst columns = [\\n  {\\n    text: '杭州',\\n    disabled: true,\\n  },\\n  {\\n    text: '宁波',\\n  },\\n  {\\n    text: '温州',\\n  },\\n]\\nfunction Demo() {\\n  return <Picker columns={columns} />\\n}\\n```\\n\\n### 加载状态\\n\\n当 Picker 数据是通过异步获取时，可以通过 `loading` 属性显示加载提示。\\n\\n```jsx\\nconst columns = [\\n  {\\n    text: '宁波',\\n  },\\n  {\\n    text: '温州',\\n  },\\n  {\\n    text: '长沙',\\n  },\\n]\\nfunction Demo() {\\n  return <Picker columns={columns} loading />\\n}\\n```\\n\\n### PickerProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/picker.d.ts)\\n\\n| 参数              | 说明                                                               | 类型                                                              | 默认值 | 必填    |\\n| ----------------- | ------------------------------------------------------------------ | ----------------------------------------------------------------- | ------ | ------- |\\n| valueKey          | 选项为对象的时候，文字对应的 key                                   | _&nbsp;&nbsp;string<br/>_                                         | text   | `false` |\\n| toolbarPosition   | 顶部栏位置，可选值为 bottom                                        | _&nbsp;&nbsp;string<br/>_                                         | top    | `false` |\\n| defaultIndex      | 单列选择器的默认选中项索引,多列选择器请参考下方的 Columns 配置     | _&nbsp;&nbsp;number<br/>_                                         | 0      | `false` |\\n| columns           | 每一项数据，可为字符或者对象，对象默认展示值是 valueKey 设置的 key | _&nbsp;&nbsp;any[]<br/>_                                          | []     | `false` |\\n| title             | 顶部栏标题                                                         | _&nbsp;&nbsp;ReactNode<br/>_                                      | ''     | `false` |\\n| cancelButtonText  | 取消按钮文字                                                       | _&nbsp;&nbsp;ReactNode<br/>_                                      | 取消   | `false` |\\n| confirmButtonText | 确认按钮文字                                                       | _&nbsp;&nbsp;ReactNode<br/>_                                      | 确认   | `false` |\\n| loading           | 加载状态                                                           | _&nbsp;&nbsp;boolean<br/>_                                        | false  | `false` |\\n| itemHeight        | 选项高度,对应单位 PX                                               | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_               | 48     | `false` |\\n| visibleItemCount  | 可见的选项个数                                                     | _&nbsp;&nbsp;number<br/>_                                         | 6      | `false` |\\n| onChange          | 变化触发方法                                                       | _&nbsp;&nbsp;(e:&nbsp;PickerChangeEvents)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onCancel          | 取消触发方法                                                       | _&nbsp;&nbsp;(e:&nbsp;PickerEvents)&nbsp;=>&nbsp;void<br/>_       | -      | `false` |\\n| onConfirm         | 确认触发方法                                                       | _&nbsp;&nbsp;(e:&nbsp;PickerEvents)&nbsp;=>&nbsp;void<br/>_       | -      | `false` |\\n| showToolbar       | 是否显示顶部栏                                                     | _&nbsp;&nbsp;boolean<br/>_                                        | false  | `false` |\\n\\n### 事件 onConfirm 和 onCancel [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/picker.d.ts)\\n\\n继承了 Taro 的 ITouchEvent 类型\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| detail | 返回选项对应的值和选项对应的下标 | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;number&nbsp;&brvbar;&nbsp;number[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number&nbsp;&brvbar;&nbsp;number[]<br/>&nbsp;&nbsp;}<br/>_ |\\n\\n### 触发事件 onChange [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/picker.d.ts)\\n\\n继承了 Taro 的 ITouchEvent 类型\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| detail | 返回选项对应的值、picker 实例和多列返回当前第多少列、单列返回选项对应值 | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;number&nbsp;&brvbar;&nbsp;number[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;picker:&nbsp;IPickerInstance<br/>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number<br/>&nbsp;&nbsp;}<br/>_ |\\n\\n### 组件实例 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/picker.d.ts)\\n\\n通过 ref 获取到的方法如下\\n| 方法 | 说明 | 类型 |\\n| --- | --- | --- |\\n| setColumnValues | 设置每一列的值 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number,<br/>&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;string[]<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;Promise<any><br/>_ |\\n| getColumnValues | 获取每一列的值 | _&nbsp;&nbsp;(index:&nbsp;number[])&nbsp;=>&nbsp;(number&nbsp;&brvbar;&nbsp;string)[]<br/>_ |\\n| setColumnValue | 设置某一列的值 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number,<br/>&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;any<br/>_ |\\n| getColumnValue | 获取某一列的值 | _&nbsp;&nbsp;(index:&nbsp;number)&nbsp;=>&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ |\\n| columns | 每列的数据 | _&nbsp;&nbsp;any[]<br/>_ |\\n| getIndexes | 获取每一列展示的下标 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;number[]<br/>_ |\\n| setIndexes | 获取每一列展示的下标 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n| getValues | 每一列展示的下标 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ |\\n| confirm | 触发确认的方法 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n\";","export default \"# Radio 单选框\\n\\n### 介绍\\n\\n在一组备选项中进行单选。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Radio, RadioGroup } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`value`绑定值当前选中项的 name 。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio name=\\\"1\\\">单选框 1</Radio>\\n      <Radio name=\\\"2\\\">单选框 2</Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 水平排列\\n\\n将`direction`属性设置为`horizontal`后，单选框组会变成水平排列。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup\\n      direction=\\\"horizontal\\\"\\n      value={value}\\n      onChange={(e) => setValue(e.detail)}\\n    >\\n      <Radio name=\\\"1\\\">单选框 1</Radio>\\n      <Radio name=\\\"2\\\">单选框 2</Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 禁用状态\\n\\n通过`disabled`属性禁止选项切换，在`Radio`上设置`diabled`可以禁用单个选项。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup disabled value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio name=\\\"1\\\">单选框 1</Radio>\\n      <Radio name=\\\"2\\\">单选框 2</Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 自定义形状\\n\\n将`shape`属性设置为`square`，单选框的形状会变成方形。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio name=\\\"1\\\" shape=\\\"square\\\">\\n        单选框 1\\n      </Radio>\\n      <Radio name=\\\"2\\\" shape=\\\"square\\\">\\n        单选框 2\\n      </Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n通过`checkedColor`属性设置选中状态的图标颜色。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio name=\\\"1\\\" checkedColor=\\\"#07c160\\\" shape=\\\"square\\\">\\n        单选框 1\\n      </Radio>\\n      <Radio name=\\\"2\\\" checkedColor=\\\"#07c160\\\" shape=\\\"square\\\">\\n        单选框 2\\n      </Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 自定义大小\\n\\n通过`iconSize`属性可以自定义图标的大小。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio name=\\\"1\\\" iconSize=\\\"24px\\\" shape=\\\"square\\\">\\n        单选框 1\\n      </Radio>\\n      <Radio name=\\\"2\\\" iconSize=\\\"24px\\\" shape=\\\"square\\\">\\n        单选框 2\\n      </Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 自定义图标\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value} onChange={(e) => setValue(e.detail)}>\\n      <Radio\\n        name=\\\"1\\\"\\n        renderIcon={\\n          <Image\\n            style={{ width: '32px', height: '32px' }}\\n            src={\\n              value === '2'\\n                ? 'https://img.yzcdn.cn/public_files/2017/10/13/c547715be149dd3faa817e4a948b40c4.png'\\n                : 'https://img.yzcdn.cn/public_files/2017/10/13/793c77793db8641c4c325b7f25bf130d.png'\\n            }\\n          />\\n        }\\n        shape=\\\"square\\\"\\n      >\\n        单选框 1\\n      </Radio>\\n      <Radio\\n        name=\\\"2\\\"\\n        renderIcon={\\n          <Image\\n            style={{ width: '32px', height: '32px' }}\\n            src={\\n              value === '1'\\n                ? 'https://img.yzcdn.cn/public_files/2017/10/13/c547715be149dd3faa817e4a948b40c4.png'\\n                : 'https://img.yzcdn.cn/public_files/2017/10/13/793c77793db8641c4c325b7f25bf130d.png'\\n            }\\n          />\\n        }\\n        shape=\\\"square\\\"\\n      >\\n        单选框 2\\n      </Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 禁用文本点击\\n\\n通过设置`labelDisabled`属性可以禁用单选框文本点击。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup\\n      direction=\\\"horizontal\\\"\\n      value={value}\\n      onChange={(e) => setValue(e.detail)}\\n    >\\n      <Radio name=\\\"1\\\" labelDisabled>\\n        单选框 1\\n      </Radio>\\n      <Radio name=\\\"2\\\" labelDisabled>\\n        单选框 2\\n      </Radio>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### 与 Cell 组件一起使用\\n\\n此时你需要再引入`Cell`和`CellGroup`组件。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('1')\\n  return (\\n    <RadioGroup value={value}>\\n      <CellGroup>\\n        <Cell\\n          title=\\\"单选框 1\\\"\\n          clickable\\n          onClick={() => setValue('1')}\\n          renderRightIcon={<Radio name=\\\"1\\\"></Radio>}\\n        ></Cell>\\n        <Cell\\n          title=\\\"单选框 2\\\"\\n          clickable\\n          onClick={() => setValue('2')}\\n          renderRightIcon={<Radio name=\\\"2\\\"></Radio>}\\n        ></Cell>\\n      </CellGroup>\\n    </RadioGroup>\\n  )\\n}\\n```\\n\\n### RadioProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/radio.d.ts)\\n\\n| 参数          | 说明 | 类型                                                          | 默认值 | 必填    |\\n| ------------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| name          | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| value         | -    | _&nbsp;&nbsp;any<br/>_                                        | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| checkedColor  | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| labelPosition | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| labelDisabled | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| shape         | -    | _&nbsp;&nbsp;\\\"round\\\"&nbsp;&brvbar;&nbsp;\\\"square\\\"<br/>_        | -      | `false` |\\n| iconSize      | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_           | -      | `false` |\\n| children      | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| renderIcon    | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\\n### RadioGroupProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/radio.d.ts)\\n\\n| 参数      | 说明 | 类型                                                          | 默认值 | 必填    |\\n| --------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| value     | -    | _&nbsp;&nbsp;any<br/>_                                        | -      | `false` |\\n| direction | -    | _&nbsp;&nbsp;\\\"vertical\\\"&nbsp;&brvbar;&nbsp;\\\"horizontal\\\"<br/>_ | -      | `false` |\\n| disabled  | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| onChange  | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# Rate 评分\\n\\n### 介绍\\n\\n用于对事物进行评级操作。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Rate } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(3)\\n  return <Rate value={value} onChange={(e) => setValue(e.detail)} />\\n}\\n```\\n\\n### 自定义图标\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(4)\\n\\n  return (\\n    <Rate\\n      value={value}\\n      icon=\\\"like\\\"\\n      voidIcon=\\\"likeO\\\"\\n      onChange={(e) => setValue(e.detail)}\\n    />\\n  )\\n}\\n```\\n\\n### 自定义样式\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(4)\\n\\n  return (\\n    <Rate\\n      value={value}\\n      size={25}\\n      color=\\\"#ffd21e\\\"\\n      voidIcon=\\\"star\\\"\\n      voidColor=\\\"#eee\\\"\\n      onChange={(e) => setValue(e.detail)}\\n    />\\n  )\\n}\\n```\\n\\n### 半星\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(4)\\n\\n  return (\\n    <Rate\\n      value={value}\\n      allowHalf\\n      voidIcon=\\\"star\\\"\\n      voidColor=\\\"#eee\\\"\\n      onChange={(e) => setValue(e.detail)}\\n    />\\n  )\\n}\\n```\\n\\n### 自定义数量\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(3)\\n\\n  return <Rate value={value} count={6} onChange={(e) => setValue(e.detail)} />\\n}\\n```\\n\\n### 禁用状态\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(3)\\n\\n  return <Rate disabled value={value} onChange={(e) => setValue(e.detail)} />\\n}\\n```\\n\\n### 只读状态\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(3)\\n\\n  return <Rate readonly value={value} />\\n}\\n```\\n\\n### RateProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/rate.d.ts)\\n\\n| 参数          | 说明 | 类型                                                      | 默认值 | 必填    |\\n| ------------- | ---- | --------------------------------------------------------- | ------ | ------- |\\n| value         | -    | _&nbsp;&nbsp;number<br/>_                                 | -      | `false` |\\n| defaultValue  | -    | _&nbsp;&nbsp;number<br/>_                                 | -      | `false` |\\n| readonly      | -    | _&nbsp;&nbsp;boolean<br/>_                                | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                | -      | `false` |\\n| allowHalf     | -    | _&nbsp;&nbsp;boolean<br/>_                                | -      | `false` |\\n| size          | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_       | -      | `false` |\\n| icon          | -    | _&nbsp;&nbsp;string<br/>_                                 | -      | `false` |\\n| voidIcon      | -    | _&nbsp;&nbsp;string<br/>_                                 | -      | `false` |\\n| color         | -    | _&nbsp;&nbsp;string<br/>_                                 | -      | `false` |\\n| voidColor     | -    | _&nbsp;&nbsp;string<br/>_                                 | -      | `false` |\\n| disabledColor | -    | _&nbsp;&nbsp;string<br/>_                                 | -      | `false` |\\n| count         | -    | _&nbsp;&nbsp;number<br/>_                                 | -      | `false` |\\n| gutter        | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_       | -      | `false` |\\n| touchable     | -    | _&nbsp;&nbsp;boolean<br/>_                                | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# Search 搜索\\n\\n### 介绍\\n\\n用于搜索场景的输入框组件。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Search } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n`vanSearch` 中，value 用于控制搜索框中的文字。background 可以自定义搜索框外部背景色。\\n\\n```jsx\\nfunction Demo() {\\n  return <Search placeholder=\\\"请输入搜索关键词\\\" />\\n}\\n```\\n\\n### 事件监听\\n\\n`vanSearch` 提供了 search 和 cancel 事件。search 事件在用户点击键盘上的搜索按钮触发。cancel 事件在用户点击搜索框右侧取消按钮时触发。\\n\\n```jsx\\nfunction Demo() {\\n  const onSearch = (e) => {\\n    Toast.show(`search: ${e.detail}`)\\n  }\\n  const onCancel = (e) => {\\n    Toast.show(`onCancel`)\\n  }\\n  return (\\n    <>\\n      <Search\\n        placeholder=\\\"请输入搜索关键词\\\"\\n        showAction\\n        onSearch={onSearch}\\n        onCancel={onCancel}\\n      />\\n      <Toast />\\n    </>\\n  )\\n}\\n```\\n\\n### 搜索框内容对齐\\n\\n通过 `inputAlign` 属性可以设置搜索框内容的对齐方式。\\n\\n```jsx\\nfunction Demo() {\\n  return <Search placeholder=\\\"请输入搜索关键词\\\" inputAlign=\\\"center\\\" />\\n}\\n```\\n\\n### 禁用搜索框\\n\\n通过 `disabled` 属性可以将组件设置为禁用状态。\\n\\n```jsx\\nfunction Demo() {\\n  return <Search disabled placeholder=\\\"请输入搜索关键词\\\" />\\n}\\n```\\n\\n### 自定义背景色\\n\\n通过`background`属性可以设置搜索框外部的背景色，通过`shape`属性设置搜索框的形状，可选值为`round`。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Search shape=\\\"round\\\" background=\\\"#4fc08d\\\" placeholder=\\\"请输入搜索关键词\\\" />\\n  )\\n}\\n```\\n\\n### 自定义按钮\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('')\\n  const onSearch = (e) => {\\n    Toast.show(`search: ${e.detail}`)\\n  }\\n\\n  const searchAction = () => {\\n    Toast.show(`search: ${value}`)\\n  }\\n\\n  return (\\n    <>\\n      <Search\\n        onChange={(e) => setValue(e.detail)}\\n        placeholder=\\\"请输入搜索关键词\\\"\\n        onSearch={onSearch}\\n        renderAction={<View onClick={searchAction}>搜索</View>}\\n      />\\n      <Toast />\\n    </>\\n  )\\n}\\n```\\n\\n### SearchProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/search.d.ts)\\n\\n| 参数             | 说明 | 类型                                                       | 默认值 | 必填    |\\n| ---------------- | ---- | ---------------------------------------------------------- | ------ | ------- |\\n| value            | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_        | -      | `false` |\\n| defaultValue     | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_        | -      | `false` |\\n| label            | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| focus            | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| error            | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| disabled         | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| readonly         | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| inputAlign       | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| showAction       | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| leftIcon         | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| rightIcon        | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| placeholder      | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| placeholderStyle | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| actionText       | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| background       | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| maxlength        | -    | _&nbsp;&nbsp;number<br/>_                                  | -      | `false` |\\n| shape            | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| clearable        | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| clearTrigger     | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| clearIcon        | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| renderLabel      | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| renderLeftIcon   | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| renderRightIcon  | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| renderAction     | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| onChange         | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onSearch         | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onFocus          | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onBlur           | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onClear          | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                    | -      | `false` |\\n| onCancel         | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                    | -      | `false` |\\n| onClickInput     | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                    | -      | `false` |\\n\";","export default \"# Slider 滑块\\n\\n### 介绍\\n\\n滑动输入条，用于在给定的范围内选择一个值。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Slider } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基本用法\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider value=\\\"50\\\" />\\n}\\n```\\n\\n```js\\n\\n```\\n\\n### 双滑块\\n\\n添加 `range` 属性就可以开启双滑块模式，确保 `value` 的值是一个数组。\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider value={[10, 50]} range />\\n}\\n```\\n\\n```js\\n\\n```\\n\\n### 指定选择范围\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider min=\\\"-50\\\" max=\\\"50\\\" />\\n}\\n```\\n\\n### 禁用\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider value=\\\"50\\\" disabled />\\n}\\n```\\n\\n### 指定步长\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider value=\\\"50\\\" step=\\\"10\\\" />\\n}\\n```\\n\\n### 自定义样式\\n\\n```jsx\\nfunction Demo() {\\n  return <Slider value=\\\"50\\\" barHeight=\\\"4px\\\" activeColor=\\\"#ee0a24\\\" />\\n}\\n```\\n\\n### 自定义按钮\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(50)\\n  return (\\n    <Slider\\n      value={value}\\n      onDrag={(e) => {\\n        console.info(e.detail)\\n        setValue(e.detail.value)\\n      }}\\n      renderButton={<View class=\\\"customButton\\\">{value}/100</View>}\\n    />\\n  )\\n}\\n```\\n\\nh5 注意需要需加`visibility: visible`\\n\\n```css\\n.customButton {\\n  width: 112px;\\n  color: #ffffff;\\n  font-size: 20px;\\n  line-height: 36px;\\n  text-align: center;\\n  border-radius: 200px;\\n  background-color: #ee0a24;\\n  visibility: visible;\\n}\\n```\\n\\n### 垂直方向\\n\\n设置 `vertical` 属性后，滑块会垂直展示，且高度为 100% 父元素高度。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View style={{ height: '200px' }}>\\n      <Slider value=\\\"40\\\" />\\n      <Slider value=\\\"60\\\" vertical={true} />\\n    </View>\\n  )\\n}\\n```\\n\\n### SliderProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/slider.d.ts)\\n\\n| 参数          | 说明 | 类型                                                                               | 默认值 | 必填    |\\n| ------------- | ---- | ---------------------------------------------------------------------------------- | ------ | ------- |\\n| range         | -    | _&nbsp;&nbsp;boolean<br/>_                                                         | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                                         | -      | `false` |\\n| activeColor   | -    | _&nbsp;&nbsp;string<br/>_                                                          | -      | `false` |\\n| inactiveColor | -    | _&nbsp;&nbsp;string<br/>_                                                          | -      | `false` |\\n| max           | -    | _&nbsp;&nbsp;number<br/>_                                                          | -      | `false` |\\n| min           | -    | _&nbsp;&nbsp;number<br/>_                                                          | -      | `false` |\\n| step          | -    | _&nbsp;&nbsp;number<br/>_                                                          | -      | `false` |\\n| value         | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;number[]<br/>_                              | -      | `false` |\\n| barHeight     | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                | -      | `false` |\\n| vertical      | -    | _&nbsp;&nbsp;boolean<br/>_                                                         | -      | `false` |\\n| onDrag        | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent&nbsp;&&nbsp;SliderEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent&nbsp;&&nbsp;SliderEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onDragStart   | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                            | -      | `false` |\\n| onDragEnd     | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                            | -      | `false` |\\n| renderButton  | -    | _&nbsp;&nbsp;(value:&nbsp;number)&nbsp;=>&nbsp;React.ReactNode<br/>_               | -      | `false` |\\n\";","export default \"# Stepper 步进器\\n\\n### 介绍\\n\\n步进器由增加按钮、减少按钮和输入框组成，用于在一定范围内输入、调整数字。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Stepper } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`value`设置输入值，可以通过`change`事件监听到输入值的变化。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} />\\n}\\n```\\n\\n```js\\n\\n```\\n\\n### 步长设置\\n\\n通过`step`属性设置每次点击增加或减少按钮时变化的值，默认为`1`。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} step=\\\"2\\\" />\\n}\\n```\\n\\n### 限制输入范围\\n\\n通过`min`和`max`属性限制输入值的范围。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={5} min=\\\"5\\\" max=\\\"8\\\" />\\n}\\n```\\n\\n### 限制输入整数\\n\\n设置`integer`属性后，输入框将限制只能输入整数。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} integer />\\n}\\n```\\n\\n### 禁用状态\\n\\n通过设置`disabled`属性来禁用步进器，禁用状态下无法点击按钮或修改输入框。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} disabled />\\n}\\n```\\n\\n### 关闭长按\\n\\n通过设置`longPress`属性决定步进器是否开启长按手势。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} longPress={false} />\\n}\\n```\\n\\n### 固定小数位数\\n\\n通过设置`decimalLength`属性可以保留固定的小数位数。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} step=\\\"0.2\\\" decimalLength={1} />\\n}\\n```\\n\\n### 异步变更\\n\\n如果需要异步地修改输入框的值，可以设置`asyncChange`属性，并在`change`事件中手动修改`value`。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState()\\n  function onChange(value) {\\n    Toast.loading({\\n      forbidClick: true,\\n    })\\n    setTimeout(() => {\\n      Toast.clear()\\n      setValue(value.detail)\\n    }, 1000)\\n  }\\n\\n  return (\\n    <>\\n      <Stepper value={value} asyncChange onChange={onChange} />\\n      <Toast />\\n    </>\\n  )\\n}\\n```\\n\\n### 自定义大小\\n\\n通过`inputWidth`属性设置输入框宽度，通过`buttonSize`属性设置按钮大小和输入框高度。\\n\\n```jsx\\nfunction Demo() {\\n  return <Stepper value={1} inputWidth=\\\"40px\\\" buttonSize=\\\"32px\\\" />\\n}\\n```\\n\\n### StepperProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/stepper.d.ts)\\n\\n| 参数          | 说明 | 类型                                                                                                                                             | 默认值 | 必填    |\\n| ------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| name          | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                     | -      | `false` |\\n| value         | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| integer       | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| inputWidth    | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| buttonSize    | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| asyncChange   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| disableInput  | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| decimalLength | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                        | -      | `false` |\\n| min           | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| max           | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| step          | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| showPlus      | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| showMinus     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| disablePlus   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| disableMinus  | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| longPress     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| theme         | -    | _&nbsp;&nbsp;\\\"round\\\"<br/>_                                                                                                                       | -      | `false` |\\n| alwaysEmbed   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| onFocus       | -    | _&nbsp;&nbsp;CommonEventFunction<InputProps.inputForceEventDetail><br/>_                                                                         | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onBlur        | -    | _&nbsp;&nbsp;CommonEventFunction<InputProps.inputForceEventDetail><br/>_                                                                         | -      | `false` |\\n| onOverlimit   | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                          | -      | `false` |\\n| onPlus        | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                          | -      | `false` |\\n| onMinus       | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                          | -      | `false` |\\n| renderMinus   | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                     | -      | `false` |\\n| renderPlus    | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                     | -      | `false` |\\n\";","export default \"# Switch 开关\\n\\n### 介绍\\n\\n用于在打开和关闭状态之间进行切换。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Switch } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(false)\\n  return <Switch checked={value} onChange={(e) => setValue(e.detail)} />\\n}\\n```\\n\\n### 禁用状态\\n\\n```jsx\\nfunction Demo() {\\n  return <Switch disbled />\\n}\\n```\\n\\n### 加载状态\\n\\n```jsx\\nfunction Demo() {\\n  return <Switch loading checked={true} />\\n}\\n```\\n\\n### 自定义大小\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(false)\\n  return (\\n    <Switch size=\\\"32px\\\" checked={value} onChange={(e) => setValue(e.detail)} />\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(false)\\n  return (\\n    <Switch\\n      activeColor=\\\"#07c160\\\"\\n      inactiveColor=\\\"#ee0a24\\\"\\n      checked={value}\\n      onChange={(e) => setValue(e.detail)}\\n    />\\n  )\\n}\\n```\\n\\n### 异步控制\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(false)\\n\\n  const action = (e) => {\\n    Dialog.confirm({\\n      selector: '#switch-demo',\\n      title: '提示',\\n      message: '是否切换开关？',\\n    })\\n      .then(() => {\\n        setValue(e.detail)\\n      })\\n      .catch((e) => {\\n        console.log(e)\\n      })\\n  }\\n\\n  return (\\n    <>\\n      <Dialog id=\\\"switch-demo\\\" />\\n      <Switch checked={value} onChange={action} />\\n    </>\\n  )\\n}\\n```\\n\\n### SwitchProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/switch.d.ts)\\n\\n| 参数          | 说明 | 类型                                                          | 默认值 | 必填    |\\n| ------------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| checked       | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| loading       | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| disabled      | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| activeColor   | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| inactiveColor | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| size          | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| activeValue   | -    | _&nbsp;&nbsp;any<br/>_                                        | -      | `false` |\\n| inactiveValue | -    | _&nbsp;&nbsp;any<br/>_                                        | -      | `false` |\\n| onChange      | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# Uploader 文件上传\\n\\n### 介绍\\n\\n用于将本地的图片或文件上传至服务器，并在上传过程中展示预览图和上传进度。目前 Uploader 组件不包含将文件上传至服务器的接口逻辑，该步骤需要自行实现。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Uploader } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n文件上传完毕后会触发`afterRead`回调函数，获取到对应的文件的临时地址，然后再使用`wx.uploadFile`将图片上传到远程服务器上。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState([\\n    {\\n      url: 'https://img.yzcdn.cn/vant/leaf.jpg',\\n      name: '图片1',\\n    },\\n    {\\n      url: 'https://img.yzcdn.cn/vant/tree.jpg',\\n    },\\n  ])\\n\\n  const afterRead = (event) => {\\n    const { file, name } = event.detail\\n    // 可在此处新增云上传图片操作\\n    setValue(value.concat(file))\\n  }\\n\\n  const deleteAction = (event) => {\\n    const { index } = event.detail\\n    const valueNew = JSON.parse(JSON.stringify(value))\\n    valueNew.splice(index, 1)\\n    setValue(valueNew)\\n  }\\n\\n  return (\\n    <Uploader\\n      fileList={value}\\n      onAfterRead={afterRead}\\n      onDelete={deleteAction}\\n      deletable\\n    />\\n  )\\n}\\n```\\n\\n### 上传状态\\n\\n通过`status`属性可以标识上传状态，`uploading`表示上传中，`failed`表示上传失败，`done`表示上传完成。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState([\\n    {\\n      url: 'https://img.yzcdn.cn/vant/leaf.jpg',\\n      status: 'uploading',\\n      message: '上传中',\\n    },\\n    {\\n      url: 'https://img.yzcdn.cn/vant/tree.jpg',\\n      status: 'failed',\\n      message: '上传失败',\\n    },\\n  ])\\n\\n  const afterRead = (event) => {\\n    const { file, name } = event.detail\\n    setValue(value.concat(file))\\n  }\\n\\n  const deleteAction = (event) => {\\n    const { index } = event.detail\\n    const valueNew = JSON.parse(JSON.stringify(value))\\n    valueNew.splice(index, 1)\\n    setValue(valueNew)\\n  }\\n\\n  return (\\n    <Uploader\\n      fileList={value}\\n      onAfterRead={afterRead}\\n      onDelete={deleteAction}\\n      deletable\\n    />\\n  )\\n}\\n```\\n\\n### 限制上传数量\\n\\n通过`maxCount`属性可以限制上传文件的数量，上传数量达到限制后，会自动隐藏上传区域。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState([\\n    { url: 'https://img.yzcdn.cn/vant/sand.jpg' },\\n  ])\\n\\n  const afterRead = (event) => {\\n    const { file, name } = event.detail\\n    setValue(value.concat(file))\\n  }\\n\\n  const deleteAction = (event) => {\\n    const { index } = event.detail\\n    const valueNew = JSON.parse(JSON.stringify(value))\\n    valueNew.splice(index, 1)\\n    setValue(valueNew)\\n  }\\n\\n  return (\\n    <Uploader\\n      fileList={value}\\n      onAfterRead={afterRead}\\n      onDelete={deleteAction}\\n      maxCount={2}\\n    />\\n  )\\n}\\n```\\n\\n### 自定义上传样式\\n\\n通过插槽可以自定义上传区域的样式。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState([])\\n\\n  const afterRead = (event) => {\\n    const { file, name } = event.detail\\n    setValue(value.concat(file))\\n  }\\n\\n  const deleteAction = (event) => {\\n    const { index } = event.detail\\n    const valueNew = JSON.parse(JSON.stringify(value))\\n    valueNew.splice(index, 1)\\n    setValue(valueNew)\\n  }\\n\\n  return (\\n    <Uploader fileList={value} onAfterRead={afterRead} onDelete={deleteAction}>\\n      <Button icon=\\\"photo\\\" type=\\\"primary\\\">\\n        上传图片\\n      </Button>\\n    </Uploader>\\n  )\\n}\\n```\\n\\n### 上传前校验\\n\\n将`useBeforeRead`属性设置为`true`，然后绑定 `beforeRead` 事件可以在上传前进行校验，调用 `callback` 方法传入 `true` 表示校验通过，传入 `false` 表示校验失败。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState([])\\n\\n  const afterRead = (event) => {\\n    const { file, name } = event.detail\\n    setValue(value.concat(file))\\n  }\\n\\n  const deleteAction = (event) => {\\n    const { index } = event.detail\\n    const valueNew = JSON.parse(JSON.stringify(value))\\n    valueNew.splice(index, 1)\\n    setValue(valueNew)\\n  }\\n\\n  return (\\n    <Uploader\\n      accept=\\\"png\\\"\\n      fileList={value}\\n      onAfterRead={afterRead}\\n      onDelete={deleteAction}\\n    />\\n  )\\n}\\n```\\n\\n### UploaderProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/uploader.d.ts)\\n\\n| 参数             | 说明 | 类型                                                                                                                                                                                                                                                                            | 默认值 | 必填    |\\n| ---------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| disabled         | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| multiple         | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| uploadText       | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                    | -      | `false` |\\n| useBeforeRead    | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| afterRead        | -    | _&nbsp;&nbsp;any<br/>_                                                                                                                                                                                                                                                          | -      | `false` |\\n| beforeRead       | -    | _&nbsp;&nbsp;any<br/>_                                                                                                                                                                                                                                                          | -      | `false` |\\n| previewSize      | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                                                             | -      | `false` |\\n| name             | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                                                             | -      | `false` |\\n| accept           | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"all\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"media\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"image\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"file\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"video\\\"<br/>_ | -      | `false` |\\n| fileList         | -    | _&nbsp;&nbsp;Array<any><br/>_                                                                                                                                                                                                                                                   | -      | `false` |\\n| maxSize          | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                       | -      | `false` |\\n| maxCount         | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                       | -      | `false` |\\n| deletable        | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| showUpload       | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| previewImage     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| previewFullImage | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| imageFit         | -    | _&nbsp;&nbsp;keyof&nbsp;ImageProps.mode&nbsp;&brvbar;&nbsp;undefined<br/>_                                                                                                                                                                                                      | -      | `false` |\\n| uploadIcon       | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                       | -      | `false` |\\n| sizeType         | -    | _&nbsp;&nbsp;Array<string><br/>_                                                                                                                                                                                                                                                | -      | `false` |\\n| capture          | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;Array<string><br/>_                                                                                                                                                                                                                      | -      | `false` |\\n| compressed       | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| maxDuration      | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                       | -      | `false` |\\n| camera           | -    | _&nbsp;&nbsp;\\\"back\\\"&nbsp;&brvbar;&nbsp;\\\"front\\\"<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n| children         | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                    | -      | `false` |\\n| onError          | -    | _&nbsp;&nbsp;(error:&nbsp;any)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                           | -      | `false` |\\n| onDelete         | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                   | -      | `false` |\\n| onBeforeRead     | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                   | -      | `false` |\\n| onAfterRead      | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                   | -      | `false` |\\n| onOversize       | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                   | -      | `false` |\\n| onClickPreview   | -    | _&nbsp;&nbsp;(data:&nbsp;any)&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                            | -      | `false` |\\n\";","export default \"# ActionSheet 动作面板\\n\\n### 介绍\\n\\n底部弹起的模态面板，包含与当前情境相关的多个选项。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { ActionSheet } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n需要传入一个`actions`的数组，数组的每一项是一个对象，对象属性见文档下方表格。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '选项1',\\n    },\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n      subname: '描述信息',\\n      openType: 'share',\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet\\n        show={show}\\n        actions={actions}\\n        onClose={() => setShow(false)}\\n        onSelect={(e) => console.info(e.detail)}\\n      />\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### 选项状态\\n\\n选项可以设置为加载状态或禁用状态。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '着色选项',\\n      color: '#ee0a24',\\n    },\\n    {\\n      loading: true,\\n    },\\n    {\\n      name: '禁用选项',\\n      disabled: true,\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet\\n        show={show}\\n        actions={actions}\\n        onClose={() => setShow(false)}\\n      />\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### 展示取消按钮\\n\\n设置`cancelText`属性后，会在底部展示取消按钮，点击后关闭当前菜单。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n      subname: '描述信息',\\n      openType: 'share',\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet\\n        show={show}\\n        actions={actions}\\n        cancelText=\\\"取消\\\"\\n        onClose={() => setShow(false)}\\n      />\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### 展示描述信息\\n\\n设置`description`属性后，会在选项上方显示描述信息。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n      subname: '描述信息',\\n      openType: 'share',\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet\\n        show={show}\\n        actions={actions}\\n        description=\\\"这是一段描述信息\\\"\\n        onClose={() => setShow(false)}\\n      />\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### 展示标题栏\\n\\n通过设置`title`属性展示标题栏，同时可以使用插槽自定义菜单内容。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n    },\\n    {\\n      name: '选项',\\n      subname: '描述信息',\\n      openType: 'share',\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet show={show} title=\\\"标题\\\" onClose={() => setShow(false)}>\\n        <View>内容</View>\\n      </ActionSheet>\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### 微信开放能力\\n\\n需要传入一个`actions`的数组，数组的每一项是一个对象，对象属性见文档下方表格。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [actions, setActions] = react.useState([\\n    {\\n      name: '获取用户信息',\\n      color: '#07c160',\\n      openType: 'getUserInfo',\\n    },\\n  ])\\n\\n  return (\\n    <>\\n      <ActionSheet\\n        show={show}\\n        actions={actions}\\n        onClose={() => setShow(false)}\\n        onGetuserinfo={(e) => console.info(e.detail)}\\n      />\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        弹出菜单\\n      </Button>\\n    </>\\n  )\\n}\\n```\\n\\n### ActionSheetItem [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/action-sheet.d.ts)\\n\\n| 参数     | 说明 | 类型                         |\\n| -------- | ---- | ---------------------------- |\\n| name     | -    | _&nbsp;&nbsp;ReactNode<br/>_ |\\n| subname  | -    | _&nbsp;&nbsp;ReactNode<br/>_ |\\n| color    | -    | _&nbsp;&nbsp;string<br/>_    |\\n| loading  | -    | _&nbsp;&nbsp;boolean<br/>_   |\\n| disabled | -    | _&nbsp;&nbsp;boolean<br/>_   |\\n\\n### ActionSheetProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/action-sheet.d.ts)\\n\\n| 参数                | 说明 | 类型                                                                                                                                                                                                                          | 默认值 | 必填    |\\n| ------------------- | ---- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| actions             | -    | _&nbsp;&nbsp;ActionSheetItem[]<br/>_                                                                                                                                                                                          | -      | `false` |\\n| title               | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                  | -      | `false` |\\n| show                | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| cancelText          | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                  | -      | `false` |\\n| description         | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                  | -      | `false` |\\n| overlay             | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| closeOnClickOverlay | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| closeOnClickAction  | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| safeAreaInsetBottom | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| round               | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                    | -      | `false` |\\n| zIndex              | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                     | -      | `false` |\\n| children            | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                  | -      | `false` |\\n| onSelect            | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;event:&nbsp;ITouchEvent&nbsp;&&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;ActionSheetItem<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onCancel            | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                       | -      | `false` |\\n| onClose             | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                       | -      | `false` |\\n| onClickOverlay      | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                       | -      | `false` |\\n\";","export default \"# Dialog 弹出框\\n\\n### 介绍\\n\\n弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作，支持函数调用和组件调用两种方式。\\n\\n> 注意：1.8.0 以下的版本取消按钮会触发 catch。1.8.0 及以后的版本取消按钮会触发 then 需要通过返回的 value 为 confirm 或者 cancel 来判断是否点了确认还是取消\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Dialog } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 提示弹窗\\n\\n- alart 用于提示一些消息，只包含一个确认按钮。\\n- confirm 用于确认消息，包含取消和确认按钮。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState('')\\n  const alert = react.useCallback((title) => {\\n    Dialog.alert({\\n      title: title || '',\\n      message: '弹窗内容',\\n      selector: 'vanDialog0',\\n    }).then((value) => {\\n      console.log('dialog result', value)\\n    })\\n  })\\n\\n  const confirm = react.useCallback(() => {\\n    Dialog.confirm({\\n      title: '标题',\\n      message: (\\n        <Input\\n          placeholder=\\\"请输入内容\\\"\\n          value={value}\\n          onChange={(e) => setValue(e.detail.value)}\\n        />\\n      ),\\n      selector: 'vanDialog0',\\n    }).then((value) => {\\n      console.log('dialog result', value)\\n    })\\n  }, [value])\\n\\n  return (\\n    <View>\\n      <Dialog id=\\\"vanDialog0\\\" />\\n      <Cell title=\\\"提示弹窗\\\" onClick={() => alert('提示一下')} />\\n      <Cell title=\\\"提示弹窗（无标题）\\\" onClick={() => alert()} />\\n      <Cell title=\\\"确认弹窗\\\" onClick={confirm} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 圆角按钮风格\\n\\n将 theme 选项设置为 `roundButton` 可以展示圆角按钮风格的弹窗。\\n\\n```jsx\\nfunction Demo() {\\n  const alert = react.useCallback((title) => {\\n    Dialog.alert({\\n      title: title || '',\\n      message: '弹窗内容',\\n      theme: 'roundButton',\\n      selector: '#vanDialog1',\\n    }).then((value) => {\\n      console.log('dialog result', value)\\n    })\\n  })\\n\\n  return (\\n    <View>\\n      <Dialog id=\\\"vanDialog1\\\" />\\n      <Cell title=\\\"提示弹窗\\\" onClick={() => alert('提示一下')} />\\n      <Cell title=\\\"提示弹窗（无标题）\\\" onClick={() => alert()} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 异步关闭\\n\\n通过 `beforeClose` 属性可以传入一个回调函数，在弹窗关闭前进行特定操作。\\n\\n```jsx\\nfunction Demo() {\\n  const alert = react.useCallback((title) => {\\n    const beforeClose = (action) =>\\n      new Promise((resolve) => {\\n        setTimeout(() => {\\n          if (action === 'confirm') {\\n            resolve(true)\\n          } else {\\n            // 拦截取消操作\\n            resolve(false)\\n          }\\n        }, 1000)\\n      })\\n    Dialog.alert({\\n      title: title || '',\\n      message: '弹窗内容',\\n      theme: 'roundButton',\\n      selector: 'vanDialog2',\\n      beforeClose,\\n    }).then((value) => {\\n      console.log('dialog result', value)\\n    })\\n  })\\n\\n  return (\\n    <View>\\n      <Dialog id=\\\"vanDialog2\\\" />\\n      <Cell title=\\\"异步关闭\\\" onClick={() => alert('点击等待1s关闭')} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 组件调用\\n\\n如果需要在弹窗内嵌入组件或其他自定义内容，可以使用组件调用的方式。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  const [value, setValue] = react.useState('')\\n\\n  return (\\n    <View>\\n      <Dialog\\n        id=\\\"vanDialog3\\\"\\n        title=\\\"标题\\\"\\n        showCancelButton\\n        confirmButtonOpenType=\\\"getUserInfo\\\"\\n        show={show}\\n        onClose={() => setShow(false)}\\n      >\\n        <Input placeholder=\\\"请输入内容\\\" onChange={(e) => setValue(e.detail)} />\\n        <Image\\n          className=\\\"demo-image\\\"\\n          height=\\\"240px\\\"\\n          src=\\\"https://img.yzcdn.cn/public_files/2017/09/05/4e3ea0898b1c2c416eec8c11c5360833.jpg\\\"\\n        ></Image>\\n      </Dialog>\\n      <Cell title=\\\"组件调用\\\" onClick={() => setShow(true)} />\\n    </View>\\n  )\\n}\\n```\\n\\n### DialogProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/dialog.d.ts)\\n\\n| 参数                  | 说明 | 类型                                                                                                                                                                                                                                                                                             | 默认值 | 必填    |\\n| --------------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| show                  | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| title                 | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                     | -      | `false` |\\n| width                 | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                                                                                              | -      | `false` |\\n| zIndex                | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| theme                 | -    | _&nbsp;&nbsp;\\\"round-button\\\"<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| cancelButtonColor     | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| confirmButtonColor    | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| onConfirm             | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog?:&nbsp;{&nbsp;dialog:&nbsp;any&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onCancel              | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog?:&nbsp;{&nbsp;dialog:&nbsp;any&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onClose               | -    | _&nbsp;&nbsp;(event:&nbsp;{&nbsp;detail:&nbsp;string&nbsp;})&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                             | -      | `false` |\\n| message               | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                     | -      | `false` |\\n| overlay               | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| selector              | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| ariaLabel             | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| className             | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| style                 | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| transition            | -    | _&nbsp;&nbsp;\\\"fade\\\"&nbsp;&brvbar;&nbsp;\\\"none\\\"<br/>_                                                                                                                                                                                                                                              | -      | `false` |\\n| asyncClose            | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| beforeClose           | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;action:&nbsp;string<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;Promise<void&nbsp;&brvbar;&nbsp;boolean>&nbsp;&brvbar;&nbsp;void&nbsp;&brvbar;&nbsp;boolean<br/>_                                                                                                  | -      | `false` |\\n| messageAlign          | -    | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"<br/>_                                                                                                                                                                                                                                             | -      | `false` |\\n| confirmButtonText     | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                     | -      | `false` |\\n| cancelButtonText      | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                     | -      | `false` |\\n| showConfirmButton     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| showCancelButton      | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| closeOnClickOverlay   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                       | -      | `false` |\\n| confirmButtonOpenType | -    | _&nbsp;&nbsp;TaroButtonProps.openType<br/>_                                                                                                                                                                                                                                                      | -      | `false` |\\n| renderTitle           | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                     | -      | `false` |\\n\";","export default \"# DropdownMenu 下拉菜单\\n\\n### 介绍\\n\\n向下弹出的菜单列表。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { DropdownMenu } from '@antmjs/vantui'\\nimport { DropdownItem } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    option1: [\\n      {\\n        text: '全部商品',\\n        value: 0,\\n      },\\n      {\\n        text: '新款商品',\\n        value: 1,\\n      },\\n      {\\n        text: '活动商品',\\n        value: 2,\\n      },\\n    ],\\n    option2: [\\n      {\\n        text: '默认排序',\\n        value: 'a',\\n      },\\n      {\\n        text: '好评排序',\\n        value: 'b',\\n      },\\n      {\\n        text: '销量排序',\\n        value: 'c',\\n      },\\n    ],\\n    value1: 0,\\n    value2: 'a',\\n  })\\n  return (\\n    <View>\\n      <DropdownMenu>\\n        <DropdownItem value={state.value1} options={state.option1} />\\n        <DropdownItem value={state.value2} options={state.option2} />\\n      </DropdownMenu>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义菜单内容\\n\\n```jsx\\nfunction Demo() {\\n  const it = react.useRef(null)\\n  const [state, setState] = react.useState({\\n    option1: [\\n      {\\n        text: '全部商品',\\n        value: 0,\\n      },\\n      {\\n        text: '新款商品',\\n        value: 1,\\n      },\\n    ],\\n    value1: 0,\\n    switch: false,\\n    result: '',\\n  })\\n\\n  const changeState = react.useCallback(\\n    function (type, value) {\\n      setState({\\n        ...state,\\n        [type]: value,\\n      })\\n    },\\n    [state],\\n  )\\n\\n  const onConfirm = react.useCallback(\\n    function () {\\n      it.current.toggle()\\n      changeState('result', state.switch ? '打开状态' : '关闭状态')\\n    },\\n    [it, changeState],\\n  )\\n\\n  return (\\n    <DropdownMenu>\\n      <DropdownItem value={state.value1} options={state.option1} />\\n      <DropdownItem ref={it} title={state.result}>\\n        <Cell\\n          title=\\\"选择开关\\\"\\n          renderRightIcon={\\n            <Switch\\n              size=\\\"24px\\\"\\n              style=\\\"height: 26px\\\"\\n              checked={state.switch}\\n              activeColor=\\\"#ee0a24\\\"\\n              onChange={() => changeState('switch', !state.switch)}\\n            />\\n          }\\n        ></Cell>\\n        <View style=\\\"padding: 5px 16px;\\\">\\n          <Button type=\\\"danger\\\" block round onClick={onConfirm}>\\n            确认\\n          </Button>\\n        </View>\\n      </DropdownItem>\\n    </DropdownMenu>\\n  )\\n}\\n```\\n\\n### 自定义选中状态颜色\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    option1: [\\n      {\\n        text: '全部商品',\\n        value: 0,\\n      },\\n      {\\n        text: '新款商品',\\n        value: 1,\\n      },\\n    ],\\n    option2: [\\n      {\\n        text: '默认排序',\\n        value: 'a',\\n      },\\n      {\\n        text: '好评排序',\\n        value: 'b',\\n      },\\n    ],\\n    value1: 0,\\n    value2: 'a',\\n  })\\n  return (\\n    <DropdownMenu activeColor=\\\"#1989fa\\\">\\n      <DropdownItem value={state.value1} options={state.option1} />\\n      <DropdownItem value={state.value2} options={state.option2} />\\n    </DropdownMenu>\\n  )\\n}\\n```\\n\\n### 向上展开\\n\\n```jsx\\nfunction Demo() {\\n  const [state, setState] = react.useState({\\n    option1: [\\n      {\\n        text: '全部商品',\\n        value: 0,\\n      },\\n      {\\n        text: '新款商品',\\n        value: 1,\\n      },\\n    ],\\n    option2: [\\n      {\\n        text: '默认排序',\\n        value: 'a',\\n      },\\n      {\\n        text: '好评排序',\\n        value: 'b',\\n      },\\n    ],\\n    value1: 0,\\n    value2: 'a',\\n  })\\n  return (\\n    <DropdownMenu direction=\\\"up\\\">\\n      <DropdownItem value={state.value1} options={state.option1} />\\n      <DropdownItem value={state.value2} options={state.option2} />\\n    </DropdownMenu>\\n  )\\n}\\n```\\n\\n### DropdownMenuProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/dropdown-menu.d.ts)\\n\\n| 参数                | 说明                           | 类型                                              | 默认值 | 必填    |\\n| ------------------- | ------------------------------ | ------------------------------------------------- | ------ | ------- |\\n| activeColor         | 选中选项后颜色                 | _&nbsp;&nbsp;string<br/>_                         | -      | `false` |\\n| overlay             | 是否展示蒙层                   | _&nbsp;&nbsp;boolean<br/>_                        | -      | `false` |\\n| zIndex              | 弹出层 zIndex                  | _&nbsp;&nbsp;number<br/>_                         | -      | `false` |\\n| duration            | 弹出层执行时间                 | _&nbsp;&nbsp;number<br/>_                         | -      | `false` |\\n| direction           | 弹出层执行方向                 | _&nbsp;&nbsp;\\\"down\\\"&nbsp;&brvbar;&nbsp;\\\"up\\\"<br/>_ | -      | `false` |\\n| closeOnClickOverlay | 点击蒙层是否关闭弹出层         | _&nbsp;&nbsp;boolean<br/>_                        | -      | `false` |\\n| closeOnClickOutside | 是否在点击外部 menu 后关闭菜单 | _&nbsp;&nbsp;boolean<br/>_                        | -      | `false` |\\n| children            | 子元素,须为 DropdownMenuItem   | _&nbsp;&nbsp;React.ReactNode<br/>_                | -      | `true`  |\\n\\n### DropdownItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/dropdown-menu.d.ts)\\n\\n| 参数       | 说明                 | 类型                                                                                 | 默认值 | 必填    |\\n| ---------- | -------------------- | ------------------------------------------------------------------------------------ | ------ | ------- |\\n| value      | 对应菜单选项的值     | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                  | -      | `false` |\\n| title      | 未选择时候的按钮标题 | _&nbsp;&nbsp;ReactNode<br/>_                                                         | -      | `false` |\\n| disabled   | 是否禁用             | _&nbsp;&nbsp;boolean<br/>_                                                           | -      | `false` |\\n| titleClass | 标题元素的 class     | _&nbsp;&nbsp;string<br/>_                                                            | -      | `false` |\\n| options    | 所有选项             | _&nbsp;&nbsp;Array<DropdownMenuOption><br/>_                                         | -      | `true`  |\\n| popupStyle | 弹出层的样式         | _&nbsp;&nbsp;React.CSSProperties<br/>_                                               | -      | `false` |\\n| onOpen     | 展开下拉项触发       | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                              | -      | `false` |\\n| onOpened   | 展开下拉项完成时触发 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                              | -      | `false` |\\n| onClose    | 关闭下拉项触发       | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                              | -      | `false` |\\n| onClosed   | 展开下拉项完成触发   | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                              | -      | `false` |\\n| onChange   | 点击选项触发         | _&nbsp;&nbsp;(value?:&nbsp;number&nbsp;&brvbar;&nbsp;string)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| children   | 传入的子元素         | _&nbsp;&nbsp;React.ReactNode&nbsp;&brvbar;&nbsp;React.ReactNode[]<br/>_              | -      | `false` |\\n\\n### 菜单下拉选项 DropdownMenuOption [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/dropdown-menu.d.ts)\\n\\n| 参数  | 说明         | 类型                                                |\\n| ----- | ------------ | --------------------------------------------------- |\\n| text  | 展示的 label | _&nbsp;&nbsp;ReactNode<br/>_                        |\\n| value | 对应的数值   | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ |\\n| icon  | 前缀图标     | _&nbsp;&nbsp;string<br/>_                           |\\n\\n### 组件实例 [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/dropdown-menu.d.ts)\\n\\n通过 ref 获取到的方法如下\\n| 方法 | 说明 | 类型 |\\n| --- | --- | --- |\\n| toggle | 控制展开/收起菜单栏，传入参数 show 是否展开，options.immediate 是否不需要动画 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;show?:&nbsp;boolean,<br/>&nbsp;&nbsp;&nbsp;&nbsp;options?:&nbsp;{&nbsp;immediate:&nbsp;boolean&nbsp;}<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n\";","export default \"# Loading 加载\\n\\n### 介绍\\n\\n加载图标，用于表示加载中的过渡状态。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Loading } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 加载类型\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      <Loading />\\n      <Loading type=\\\"spinner\\\" />\\n    </>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      <Loading color=\\\"#1989fa\\\" />\\n      <Loading type=\\\"spinner\\\" color=\\\"#1989fa\\\" />\\n    </>\\n  )\\n}\\n```\\n\\n### 加载文案\\n\\n```jsx\\nfunction Demo() {\\n  return <Loading size=\\\"24px\\\">加载中...</Loading>\\n}\\n```\\n\\n### 垂直排列\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Loading size=\\\"24px\\\" vertical>\\n      加载中...\\n    </Loading>\\n  )\\n}\\n```\\n\\n### LoadingProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/loading.d.ts)\\n\\n| 参数     | 说明 | 类型                                                       | 默认值 | 必填    |\\n| -------- | ---- | ---------------------------------------------------------- | ------ | ------- |\\n| color    | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| vertical | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| type     | -    | _&nbsp;&nbsp;\\\"spinner\\\"&nbsp;&brvbar;&nbsp;\\\"circular\\\"<br/>_ | -      | `false` |\\n| size     | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_        | -      | `false` |\\n| textSize | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_        | -      | `false` |\\n| children | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                         | -      | `false` |\\n\";","export default \"# Notify 消息提示\\n\\n### 介绍\\n\\n在页面顶部展示消息提示，支持函数调用和组件调用两种方式。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Notify } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```js\\nimport { Notify } from 'vantui'\\n```\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => Notify.show('通知内容')\\n\\n  return (\\n    <View>\\n      {/*  在页面内添加对应的节点  */}\\n      <Button onClick={show} type=\\\"danger\\\">\\n        基础用法\\n      </Button>\\n      <Notify id=\\\"vanNotify\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 通知类型\\n\\n支持`primary`、`success`、`warning`、`danger`四种通知类型，默认为`danger`。\\n\\n```jsx\\nfunction Demo() {\\n  const primaryShow = () => {\\n    Notify.show({\\n      message: '-----通知内容-----',\\n      type: 'primary',\\n    })\\n  }\\n\\n  const successShow = () => {\\n    Notify.show({\\n      message: '-----通知内容-----',\\n      type: 'success',\\n    })\\n  }\\n\\n  const dangerShow = () => {\\n    Notify.show({\\n      message: '-----通知内容-----',\\n      type: 'danger',\\n    })\\n  }\\n\\n  const warningShow = () => {\\n    Notify.show({\\n      message: '-----通知内容-----',\\n      type: 'warning',\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Button onClick={primaryShow} type=\\\"info\\\">\\n        主要通知\\n      </Button>\\n      <Button onClick={successShow} type=\\\"primary\\\">\\n        成功通知\\n      </Button>\\n      <Button onClick={dangerShow} type=\\\"danger\\\">\\n        危险通知\\n      </Button>\\n      <Button onClick={warningShow} type=\\\"warning\\\">\\n        警告用法\\n      </Button>\\n      <Notify id=\\\"vanNotify\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义通知\\n\\n自定义消息通知的颜色和展示时长。\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Notify.show({\\n      message: '自定义颜色',\\n      color: '#ad0000',\\n      background: '#ffe1e1',\\n      duration: 10000,\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Button onClick={show} type=\\\"primary\\\">\\n        自定义颜色和时长\\n      </Button>\\n      <Notify id=\\\"vanNotify\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义选择器\\n\\n```jsx\\nfunction Demo() {\\n  const show = () => {\\n    Notify.show({\\n      message: '自定义节点选择器',\\n      duration: 1000,\\n      selector: '#customSelector',\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Button onClick={show} type=\\\"primary\\\">\\n        自定义选择器\\n      </Button>\\n      <Notify id=\\\"customSelector\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### NotifyProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/notify.d.ts)\\n\\n| 参数             | 说明 | 类型                                                  | 默认值 | 必填    |\\n| ---------------- | ---- | ----------------------------------------------------- | ------ | ------- |\\n| selector         | -    | _&nbsp;&nbsp;string<br/>_                             | -      | `false` |\\n| message          | -    | _&nbsp;&nbsp;ReactNode<br/>_                          | -      | `false` |\\n| background       | -    | _&nbsp;&nbsp;string<br/>_                             | -      | `false` |\\n| type             | -    | _&nbsp;&nbsp;string<br/>_                             | -      | `false` |\\n| color            | -    | _&nbsp;&nbsp;string<br/>_                             | -      | `false` |\\n| duration         | -    | _&nbsp;&nbsp;number<br/>_                             | -      | `false` |\\n| zIndex           | -    | _&nbsp;&nbsp;number<br/>_                             | -      | `false` |\\n| safeAreaInsetTop | -    | _&nbsp;&nbsp;boolean<br/>_                            | -      | `false` |\\n| top              | -    | _&nbsp;&nbsp;number<br/>_                             | -      | `false` |\\n| id               | -    | _&nbsp;&nbsp;string<br/>_                             | -      | `false` |\\n| onClick          | -    | _&nbsp;&nbsp;(data:&nbsp;any)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onOpened         | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_               | -      | `false` |\\n| onClose          | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_               | -      | `false` |\\n\";","export default \"# Overlay 遮罩层\\n\\n### 介绍\\n\\n创建一个遮罩层，用于强调特定的页面元素，并阻止用户进行其他操作。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Overlay } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        显示遮罩层\\n      </Button>\\n      <Overlay show={show} onClick={() => setShow(false)} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 嵌入内容\\n\\n通过默认插槽可以在遮罩层上嵌入任意内容。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Button type=\\\"primary\\\" onClick={() => setShow(true)}>\\n        嵌入内容\\n      </Button>\\n      <Overlay show={show} onClick={() => setShow(false)}>\\n        <View class=\\\"wrapper\\\">\\n          <View class=\\\"block\\\" />\\n        </View>\\n      </Overlay>\\n    </View>\\n  )\\n}\\n```\\n\\n### OverlayProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/overlay.d.ts)\\n\\n| 参数       | 说明 | 类型                                                                                                                                                                                                                                                                                                                                                                                                               | 默认值 | 必填    |\\n| ---------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| show       | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                                                                                         | -      | `false` |\\n| lockScroll | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                                                                                                                                         | -      | `false` |\\n| zIndex     | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                                                                                                                                          | -      | `false` |\\n| duration   | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enter:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leave:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>_ | -      | `false` |\\n| children   | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                                                                                                                                       | -      | `false` |\\n\";","export default \"# ShareSheet 分享面板\\n\\n### 介绍\\n\\n底部弹起的分享面板，用于展示各分享渠道对应的操作按钮，不含具体的分享逻辑。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { ShareSheet } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n分享面板通过 `options` 属性来定义分享选项，数组的每一项是一个对象，对象格式见文档下方表格。\\n\\n```jsx\\nconst options = [\\n  {\\n    name: '微信',\\n    icon: 'wechat',\\n    openType: 'share',\\n  },\\n  {\\n    name: '微博',\\n    icon: 'weibo',\\n  },\\n  {\\n    name: '复制链接',\\n    icon: 'link',\\n  },\\n  {\\n    name: '分享海报',\\n    icon: 'poster',\\n  },\\n  {\\n    name: '二维码',\\n    icon: 'qrcode',\\n  },\\n]\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"显示分享面板\\\" onClick={() => setShow(true)} />\\n      <ShareSheet\\n        show={show}\\n        title=\\\"立即分享给好友\\\"\\n        options={options}\\n        onSelect={(e) => Toast.show(e.detail.name)}\\n        onClose={() => setShow(false)}\\n      />\\n      <Toast />\\n    </View>\\n  )\\n}\\n```\\n\\n### 展示多行选项\\n\\n当分享选项的数量较多时，可以将 `options` 定义为数组嵌套的格式，每个子数组会作为一行选项展示。\\n\\n```jsx\\nconst options = [\\n  [\\n    {\\n      name: '微信',\\n      icon: 'wechat',\\n    },\\n    {\\n      name: '微博',\\n      icon: 'weibo',\\n    },\\n    {\\n      name: 'QQ',\\n      icon: 'qq',\\n    },\\n  ],\\n  [\\n    {\\n      name: '复制链接',\\n      icon: 'link',\\n    },\\n    {\\n      name: '分享海报',\\n      icon: 'poster',\\n    },\\n    {\\n      name: '二维码',\\n      icon: 'qrcode',\\n    },\\n  ],\\n]\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"显示分享面板\\\" onClick={() => setShow(true)} />\\n      <ShareSheet\\n        show={show}\\n        title=\\\"立即分享给好友\\\"\\n        options={options}\\n        onSelect={(e) => Toast.show(e.detail.name)}\\n        onClose={() => setShow(false)}\\n      />\\n      <Toast />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义图标\\n\\n除了使用内置的几种图标外，可以直接在 `icon` 中传入图片 URL 来使用自定义的图标。\\n\\n```jsx\\nconst options = [\\n  {\\n    name: 'URL图标1',\\n    icon: 'https://img.yzcdn.cn/vant/custom-icon-fire.png',\\n  },\\n  {\\n    name: 'URL图标2',\\n    icon: 'https://img.yzcdn.cn/vant/custom-icon-light.png',\\n  },\\n]\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"显示分享面板\\\" onClick={() => setShow(true)} />\\n      <ShareSheet\\n        show={show}\\n        title=\\\"立即分享给好友\\\"\\n        options={options}\\n        onSelect={(e) => Toast.show(e.detail.name)}\\n        onClose={() => setShow(false)}\\n      />\\n      <Toast />\\n    </View>\\n  )\\n}\\n```\\n\\n### 展示描述信息\\n\\n通过 `description` 属性可以设置标题下方的描述文字, 在 `options` 内设置 `description` 属性可以添加分享选项描述。\\n\\n```jsx\\nconst options = [\\n  {\\n    name: '微信',\\n    icon: 'wechat',\\n  },\\n  {\\n    name: '微博',\\n    icon: 'weibo',\\n  },\\n]\\nfunction Demo() {\\n  const [show, setShow] = react.useState(false)\\n  return (\\n    <View>\\n      <Cell title=\\\"显示分享面板\\\" onClick={() => setShow(true)} />\\n      <ShareSheet\\n        show={show}\\n        description=\\\"描述信息......\\\"\\n        title=\\\"立即分享给好友\\\"\\n        options={options}\\n        onClose={() => setShow(false)}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### ShareSheetOptionItem [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/share-sheet.d.ts)\\n\\n[object Object]\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| name | - | _&nbsp;&nbsp;string<br/>_ |\\n| icon | - | _&nbsp;&nbsp;string<br/>_ |\\n| description | - | _&nbsp;&nbsp;string<br/>_ |\\n| openType | - | _&nbsp;&nbsp;string<br/>_ |\\n\\n### ShareSheetOptionItem [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/share-sheet.d.ts)\\n\\n| 参数        | 说明 | 类型                      |\\n| ----------- | ---- | ------------------------- |\\n| name        | -    | _&nbsp;&nbsp;string<br/>_ |\\n| icon        | -    | _&nbsp;&nbsp;string<br/>_ |\\n| description | -    | _&nbsp;&nbsp;string<br/>_ |\\n| openType    | -    | _&nbsp;&nbsp;string<br/>_ |\\n\\n### ShareSheetOption [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/share-sheet.d.ts)\\n\\n| 参数       | 说明 | 类型                                                                                                                                                                   |\\n| ---------- | ---- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| showBorder | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                             |\\n| options    | -    | _&nbsp;&nbsp;ShareSheetOptionItem[]<br/>_                                                                                                                              |\\n| onSelect   | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;option:&nbsp;ShareSheetOptionItem,<br/>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ |\\n\\n### ShareSheetProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/share-sheet.d.ts)\\n\\n| 参数                | 说明 | 类型                                                                                                                                                         | 默认值 | 必填    |\\n| ------------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| show                | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                   | -      | `false` |\\n| overlayStyle        | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                    | -      | `false` |\\n| zIndex              | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                    | -      | `false` |\\n| title               | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                    | -      | `false` |\\n| overlay             | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                   | -      | `false` |\\n| safeAreaInsetBottom | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                   | -      | `false` |\\n| closeOnClickOverlay | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                   | -      | `false` |\\n| duration            | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                          | -      | `false` |\\n| onClickOverlay      | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                      | -      | `false` |\\n| onCancel            | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                      | -      | `false` |\\n| onSelect            | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;ShareSheetOptionItem<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_                         | -      | `false` |\\n| onClose             | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                                                      | -      | `false` |\\n| renderTitle         | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                 | -      | `false` |\\n| renderDescription   | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                 | -      | `false` |\\n| cancelText          | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                    | -      | `false` |\\n| description         | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                    | -      | `false` |\\n| options             | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;ShareSheetOptionItem[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;ShareSheetOptionItem[][]<br/>_ | -      | `false` |\\n\";","export default \"# SwipeCell 滑动单元格\\n\\n### 介绍\\n\\n可以左右滑动来展示操作按钮的单元格组件。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { SwipeCell } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法 (不流畅待修复)\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <SwipeCell\\n      rightWidth={65}\\n      leftWidth={65}\\n      renderLeft={<Button>选择</Button>}\\n      renderRight={<Button>删除</Button>}\\n    >\\n      <CellGroup>\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n      </CellGroup>\\n    </SwipeCell>\\n  )\\n}\\n```\\n\\n### 异步关闭\\n\\n当开启`asyncClose`时， 通过绑定`close`事件，可以自定义两侧滑动内容点击时的关闭行为。\\n\\n```jsx\\nfunction Demo() {\\n  const it = react.useRef()\\n  const closeAction = () => {\\n    setTimeout(() => {\\n      it.current.close()\\n    }, 2000)\\n  }\\n\\n  return (\\n    <SwipeCell\\n      ref={it}\\n      rightWidth={65}\\n      leftWidth={65}\\n      asyncClose\\n      onClose={closeAction}\\n      renderLeft={<Button>选择</Button>}\\n      renderRight={<Button>删除</Button>}\\n    >\\n      <CellGroup>\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n      </CellGroup>\\n    </SwipeCell>\\n  )\\n}\\n```\\n\\n### 主动打开\\n\\n```jsx\\nfunction Demo() {\\n  const it = react.useRef()\\n\\n  react.useEffect(() => {\\n    it.current.open()\\n  }, [])\\n\\n  return (\\n    <SwipeCell\\n      ref={it}\\n      rightWidth={65}\\n      leftWidth={65}\\n      asyncClose\\n      renderLeft={<Button>选择</Button>}\\n      renderRight={<Button>删除</Button>}\\n    >\\n      <CellGroup>\\n        <Cell title=\\\"单元格\\\" value=\\\"内容\\\" />\\n      </CellGroup>\\n    </SwipeCell>\\n  )\\n}\\n```\\n\\n### SwipeCellProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/swipe-cell.d.ts)\\n\\n| 参数         | 说明 | 类型                                                                                                                                | 默认值 | 必填    |\\n| ------------ | ---- | ----------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| disabled     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                          | -      | `false` |\\n| leftWidth    | -    | _&nbsp;&nbsp;number<br/>_                                                                                                           | -      | `false` |\\n| rightWidth   | -    | _&nbsp;&nbsp;number<br/>_                                                                                                           | -      | `false` |\\n| asyncClose   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                          | -      | `false` |\\n| name         | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                 | -      | `false` |\\n| catchMove    | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                          | -      | `false` |\\n| wrapperStyle | -    | _&nbsp;&nbsp;React.CSSProperties<br/>_                                                                                              | -      | `false` |\\n| onOpen       | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent&nbsp;&&nbsp;SwipeCellOpen)&nbsp;=>&nbsp;void<br/>_                                                | -      | `false` |\\n| onClick      | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;e:&nbsp;ITouchEvent&nbsp;&&nbsp;SwipeCellClick<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onClose      | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;e:&nbsp;ITouchEvent&nbsp;&&nbsp;SwipeCellClose<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| renderLeft   | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                  | -      | `false` |\\n| renderRight  | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                  | -      | `false` |\\n| children     | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                  | -      | `false` |\\n\\n### ISwiperCellInstance [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/swipe-cell.d.ts)\\n\\n| 方法  | 说明 | 类型                                                                                    |\\n| ----- | ---- | --------------------------------------------------------------------------------------- |\\n| open  | -    | _&nbsp;&nbsp;(position:&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\")&nbsp;=>&nbsp;void<br/>_ |\\n| close | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                 |\\n\";","export default \"# Table 表格\\n\\n### 介绍\\n\\n简版的表格组件，支持自定义样式、自定义排序、服务端排序、固定列等功能\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Table } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nconst columns = [\\n  {\\n    title: '姓名',\\n    dataIndex: 'name',\\n    fixed: 'left',\\n    render: (val) => <View style={{ color: '#2196F3' }}>{val}</View>,\\n  },\\n  {\\n    title: '年龄',\\n    dataIndex: 'age',\\n    align: 'center',\\n    sort: true,\\n  },\\n  {\\n    title: '账户',\\n    dataIndex: 'account',\\n    sort: true,\\n  },\\n  {\\n    title: '住址',\\n    dataIndex: 'address',\\n  },\\n  {\\n    title: '爱好',\\n    dataIndex: 'hobby',\\n  },\\n]\\nfunction Demo() {\\n  const [state, changeState] = react.useState({\\n    dataSource: [],\\n    loading: false,\\n  })\\n\\n  const setState = (stateNew) => {\\n    changeState({\\n      ...state,\\n      ...stateNew,\\n    })\\n  }\\n\\n  react.useEffect(() => {\\n    setState({ loading: true })\\n    setTimeout(() => {\\n      setState({\\n        loading: false,\\n        dataSource: [\\n          {\\n            key: '1',\\n            name: '胡彦斌',\\n            age: 37,\\n            account: 20000,\\n            address: '西湖区湖底公园1号',\\n            hobby: '唱歌跳舞唱歌跳舞',\\n          },\\n          {\\n            key: '2',\\n            name: '吴亦凡',\\n            age: 32,\\n            account: 50000,\\n            address: '朝阳区派出所',\\n            hobby: '嗨嗨啊嗨嗨嗨啊嗨',\\n          },\\n          {\\n            key: '36',\\n            name: '王宝强',\\n            age: 31,\\n            account: 40000,\\n            address: '嘟嘟嘟嘟一号',\\n            width: 200,\\n            hobby: '休息♨️休息♨️休息♨️休息♨️休息♨️',\\n          },\\n        ],\\n      })\\n    }, 2000)\\n  }, [])\\n\\n  const sortAction = (col) => {\\n    const { sortOrder, dataIndex } = col\\n    const { dataSource } = state\\n    if (sortOrder !== 'descend') {\\n      dataSource.sort(function (a, b) {\\n        return a[dataIndex] - b[dataIndex]\\n      })\\n    } else {\\n      dataSource.sort(function (a, b) {\\n        return b[dataIndex] - a[dataIndex]\\n      })\\n    }\\n\\n    setState({\\n      dataSource,\\n    })\\n  }\\n  return (\\n    <Table\\n      columns={columns}\\n      dataSource={state.dataSource}\\n      sortChange={sortAction}\\n      loading={state.loading}\\n    />\\n  )\\n}\\n```\\n\\n### ITableProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/table.d.ts)\\n\\n| 参数           | 说明                                       | 类型                                                                                                                                                                                                                                     | 默认值     | 必填    |\\n| -------------- | ------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- | ------- |\\n| columns        | 表格列配置描述                             | _&nbsp;&nbsp;IColumns[]<br/>_                                                                                                                                                                                                            | -          | `true`  |\\n| dataSource     | 数据源                                     | _&nbsp;&nbsp;Record<string,&nbsp;any>[]<br/>_                                                                                                                                                                                            | -          | `true`  |\\n| rowKey         | 表哥行 key 的取值                          | _&nbsp;&nbsp;string&nbsp;//&nbsp;表格行&nbsp;key&nbsp;的取值<br/>_                                                                                                                                                                       | -          | `true`  |\\n| className      | 最外层包裹节点 css 类名                    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                | -          | `false` |\\n| style          | 最外层包裹节点内联样式                     | _&nbsp;&nbsp;React.CSSProperties<br/>_                                                                                                                                                                                                   | -          | `false` |\\n| colStyle       | 单元格统一样式                             | _&nbsp;&nbsp;React.CSSProperties<br/>_                                                                                                                                                                                                   | -          | `false` |\\n| colClassName   | 单元格统一类名                             | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                | -          | `false` |\\n| rowStyle       | 行统一样式                                 | _&nbsp;&nbsp;React.CSSProperties<br/>_                                                                                                                                                                                                   | -          | `false` |\\n| rowClassName   | 表格行 css 类名                            | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                | -          | `false` |\\n| titleStyle     | 统一设置表头样式                           | _&nbsp;&nbsp;React.CSSProperties<br/>_                                                                                                                                                                                                   | -          | `false` |\\n| titleClassName | 统一设置表头单元格 css 类名                | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                | -          | `false` |\\n| loading        | 是否加载中                                 | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                               | false      | `false` |\\n| sortChange     | 排序变化                                   | _&nbsp;&nbsp;(columns:&nbsp;IColumns)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                            | () => void | `false` |\\n| placeholder    | 数据为空的时候的占位字符                   | _&nbsp;&nbsp;React.ReactNode<br/>_                                                                                                                                                                                                       | '--'       | `false` |\\n| scroll         | 表格是否可滚动，也可以指定滚动区域的宽、高 | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;x?:&nbsp;number&nbsp;&brvbar;&nbsp;string&nbsp;&brvbar;&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;y?:&nbsp;number&nbsp;&brvbar;&nbsp;string&nbsp;&brvbar;&nbsp;boolean<br/>&nbsp;&nbsp;}<br/>_ | -          | `false` |\\n\\n### IColumns [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/table.d.ts)\\n\\n表格列配置描述\\n| 参数 | 说明 | 类型 |\\n| --- | --- | --- |\\n| title | 标题 | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;JSX.Element<br/>_ |\\n| dataIndex | 列数据在数据项中对应的路径 | _&nbsp;&nbsp;string<br/>_ |\\n| key | React 组件 key，可忽略 | _&nbsp;&nbsp;string<br/>_ |\\n| align | 设置该列文本对齐方式 | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"&nbsp;&brvbar;&nbsp;\\\"center\\\"<br/>_ |\\n| style | 该列单元格内联样式 | _&nbsp;&nbsp;React.CSSProperties<br/>_ |\\n| titleStyle | 该列表头内联样式 | _&nbsp;&nbsp;React.CSSProperties<br/>_ |\\n| className | 该列单元格 css 类名 | _&nbsp;&nbsp;string<br/>_ |\\n| titleClassName | 设置该列表头单元格 css 类名 | _&nbsp;&nbsp;string<br/>_ |\\n| render | 自定义渲染函数 | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;text?:&nbsp;any,<br/>&nbsp;&nbsp;&nbsp;&nbsp;record?:&nbsp;Record<string,&nbsp;any>,<br/>&nbsp;&nbsp;&nbsp;&nbsp;index?:&nbsp;number<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;JSX.Element&nbsp;&brvbar;&nbsp;string<br/>_ |\\n| width | 列宽，单位 px | _&nbsp;&nbsp;number<br/>_ |\\n| sort | 表头是否显示排序按钮 | _&nbsp;&nbsp;boolean<br/>_ |\\n| sortOrder | 排序的受控属性 | _&nbsp;&nbsp;\\\"ascend\\\"&nbsp;&brvbar;&nbsp;\\\"descend\\\"&nbsp;&brvbar;&nbsp;undefined<br/>_ |\\n| fixed | 固定列 | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"<br/>_ |\\n| expandable | 该列是否启用点击展开收起功能，默认 true | _&nbsp;&nbsp;boolean<br/>_ |\\n\";","export default \"# Circle 环形进度条\\n\\n### 介绍\\n\\n圆环形的进度条组件，支持进度渐变动画。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Circle } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n`value`属性表示进度条的目标进度。\\n\\n```jsx\\nfunction Demo() {\\n  return <Circle value={30} text=\\\"text\\\" />\\n}\\n```\\n\\n### 样式定制\\n\\n- 通过`strokeWidth`属性来控制进度条宽度。\\n- 通过`color`属性来控制进度条颜色，`layerColor`属性来控制轨道颜色。\\n- `color`属性支持传入对象格式来定义渐变色。\\n- 通过`size`属性设置圆环直径。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(50)\\n  return (\\n    <View>\\n      <Circle value={value} strokeWidth=\\\"6\\\" text=\\\"宽度定制\\\" />\\n      <Circle\\n        value={value}\\n        layerColor=\\\"#eeeeee\\\"\\n        color=\\\"#ee0a24\\\"\\n        text=\\\"颜色定制\\\"\\n      />\\n      <Circle\\n        type=\\\"2d\\\"\\n        value={value}\\n        wait\\n        solve\\n        color={{\\n          '0%': '#ffd01e',\\n          '100%': '#ee0a24',\\n        }}\\n        text=\\\"渐变色\\\"\\n      />\\n      <Circle value={value} size=\\\"120\\\" text=\\\"大小定制\\\" />\\n\\n      <Button onClick={() => setValue(value + 10)}>增加</Button>\\n    </View>\\n  )\\n}\\n```\\n\\n### 逆时针方向\\n\\n将`clockwise`设置为`false`，进度会从逆时针方向开始。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(50)\\n\\n  return (\\n    <>\\n      <Circle value={value} color=\\\"#07c160\\\" clockwise={false} text=\\\"逆时针\\\" />\\n      <Button onClick={() => setValue(value + 10)}>增加</Button>\\n    </>\\n  )\\n}\\n```\\n\\n### CircleProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/circle.d.ts)\\n\\n| 参数        | 说明 | 类型                                                                     | 默认值 | 必填    |\\n| ----------- | ---- | ------------------------------------------------------------------------ | ------ | ------- |\\n| text        | -    | _&nbsp;&nbsp;ReactNode<br/>_                                             | -      | `false` |\\n| lineCap     | -    | _&nbsp;&nbsp;string<br/>_                                                | -      | `false` |\\n| value       | -    | _&nbsp;&nbsp;number<br/>_                                                | -      | `false` |\\n| speed       | -    | _&nbsp;&nbsp;number<br/>_                                                | -      | `false` |\\n| size        | -    | _&nbsp;&nbsp;number<br/>_                                                | -      | `false` |\\n| fill        | -    | _&nbsp;&nbsp;string<br/>_                                                | -      | `false` |\\n| layerColor  | -    | _&nbsp;&nbsp;string<br/>_                                                | -      | `false` |\\n| color       | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;Record<string,&nbsp;string><br/>_ | -      | `false` |\\n| type        | -    | _&nbsp;&nbsp;string<br/>_                                                | -      | `false` |\\n| strokeWidth | -    | _&nbsp;&nbsp;number<br/>_                                                | -      | `false` |\\n| clockwise   | -    | _&nbsp;&nbsp;boolean<br/>_                                               | -      | `false` |\\n| children    | -    | _&nbsp;&nbsp;ReactNode<br/>_                                             | -      | `false` |\\n\";","export default \"# Collapse 折叠面板\\n\\n### 介绍\\n\\n将一组内容放置在多个折叠面板中，点击面板的标题可以展开或收缩其内容。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Collapse, CollapseItem } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`value`控制展开的面板列表，`activeNames`为数组格式。\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['1'])\\n\\n  return (\\n    <Collapse value={values} onChange={(e) => setValues(e.detail)}>\\n      <CollapseItem title=\\\"有赞微商城\\\" name=\\\"1\\\">\\n        提供多样店铺模板，快速搭建网上商城\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞零售\\\" name=\\\"2\\\">\\n        网店吸粉获客、会员分层营销、一机多种收款，告别经营低效和客户流失\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞美业\\\" name=\\\"3\\\" disabled>\\n        线上拓客，随时预约，贴心顺手的开单收银\\n      </CollapseItem>\\n    </Collapse>\\n  )\\n}\\n```\\n\\n### 手风琴\\n\\n通过`accordion`可以设置为手风琴模式，最多展开一个面板，此时`activeName`为字符串格式。\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['1'])\\n\\n  return (\\n    <Collapse accordion value={values} onChange={(e) => setValues(e.detail)}>\\n      <CollapseItem title=\\\"有赞微商城\\\" name=\\\"1\\\">\\n        提供多样店铺模板，快速搭建网上商城\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞零售\\\" name=\\\"2\\\">\\n        网店吸粉获客、会员分层营销、一机多种收款，告别经营低效和客户流失\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞美业\\\" name=\\\"3\\\">\\n        线上拓客，随时预约，贴心顺手的开单收银\\n      </CollapseItem>\\n    </Collapse>\\n  )\\n}\\n```\\n\\n### 事件监听\\n\\n`vanCollapse` 提供了 `change`, `open` 和 `close` 事件。`change` 事件在面板切换时触发，`open` 事件在面板展开时触发，`close` 事件在面板关闭时触发。\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['1'])\\n\\n  return (\\n    <>\\n      <Collapse\\n        value={values}\\n        onChange={(e) => setValues(e.detail)}\\n        onOpen={(e) => Toast.show(`打开${e.detail}`)}\\n        onClose={(e) => Toast.show(`关闭${e.detail}`)}\\n      >\\n        <CollapseItem title=\\\"有赞微商城\\\" name=\\\"1\\\">\\n          提供多样店铺模板，快速搭建网上商城\\n        </CollapseItem>\\n        <CollapseItem title=\\\"有赞零售\\\" name=\\\"2\\\">\\n          网店吸粉获客、会员分层营销、一机多种收款，告别经营低效和客户流失\\n        </CollapseItem>\\n        <CollapseItem title=\\\"有赞美业\\\" name=\\\"3\\\">\\n          线上拓客，随时预约，贴心顺手的开单收银\\n        </CollapseItem>\\n      </Collapse>\\n      <Toast id=\\\"collapse-mess\\\" />\\n    </>\\n  )\\n}\\n```\\n\\n### 自定义标题内容\\n\\n```jsx\\nfunction Demo() {\\n  const [values, setValues] = react.useState(['1'])\\n\\n  return (\\n    <Collapse value={values} onChange={(e) => setValues(e.detail)}>\\n      <CollapseItem\\n        renderTitle={\\n          <View>\\n            有赞微商城\\n            <Icon name=\\\"question-o\\\" />\\n          </View>\\n        }\\n        name=\\\"1\\\"\\n      >\\n        提供多样店铺模板，快速搭建网上商城\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞零售\\\" name=\\\"2\\\">\\n        网店吸粉获客、会员分层营销、一机多种收款，告别经营低效和客户流失\\n      </CollapseItem>\\n      <CollapseItem title=\\\"有赞美业\\\" name=\\\"3\\\">\\n        线上拓客，随时预约，贴心顺手的开单收银\\n      </CollapseItem>\\n    </Collapse>\\n  )\\n}\\n```\\n\\n### CollapseProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/collapse.d.ts)\\n\\n| 参数      | 说明 | 类型                                                                                 | 默认值 | 必填    |\\n| --------- | ---- | ------------------------------------------------------------------------------------ | ------ | ------- |\\n| value     | -    | _&nbsp;&nbsp;Array<string&nbsp;&brvbar;&nbsp;number>&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| accordion | -    | _&nbsp;&nbsp;boolean<br/>_                                                           | -      | `false` |\\n| border    | -    | _&nbsp;&nbsp;boolean<br/>_                                                           | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;Array<ReactNode>&nbsp;&brvbar;&nbsp;ReactNode<br/>_                     | -      | `false` |\\n| onChange  | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                        | -      | `false` |\\n| onOpen    | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                        | -      | `false` |\\n| onClose   | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_                        | -      | `false` |\\n\\n### CollapseItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/collapse.d.ts)\\n\\n| 参数            | 说明              | 类型                                                | 默认值 | 必填    |\\n| --------------- | ----------------- | --------------------------------------------------- | ------ | ------- |\\n| name            | -                 | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| title           | -                 | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| value           | -                 | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| icon            | 对应 Icon 的 name | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| label           | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| disabled        | -                 | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| clickable       | -                 | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| border          | -                 | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| isLink          | -                 | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| children        | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| renderTitle     | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| renderIcon      | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| renderRightIcon | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| renderValue     | -                 | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| size            | -                 | _&nbsp;&nbsp;\\\"large\\\"<br/>_                          | -      | `false` |\\n\";","export default \"# CountDown 倒计时\\n\\n### 介绍\\n\\n用于实时展示倒计时数值，支持毫秒精度。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { CountDown } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)。\\n\\n## 代码演示\\n\\n### 基本用法\\n\\n`time`属性表示倒计时总时长，单位为毫秒。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(30 * 60 * 60 * 1000)\\n\\n  return <CountDown time={value} />\\n}\\n```\\n\\n### 自定义格式\\n\\n通过`format`属性设置倒计时文本的内容。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(30 * 60 * 60 * 1000)\\n\\n  return <CountDown time={value} format=\\\"DD 天 HH 时 mm 分 ss 秒\\\" />\\n}\\n```\\n\\n### 毫秒级渲染\\n\\n倒计时默认每秒渲染一次，设置`millisecond`属性可以开启毫秒级渲染。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(30 * 60 * 60 * 1000)\\n\\n  return <CountDown millisecond time={value} format=\\\"HH:mm:ss:SSS\\\" />\\n}\\n```\\n\\n### 自定义样式\\n\\n通过`onChange`事件获取`timeData`对象并自行渲染，格式见下方表格。\\n\\n```jsx\\nfunction Demo() {\\n  const [value, setValue] = react.useState(30 * 60 * 60 * 1000)\\n  const [timeData, setTimeData] = react.useState({})\\n\\n  return (\\n    <CountDown time={value} onChange={(e) => setTimeData({ ...e.detail })}>\\n      <Text style={{ color: 'blue' }}>{timeData.hours}</Text>时\\n      <Text style={{ color: 'green' }}>{timeData.minutes}</Text>分\\n      <Text style={{ color: 'red' }}>{timeData.seconds}</Text>秒\\n    </CountDown>\\n  )\\n}\\n```\\n\\n### 手动控制\\n\\n通过 `ref` 选择器获取到组件实例后，可以调用`start`、`pause`、`reset`方法。\\n\\n```jsx\\nfunction Demo() {\\n  const it = react.useRef()\\n\\n  return (\\n    <View>\\n      <Toast id=\\\"controlCountDown-mess\\\" />\\n      <CountDown\\n        onChange={(e) => console.info(e)}\\n        ref={(el) => (it.current = el)}\\n        class=\\\"controlCountDown\\\"\\n        millisecond\\n        time={4000}\\n        autoStart={false}\\n        format=\\\"ss:SSS\\\"\\n        onFinish={() => Toast.show('end')}\\n      />\\n      <Grid clickable columnNum=\\\"3\\\">\\n        <GridItem\\n          text=\\\"开始\\\"\\n          icon=\\\"play-circle-o\\\"\\n          onClick={() => it.current.start()}\\n        />\\n        <GridItem\\n          text=\\\"暂停\\\"\\n          icon=\\\"pause-circle-o\\\"\\n          onClick={() => it.current.pause()}\\n        />\\n        <GridItem\\n          text=\\\"重置\\\"\\n          icon=\\\"replay\\\"\\n          onClick={() => {\\n            console.info(it)\\n            it.current.reset()\\n          }}\\n        />\\n      </Grid>\\n    </View>\\n  )\\n}\\n```\\n\\n### ICountDownRef [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/count-down.d.ts)\\n\\n| 参数  | 说明 | 类型                                    |\\n| ----- | ---- | --------------------------------------- |\\n| start | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n| pause | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n| reset | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_ |\\n\\n### ITimeData [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/count-down.d.ts)\\n\\n| 参数         | 说明 | 类型                      |\\n| ------------ | ---- | ------------------------- |\\n| days         | -    | _&nbsp;&nbsp;number<br/>_ |\\n| hours        | -    | _&nbsp;&nbsp;number<br/>_ |\\n| minutes      | -    | _&nbsp;&nbsp;number<br/>_ |\\n| seconds      | -    | _&nbsp;&nbsp;number<br/>_ |\\n| milliseconds | -    | _&nbsp;&nbsp;number<br/>_ |\\n\\n### CountDownProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/count-down.d.ts)\\n\\n| 参数        | 说明 | 类型                                                                                                                                | 默认值 | 必填    |\\n| ----------- | ---- | ----------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| millisecond | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                          | -      | `false` |\\n| time        | -    | _&nbsp;&nbsp;number<br/>_                                                                                                           | -      | `false` |\\n| format      | -    | _&nbsp;&nbsp;string<br/>_                                                                                                           | -      | `false` |\\n| autoStart   | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                          | -      | `false` |\\n| children    | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                        | -      | `false` |\\n| onChange    | -    | _&nbsp;&nbsp;(timeData:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;ITimeData<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_        | -      | `false` |\\n| onFinish    | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                                                                                             | -      | `false` |\\n| ref         | -    | _&nbsp;&nbsp;React.MutableRefObject<<br/>&nbsp;&nbsp;&nbsp;&nbsp;ICountDownRef&nbsp;&brvbar;&nbsp;undefined<br/>&nbsp;&nbsp;><br/>_ | -      | `false` |\\n\";","export default \"# Divider 分割线\\n\\n### 介绍\\n\\n用于将内容分隔为多个区域。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Divider } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)。\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider />\\n    </View>\\n  )\\n}\\n```\\n\\n### 使用 hairline\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider hairline={true} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 虚线\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider dashed={true} />\\n    </View>\\n  )\\n}\\n```\\n\\n### 文本位置\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider contentPosition=\\\"center\\\">文本</Divider>\\n      <Divider contentPosition=\\\"left\\\">文本</Divider>\\n      <Divider contentPosition=\\\"right\\\">文本</Divider>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义属性\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider contentPosition=\\\"center\\\" textColor=\\\"#1989fa\\\">\\n        文本颜色\\n      </Divider>\\n      <Divider contentPosition=\\\"center\\\" borderColor=\\\"#1989fa\\\">\\n        border 颜色\\n      </Divider>\\n      <Divider contentPosition=\\\"center\\\" fontSize=\\\"18\\\">\\n        字体大小\\n      </Divider>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义样式\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Divider\\n        contentPosition=\\\"center\\\"\\n        style=\\\"color: #1989fa; borderColor: #1989fa; fontSize: 18px;\\\"\\n      >\\n        文本\\n      </Divider>\\n    </View>\\n  )\\n}\\n```\\n\\n### DividerProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/divider.d.ts)\\n\\n| 参数            | 说明 | 类型                                                                             | 默认值 | 必填    |\\n| --------------- | ---- | -------------------------------------------------------------------------------- | ------ | ------- |\\n| dashed          | -    | _&nbsp;&nbsp;boolean<br/>_                                                       | -      | `false` |\\n| hairline        | -    | _&nbsp;&nbsp;boolean<br/>_                                                       | -      | `false` |\\n| contentPosition | -    | _&nbsp;&nbsp;\\\"left\\\"&nbsp;&brvbar;&nbsp;\\\"center\\\"&nbsp;&brvbar;&nbsp;\\\"right\\\"<br/>_ | -      | `false` |\\n| fontSize        | -    | _&nbsp;&nbsp;string<br/>_                                                        | -      | `false` |\\n| borderColor     | -    | _&nbsp;&nbsp;string<br/>_                                                        | -      | `false` |\\n| textColor       | -    | _&nbsp;&nbsp;string<br/>_                                                        | -      | `false` |\\n| children        | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                     | -      | `false` |\\n\";","export default \"# Empty 空状态\\n\\n### 介绍\\n\\n空状态时的占位提示。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Empty } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Empty description=\\\"描述文字\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 图片类型\\n\\nEmpty 组件内置了多种占位图片类型，可以在不同业务场景下使用。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      {/*  通用错误  */}\\n      <Empty image=\\\"error\\\" description=\\\"描述文字\\\" />\\n      {/*  网络错误  */}\\n      <Empty image=\\\"network\\\" description=\\\"描述文字\\\" />\\n      {/*  搜索提示  */}\\n      <Empty image=\\\"search\\\" description=\\\"描述文字\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义图片\\n\\n需要自定义图片时，可以在 image 属性中传入任意图片 URL。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Empty\\n        class=\\\"customImage\\\"\\n        image=\\\"https://img.yzcdn.cn/vant/custom-empty-image.png\\\"\\n        description=\\\"描述文字\\\"\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 底部内容\\n\\n通过默认插槽可以在 Empty 组件的下方插入内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Empty description=\\\"描述文字\\\">\\n        <Button round={true} type=\\\"danger\\\" class=\\\"bottomButton\\\">\\n          按钮\\n        </Button>\\n      </Empty>\\n    </View>\\n  )\\n}\\n```\\n\\n### EmptyProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/empty.d.ts)\\n\\n| 参数              | 说明 | 类型                                                                                                                                                                                                                                                                                   | 默认值 | 必填    |\\n| ----------------- | ---- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| description       | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                              | -      | `false` |\\n| image             | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"error\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"search\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"default\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"network\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| children          | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                           | -      | `false` |\\n| renderImage       | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                           | -      | `false` |\\n| renderDescription | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                           | -      | `false` |\\n\";","export default \"# NoticeBar 通知栏\\n\\n### 介绍\\n\\n用于循环播放展示一组消息通知。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { NoticeBar } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <NoticeBar\\n      leftIcon=\\\"volume-o\\\"\\n      text=\\\"在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 滚动播放\\n\\n通知栏的内容长度溢出时会自动开启滚动播放，通过 `scrollable` 属性可以控制该行为。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      {/*  文字较短时，通过设置 scrollable 属性开启滚动播放  */}\\n      <NoticeBar scrollable text=\\\"技术是开发它的人的共同灵魂。\\\" />\\n      {/*  文字较长时，通过禁用 scrollable 属性关闭滚动播放  */}\\n      <NoticeBar\\n        scrollable={false}\\n        text=\\\"在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\\\"\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 多行展示\\n\\n文字较长时，可以通过设置 `wrapable` 属性来开启多行展示。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <NoticeBar\\n      wrapable={true}\\n      scrollable={false}\\n      text=\\\"在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 通知栏模式\\n\\n通知栏支持 `closeable` 和 `link` 两种模式。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      {/*  closeable 模式，在右侧显示关闭按钮  */}\\n      <NoticeBar mode=\\\"closeable\\\" text=\\\"技术是开发它的人的共同灵魂。\\\" />\\n      {/*  link 模式，在右侧显示链接箭头  */}\\n      <NoticeBar mode=\\\"link\\\" text=\\\"技术是开发它的人的共同灵魂。\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义样式\\n\\n通过 `color` 属性设置文本颜色，通过 `background` 属性设置背景色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <NoticeBar\\n      color=\\\"#1989fa\\\"\\n      background=\\\"#ecf9ff\\\"\\n      leftIcon=\\\"info-o\\\"\\n      text=\\\"技术是开发它的人的共同灵魂。\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 自定义滚动速率\\n\\n使用`speed`属性控制滚动速率。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <NoticeBar\\n      text={'技术是开发它的人的共同灵魂。技术是开发它的人的共同灵魂。'}\\n      speed={20}\\n    />\\n  )\\n}\\n```\\n\\n### NoticeBarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/notice-bar.d.ts)\\n\\n| 参数            | 说明 | 类型                                                          | 默认值 | 必填    |\\n| --------------- | ---- | ------------------------------------------------------------- | ------ | ------- |\\n| text            | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| mode            | -    | _&nbsp;&nbsp;\\\"closeable\\\"&nbsp;&brvbar;&nbsp;\\\"link\\\"<br/>_      | -      | `false` |\\n| url             | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| openType        | -    | _&nbsp;&nbsp;any<br/>_                                        | -      | `false` |\\n| delay           | -    | _&nbsp;&nbsp;number<br/>_                                     | -      | `false` |\\n| speed           | -    | _&nbsp;&nbsp;number<br/>_                                     | -      | `false` |\\n| scrollable      | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| leftIcon        | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| color           | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| backgroundColor | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| background      | -    | _&nbsp;&nbsp;string<br/>_                                     | -      | `false` |\\n| wrapable        | -    | _&nbsp;&nbsp;boolean<br/>_                                    | -      | `false` |\\n| children        | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| renderLeftIcon  | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| renderRightIcon | -    | _&nbsp;&nbsp;ReactNode<br/>_                                  | -      | `false` |\\n| onClick         | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n| onClose         | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# Progress 进度条\\n\\n### 介绍\\n\\n用于展示操作的当前进度。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Progress } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n进度条默认为蓝色，使用`percentage`属性来设置当前进度。\\n\\n```jsx\\nfunction Demo() {\\n  return <Progress percentage=\\\"50\\\" />\\n}\\n```\\n\\n### 线条粗细\\n\\n通过`strokeWidth`可以设置进度条的粗细。\\n\\n```jsx\\nfunction Demo() {\\n  return <Progress percentage=\\\"50\\\" strokeWidth=\\\"8\\\" />\\n}\\n```\\n\\n### 置灰\\n\\n设置`inactive`属性后进度条将置灰。\\n\\n```jsx\\nfunction Demo() {\\n  return <Progress inactive={true} percentage=\\\"50\\\" />\\n}\\n```\\n\\n### 样式定制\\n\\n可以使用`pivotText`属性自定义文字，`color`属性自定义进度条颜色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Progress pivotText=\\\"橙色\\\" color=\\\"#f2826a\\\" percentage=\\\"25\\\" />\\n      <Progress pivotText=\\\"红色\\\" color=\\\"#ee0a24\\\" percentage=\\\"50\\\" />\\n      <Progress\\n        percentage=\\\"75\\\"\\n        pivotText=\\\"紫色\\\"\\n        pivotColor=\\\"#7232dd\\\"\\n        color=\\\"linearGradient(to right, #be99ff, #7232dd)\\\"\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### ProgressProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/progress.d.ts)\\n\\n| 参数        | 说明 | 类型                                                | 默认值 | 必填    |\\n| ----------- | ---- | --------------------------------------------------- | ------ | ------- |\\n| inactive    | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| percentage  | -    | _&nbsp;&nbsp;number<br/>_                           | -      | `true`  |\\n| pivotText   | -    | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| pivotColor  | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| trackColor  | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| showPivot   | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| color       | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| textColor   | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| strokeWidth | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n\";","export default \"# Skeleton 骨架屏\\n\\n### 介绍\\n\\n用于在内容加载过程中展示一组占位图形。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Skeleton } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`title`属性显示标题占位图，通过`row`属性配置占位段落行数。\\n\\n```jsx\\nfunction Demo() {\\n  return <Skeleton title={true} row=\\\"3\\\" />\\n}\\n```\\n\\n### 显示头像\\n\\n通过`avatar`属性显示头像占位图。\\n\\n```jsx\\nfunction Demo() {\\n  return <Skeleton title={true} avatar={true} row=\\\"3\\\" />\\n}\\n```\\n\\n### 展示子组件\\n\\n将`loading`属性设置成`false`表示内容加载完成，此时会隐藏占位图，并显示`Skeleton`的子组件。\\n\\n```jsx\\nfunction Demo() {\\n  const [loading, setLoading] = react.useState(true)\\n  react.useEffect(() => {\\n    setTimeout(() => {\\n      setLoading(false)\\n    }, 2000)\\n  }, [])\\n\\n  return (\\n    <Skeleton title avatar row=\\\"3\\\" loading={loading}>\\n      <View>实际内容</View>\\n    </Skeleton>\\n  )\\n}\\n```\\n\\n### SkeletonProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/skeleton.d.ts)\\n\\n| 参数        | 说明 | 类型                                                   | 默认值 | 必填    |\\n| ----------- | ---- | ------------------------------------------------------ | ------ | ------- |\\n| row         | -    | _&nbsp;&nbsp;number<br/>_                              | -      | `false` |\\n| title       | -    | _&nbsp;&nbsp;boolean<br/>_                             | -      | `false` |\\n| avatar      | -    | _&nbsp;&nbsp;boolean<br/>_                             | -      | `false` |\\n| loading     | -    | _&nbsp;&nbsp;boolean<br/>_                             | -      | `false` |\\n| animate     | -    | _&nbsp;&nbsp;boolean<br/>_                             | -      | `false` |\\n| avatarSize  | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_    | -      | `false` |\\n| avatarShape | -    | _&nbsp;&nbsp;\\\"square\\\"&nbsp;&brvbar;&nbsp;\\\"round\\\"<br/>_ | -      | `false` |\\n| titleWidth  | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_    | -      | `false` |\\n| rowWidth    | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;string[]<br/>_  | -      | `false` |\\n| children    | -    | _&nbsp;&nbsp;ReactNode<br/>_                           | -      | `false` |\\n\";","export default \"# Steps 步骤条\\n\\n### 介绍\\n\\n用于展示操作流程的各个环节，让用户了解当前的操作在整体流程中的位置。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Steps } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nconst steps = [\\n  {\\n    text: '步骤一',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤二',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤三',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤四',\\n    desc: '描述信息',\\n  },\\n]\\nfunction Demo() {\\n  return <Steps steps={steps} active={2} />\\n}\\n```\\n\\n### 自定义样式\\n\\n可以通过 `activeIcon` 和 `activeColor` 属性设置激活状态下的图标和颜色。\\n\\n```jsx\\nconst steps = [\\n  {\\n    text: '步骤一',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤二',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤三',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤四',\\n    desc: '描述信息',\\n  },\\n]\\nfunction Demo() {\\n  return (\\n    <Steps steps={steps} active={1} activeIcon=\\\"success\\\" activeColor=\\\"#38f\\\" />\\n  )\\n}\\n```\\n\\n### 自定义图标\\n\\n可以通过 `inactiveIcon` 和 `activeIcon` 属性分别设置每一项的图标。\\n\\n```jsx\\nconst steps = [\\n  {\\n    text: '步骤一',\\n    desc: '描述信息',\\n    inactiveIcon: 'location-o',\\n    activeIcon: 'success',\\n  },\\n  {\\n    text: '步骤二',\\n    desc: '描述信息',\\n    inactiveIcon: 'like-o',\\n    activeIcon: 'plus',\\n  },\\n  {\\n    text: '步骤三',\\n    desc: '描述信息',\\n    inactiveIcon: 'star-o',\\n    activeIcon: 'cross',\\n  },\\n]\\nfunction Demo() {\\n  return <Steps steps={steps} active={2} />\\n}\\n```\\n\\n### 竖向步骤条\\n\\n可以通过设置`direction`属性来改变步骤条的显示方式。\\n\\n```jsx\\nconst steps = [\\n  {\\n    text: '步骤一',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤二',\\n    desc: '描述信息',\\n  },\\n  {\\n    text: '步骤三',\\n    desc: '描述信息',\\n  },\\n]\\nfunction Demo() {\\n  return (\\n    <Steps\\n      steps={steps}\\n      active={1}\\n      direction=\\\"vertical\\\"\\n      activeColor=\\\"#ee0a24\\\"\\n    />\\n  )\\n}\\n```\\n\\n### StepsProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/steps.d.ts)\\n\\n| 参数          | 说明 | 类型                                                                                                                                                                                                                                                                                             | 默认值 | 必填    |\\n| ------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| icon          | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| steps         | -    | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;index?:&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;desc:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;text:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;activeIcon?:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;inactiveIcon?:&nbsp;string<br/>&nbsp;&nbsp;}[]<br/>_ | -      | `false` |\\n| active        | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| direction     | -    | _&nbsp;&nbsp;\\\"horizontal\\\"&nbsp;&brvbar;&nbsp;\\\"vertical\\\"<br/>_                                                                                                                                                                                                                                    | -      | `false` |\\n| activeColor   | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| inactiveColor | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| activeIcon    | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| inactiveIcon  | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                        | -      | `false` |\\n| onClickStep   | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;event:&nbsp;ITouchEvent&nbsp;&&nbsp;{&nbsp;detail:&nbsp;number&nbsp;}<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_                                                                                                                                       | -      | `false` |\\n\";","export default \"# Sticky 粘性布局\\n\\n### 介绍\\n\\nSticky 组件与 CSS 中`position: sticky`属性实现的效果一致，当组件在屏幕范围内时，会按照正常的布局排列，当组件滚出屏幕范围时，始终会固定在屏幕顶部。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Sticky } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n将内容包裹在`Sticky`组件内即可。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Sticky>\\n      <Button type=\\\"primary\\\" style=\\\"margin-left: 15px\\\">\\n        基础用法\\n      </Button>\\n    </Sticky>\\n  )\\n}\\n```\\n\\n### 吸顶距离\\n\\n通过`offsetTop`属性可以设置组件在吸顶时与顶部的距离。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Sticky offsetTop={50}>\\n      <Button type=\\\"primary\\\">吸顶距离</Button>\\n    </Sticky>\\n  )\\n}\\n```\\n\\n### StickyProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/sticky.d.ts)\\n\\n| 参数      | 说明 | 类型                                                                                                                                                                                                                                                                         | 默认值 | 必填    |\\n| --------- | ---- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| zIndex    | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                    | -      | `false` |\\n| offsetTop | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                    | -      | `false` |\\n| disabled  | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                   | -      | `false` |\\n| container | -    | _&nbsp;&nbsp;()&nbsp;=>&nbsp;any<br/>_                                                                                                                                                                                                                                       | -      | `false` |\\n| scrollTop | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                    | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                 | -      | `false` |\\n| onScroll  | -    | _&nbsp;&nbsp;(data:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollTop?:&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isFixed?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n\";","export default \"# Tag 标签\\n\\n### 介绍\\n\\n用于标记关键词和概括主要内容。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Tag } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过 `type` 属性控制标签颜色，默认为灰色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag type=\\\"primary\\\">标签</Tag>\\n      <Tag type=\\\"success\\\">标签</Tag>\\n      <Tag type=\\\"danger\\\">标签</Tag>\\n      <Tag type=\\\"warning\\\">标签</Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 空心样式\\n\\n设置 `plain` 属性设置为空心样式。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag plain={true} type=\\\"primary\\\">\\n        标签\\n      </Tag>\\n      <Tag plain={true} type=\\\"success\\\">\\n        标签\\n      </Tag>\\n      <Tag plain={true} type=\\\"danger\\\">\\n        标签\\n      </Tag>\\n      <Tag plain={true} type=\\\"warning\\\">\\n        标签\\n      </Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 圆角样式\\n\\n通过 `round` 设置为圆角样式。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag round={true} type=\\\"primary\\\">\\n        标签\\n      </Tag>\\n      <Tag round={true} type=\\\"success\\\">\\n        标签\\n      </Tag>\\n      <Tag round={true} type=\\\"danger\\\">\\n        标签\\n      </Tag>\\n      <Tag round={true} type=\\\"warning\\\">\\n        标签\\n      </Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 标记样式\\n\\n通过 `mark` 设置为标记样式(半圆角)。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag mark={true} type=\\\"primary\\\">\\n        标签\\n      </Tag>\\n      <Tag mark={true} type=\\\"success\\\">\\n        标签\\n      </Tag>\\n      <Tag mark={true} type=\\\"danger\\\">\\n        标签\\n      </Tag>\\n      <Tag mark={true} type=\\\"warning\\\">\\n        标签\\n      </Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag color=\\\"#f2826a\\\">标签</Tag>\\n      <Tag color=\\\"#7232dd\\\">标签</Tag>\\n      <Tag color=\\\"#7232dd\\\" plain={true}>\\n        标签\\n      </Tag>\\n      <Tag color=\\\"#ffe1e1\\\" textColor=\\\"#ad0000\\\">\\n        标签\\n      </Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 标签大小\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tag type=\\\"danger\\\">标签</Tag>\\n      <Tag type=\\\"danger\\\" size=\\\"medium\\\">\\n        标签\\n      </Tag>\\n      <Tag type=\\\"danger\\\" size=\\\"large\\\">\\n        标签\\n      </Tag>\\n    </View>\\n  )\\n}\\n```\\n\\n### 可关闭标签\\n\\n添加 `closeable` 属性表示标签是可关闭的，关闭标签时会触发 `close` 事件，在 `close` 事件中可以执行隐藏标签的逻辑。\\n\\n```jsx\\nfunction Demo() {\\n  const [show, setShow] = react.useState({\\n    primary: true,\\n    success: true,\\n  })\\n\\n  return (\\n    <View>\\n      {show.primary && (\\n        <Tag\\n          className=\\\"demo-margin-right\\\"\\n          type=\\\"primary\\\"\\n          size=\\\"medium\\\"\\n          closeable\\n          onClose={() => setShow({ ...show, primary: false })}\\n        >\\n          标签\\n        </Tag>\\n      )}\\n      {show.success && (\\n        <Tag\\n          className=\\\"demo-margin-right\\\"\\n          type=\\\"success\\\"\\n          size=\\\"medium\\\"\\n          closeable\\n          onClose={() => setShow({ ...show, success: false })}\\n        >\\n          标签\\n        </Tag>\\n      )}\\n    </View>\\n  )\\n}\\n```\\n\\n### TagProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tag.d.ts)\\n\\n| 参数      | 说明 | 类型                                                                                                                                                                                                                                                                                        | 默认值 | 必填    |\\n| --------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| size      | -    | _&nbsp;&nbsp;\\\"large\\\"&nbsp;&brvbar;&nbsp;\\\"medium\\\"<br/>_                                                                                                                                                                                                                                      | -      | `false` |\\n| mark      | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                  | -      | `false` |\\n| color     | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                   | -      | `false` |\\n| plain     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                  | -      | `false` |\\n| round     | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                  | -      | `false` |\\n| textColor | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                   | -      | `false` |\\n| type      | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"default\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"primary\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"success\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"danger\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"warning\\\"<br/>_ | -      | `false` |\\n| closeable | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                  | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| onClose   | -    | _&nbsp;&nbsp;(e:&nbsp;any)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                          | -      | `false` |\\n\";","export default \"# PowerScrollView 下拉刷新\\n\\n### 介绍\\n\\n**PowerScrollView 继承于 ScrollView 补充了 ScrollView 在 Taro 中没有实现的功能, 以及新增的一些能力，因此描述 ScrollView 同样也适用于 PowerScrollView**\\n\\n可滚动视图区域。使用竖向滚动时，需要给 ScrollView 一个固定高度，通过 css 设置 height。组件属性的长度单位默认为 px\\nTips: H5 中 ScrollView 组件是通过一个高度（或宽度）固定的容器内部滚动来实现的，因此务必正确的设置容器的高度。例如: 如果 ScrollView 的高度将 body 撑开，就会同时存在两个滚动条（body 下的滚动条，以及 ScrollView 的滚动条）\\n\\n> [参考文档](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)\\n\\n### 引入\\n\\n```js\\nimport { PowerScrollView } from '@antmjs/vantui'\\n```\\n\\n模拟请求数据\\n\\n```js common\\nconst mockRequest = async (_startIndex, isRefresh, name) => {\\n  const sleep = (t) =>\\n    new Promise((resolve) => {\\n      setTimeout(() => {\\n        resolve()\\n      }, t)\\n    })\\n  const TOTAL = 100\\n  let startIndex = _startIndex\\n  if (isRefresh) {\\n    startIndex = 0\\n  }\\n  if (startIndex >= TOTAL) {\\n    return []\\n  }\\n  console.log(`${name}:请求~`, 'isRefresh:', isRefresh)\\n  await sleep(1200)\\n  let list = []\\n  for (let i = 0; i < 20; i++) {\\n    list.push(`${name}:`)\\n  }\\n  return list\\n}\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n- 开启下拉刷新`(refresherEnabled默认开启)`时, 下拉会触发 `onScrollToUpper({page,pageSize})` 事件，在事件的回调函数中可以进行异步操作\\n\\n- 开允许纵向滚动`(scrollY默认开启)`时, 当组件滚动到底部时,上拉会触发 `onScrollToUpper({page,pageSize})` 事件，在事件的回调函数中可以进行异步操作并更新数据, 若数据已全部加载完毕，则会自动渲染`renderFinished||finishedText`。\\n\\n- 默认的`current`是通过`children.length`来计算的,也可以传入`current={list.length}`\\n\\n- 默认`pageSize`是`20`通常是需要铺满可滚动窗口的高度,也可以传入`pageSize={15}`\\n\\n- `props.total` 存在`onScrollToUpper/onScrollToLower` 的入参是传入组件的`{page,pageSize}`, 不存在入参是传入组件的`current`\\n\\n```jsx\\nfunction Demo() {\\n  const { mockRequest } = COMMON\\n  const [state, changeState] = react.useState({\\n    basicsList: [],\\n    basicsFinished: false,\\n  })\\n  const setState = (newState) => {\\n    changeState({\\n      ...state,\\n      ...newState,\\n    })\\n  }\\n\\n  // 基础用法\\n  const basicsDoRefresh = async (event = 0) => {\\n    const append = await mockRequest(state.basicsList.length, true, '基础用法')\\n    setState({\\n      basicsList: append.map((item, index) => (\\n        <View\\n          key={`${state.basicsList.length + index}append`}\\n          style={{ height: '20px', lineHeight: '20px' }}\\n        >\\n          {item}\\n          <Tag type=\\\"success\\\">{`index:${\\n            state.basicsList.length + index + 1\\n          }`}</Tag>\\n        </View>\\n      )),\\n      basicsFinished: append.length === 0,\\n    })\\n  }\\n  const basicsLoadMore = async (event = 0, isRefresh = false) => {\\n    let append = await mockRequest(\\n      state.basicsList.length,\\n      isRefresh,\\n      '基础用法',\\n    )\\n    append = append.map((item, index) => (\\n      <View\\n        key={`${state.basicsList.length + index}append`}\\n        style={{ height: '20px', lineHeight: '20px' }}\\n      >\\n        {item}\\n        <Tag type=\\\"success\\\">{`index:${\\n          state.basicsList.length + index + 1\\n        }`}</Tag>\\n      </View>\\n    ))\\n    setState({\\n      basicsList: [...state.basicsList, ...append],\\n      basicsFinished: append.length === 0,\\n    })\\n  }\\n\\n  react.useEffect(() => {\\n    basicsLoadMore()\\n  }, [])\\n\\n  return (\\n    <PowerScrollView\\n      style={{ height: 'calc(100vh - 120px)' }}\\n      finishedText=\\\"没有更多了\\\"\\n      successText=\\\"刷新成功\\\"\\n      onScrollToUpper={basicsDoRefresh}\\n      onScrollToLower={basicsLoadMore}\\n      current={state.basicsList.length}\\n      finished={state.basicsFinished}\\n    >\\n      {state.basicsList.map((e, i) => (\\n        <Cell key={i} title={e} />\\n      ))}\\n    </PowerScrollView>\\n  )\\n}\\n```\\n\\n> PowerScrollView 会自动对 onScrollToLower/onScrollToUpper 函数加锁，避免重复的请求，但是前提是 onScrollToLower/onScrollToUpper 函数需要返回一个正确的 Promise，下面是正确和错误的用法示例：\\n\\n```js\\nfunction fetch() {\\n  // 错误\\n  doRequest()\\n}\\n\\nasync function fetch() {\\n  // 错误\\n  doRequest()\\n}\\n\\nasync function fetch() {\\n  // 正确\\n  await doRequest()\\n}\\n\\nfunction fetch() {\\n  // 正确\\n  return doRequest()\\n}\\n```\\n\\n### 自定义参数\\n\\n- 通过`renderHead`可以自定义下拉刷新过程中的提示内容。\\n- 若列表数据加载失败，把异常抛出 即可显示错误提示，用户点击错误提示后会重新触发 onScrollToUpper 事件。\\n\\n```jsx\\nfunction Demo() {\\n  const { mockRequest } = COMMON\\n  const [state, changeState] = react.useState({\\n    basicsList: [],\\n    basicsFinished: false,\\n  })\\n  const setState = (newState) => {\\n    changeState({\\n      ...state,\\n      ...newState,\\n    })\\n  }\\n\\n  // 基础用法\\n  const basicsDoRefresh = async (event = 0) => {\\n    const append = await mockRequest(state.basicsList.length, true, '错误提示')\\n    setState({\\n      basicsList: append.map((item, index) => (\\n        <View\\n          key={`${index + state.basicsList.length}append`}\\n          style={{ height: '20px', lineHeight: '20px' }}\\n        >\\n          {item}\\n          <Tag type=\\\"success\\\">{`index:${\\n            index + state.basicsList.length + 1\\n          }`}</Tag>\\n        </View>\\n      )),\\n      basicsFinished: append.length === 0,\\n    })\\n  }\\n  const basicsLoadMore = async (event = 0, isRefresh = false) => {\\n    let append = await mockRequest(\\n      state.basicsList.length,\\n      isRefresh,\\n      '错误提示',\\n    )\\n    append = append.map((item, index) => (\\n      <View\\n        key={`${index + state.basicsList.length}append`}\\n        style={{ height: '20px', lineHeight: '20px' }}\\n      >\\n        {item}\\n        <Tag type=\\\"success\\\">{`index:${\\n          index + state.basicsList.length + 1\\n        }`}</Tag>\\n      </View>\\n    ))\\n    if ([...state.basicsList, ...append].length > 20) {\\n      throw new Error('抛出异常')\\n    } else {\\n      setState({\\n        basicsList: [...state.basicsList, ...append],\\n        basicsFinished: append.length === 0,\\n      })\\n    }\\n  }\\n\\n  react.useEffect(() => {\\n    basicsLoadMore()\\n  }, [])\\n\\n  return (\\n    <PowerScrollView\\n      headHeight=\\\"80\\\"\\n      style={{ height: 'calc(100vh - 120px)' }}\\n      finishedText=\\\"没有更多了\\\"\\n      successText=\\\"刷新成功\\\"\\n      onScrollToUpper={basicsDoRefresh}\\n      onScrollToLower={basicsLoadMore}\\n      current={state.basicsList.length}\\n      finished={state.basicsFinished}\\n      errorText=\\\"请求失败，点击重新加载\\\"\\n      pageSize={15}\\n      lowerThreshold={300}\\n      renderHead={({ status, distance }) => {\\n        if (status === 'pulling') {\\n          return (\\n            <Image\\n              className=\\\"doge\\\"\\n              src=\\\"https://img01.yzcdn.cn/vant/doge.png\\\"\\n              style={{ transform: `scale(${distance / 80})` }}\\n            />\\n          )\\n        }\\n        if (status === 'loosing') {\\n          // 释放提示\\n          return (\\n            <Image\\n              className=\\\"doge\\\"\\n              src=\\\"https://img01.yzcdn.cn/vant/doge.png\\\"\\n            />\\n          )\\n        }\\n        if (status === 'loading') {\\n          // 加载提示\\n          return (\\n            <Image\\n              className=\\\"doge\\\"\\n              src=\\\"https://img01.yzcdn.cn/vant/doge-fire.jpg\\\"\\n            />\\n          )\\n        }\\n        return null\\n      }}\\n    >\\n      {state.basicsList.map((e, i) => (\\n        <Cell key={i} title={e} />\\n      ))}\\n    </PowerScrollView>\\n  )\\n}\\n```\\n\\n### 自适应高度\\n\\n给`ScrollContainer`容器设置高度，内部渲染 `header/footer`之后，`PowerScrollView`会自动撑满空缺部分作为自己高度。\\n\\n```scss\\n.scroll-container {\\n  display: flex;\\n  flex-direction: column;\\n  .scroll-container-content {\\n    flex: 1;\\n    overflow: scroll;\\n    & > scroll-view,\\n    // h5\\n    & > taro-scroll-view-core {\\n      height: 100%;\\n    }\\n  }\\n}\\n```\\n\\n```jsx common\\nconst ScrollContainer = (props) => {\\n  const { header, footer, children, className, ...rest } = props\\n  return (\\n    <View className={`scroll-container ${className || ''}`} {...rest}>\\n      {header && <View className=\\\"scroll-container-header\\\">{header}</View>}\\n      <View className=\\\"scroll-container-content\\\">{children}</View>\\n      {footer && <View className=\\\"scroll-container-footer\\\">{footer}</View>}\\n    </View>\\n  )\\n}\\n```\\n\\n### 配合搜索使用\\n\\n```jsx\\nfunction Demo() {\\n  const { mockRequest, ScrollContainer } = COMMON\\n  const [state, changeState] = react.useState({\\n    basicsList: [],\\n    basicsFinished: false,\\n    searchValue: '',\\n  })\\n  const setState = (newState) => {\\n    changeState({\\n      ...state,\\n      ...newState,\\n    })\\n  }\\n\\n  // 基础用法\\n  const basicsDoRefresh = async (event = 0) => {\\n    const append = await mockRequest(state.basicsList.length, true, '基础用法')\\n    setState({\\n      basicsList: append.map((item, index) => (\\n        <View\\n          key={`${state.basicsList.length + index}append`}\\n          style={{ height: '20px', lineHeight: '20px' }}\\n        >\\n          {item}\\n          <Tag type=\\\"success\\\">{`index:${\\n            state.basicsList.length + index + 1\\n          }`}</Tag>\\n        </View>\\n      )),\\n      basicsFinished: append.length === 0,\\n    })\\n  }\\n  const basicsLoadMore = async (event = 0, isRefresh = false) => {\\n    let append = await mockRequest(\\n      state.basicsList.length,\\n      isRefresh,\\n      '基础用法',\\n    )\\n    append = append.map((item, index) => (\\n      <View\\n        key={`${state.basicsList.length + index}append`}\\n        style={{ height: '20px', lineHeight: '20px' }}\\n      >\\n        {item}\\n        <Tag type=\\\"success\\\">{`index:${\\n          state.basicsList.length + index + 1\\n        }`}</Tag>\\n      </View>\\n    ))\\n    setState({\\n      basicsList: [...state.basicsList, ...append],\\n      basicsFinished: append.length === 0,\\n    })\\n  }\\n\\n  react.useEffect(() => {\\n    basicsLoadMore()\\n  }, [])\\n\\n  const doSearch = async () => {\\n    setState({\\n      basicsList: [],\\n      basicsFinished: false,\\n    })\\n    await basicsLoadMore(undefined, true)\\n  }\\n\\n  return (\\n    <ScrollContainer\\n      className={`pull-search`}\\n      header={\\n        <View className=\\\"header\\\">\\n          <View className=\\\"left\\\">\\n            <Search\\n              defaultValue={state.searchValue}\\n              onChange={(e) => setState({ searchValue: e.detail })}\\n            />\\n          </View>\\n          <View className=\\\"right\\\">\\n            <Button size=\\\"small\\\" type=\\\"primary\\\" onClick={doSearch}>\\n              搜索\\n            </Button>\\n          </View>\\n        </View>\\n      }\\n      footer={<View className=\\\"footer\\\">自适应scroll-footer</View>}\\n    >\\n      {\\n        <>\\n          {state.searchFinished || state.basicsList.length > 0 ? (\\n            <PowerScrollView\\n              finishedText=\\\"--- 我是有底线的 ---\\\"\\n              onScrollToUpper={basicsDoRefresh}\\n              onScrollToLower={basicsLoadMore}\\n              lowerThreshold={300}\\n              headHeight=\\\"80\\\"\\n              minTriggerTopDistance=\\\"150\\\"\\n              finished={state.basicsFinished}\\n              renderHead={({ distance, status }) => {\\n                return (\\n                  <Image\\n                    className=\\\"doge\\\"\\n                    src=\\\"https://img-blog.csdnimg.cn/20210515142150468.gif\\\"\\n                    style={\\n                      status === 'pulling'\\n                        ? { transform: `scale(${distance / 80})` }\\n                        : ''\\n                    }\\n                  />\\n                )\\n              }}\\n            >\\n              {state.basicsList.map((e, i) => (\\n                <Cell key={i} title={e} />\\n              ))}\\n            </PowerScrollView>\\n          ) : (\\n            <View className=\\\"placeholder\\\">\\n              <View className=\\\"loadingWrapper\\\">\\n                <Loading />\\n              </View>\\n              正在拼命加载数据\\n            </View>\\n          )}\\n        </>\\n      }\\n    </ScrollContainer>\\n  )\\n}\\n```\\n\\n```js\\nstate = {\\n  // error\\n  searchList: [],\\n  searchFinished: false,\\n  searchValue: 'empty',\\n}\\nhandleChange = (e) => {\\n  setState({\\n    searchValue: e.detail,\\n  })\\n}\\n  // 搜索\\ndoSearch = async () => {\\n  setState({\\n    searchList: [],\\n    searchFinished: false,\\n  })\\n\\n  await searchLoadMore(undefined, true)\\n}\\n\\nsearchDoRefresh = async (event = 0) => {\\n  const append = await mockRequest(\\n    state.searchList.length,\\n    true,\\n    '配合搜索使用',\\n  )\\n  if (state.searchValue === 'empty') {\\n    setState({\\n      searchList: [],\\n      searchFinished: true,\\n    })\\n    return\\n  }\\n  setState({\\n    searchList: append,\\n  })\\n}\\nsearchLoadMore = async (event = 0,isRefresh = false) => {\\n  const append = await mockRequest(\\n    state.searchList.length,\\n    isRefresh,\\n    '配合搜索使用',\\n  )\\n\\n  if (state.searchValue === 'empty') {\\n    setState({\\n      searchList: [],\\n      searchFinished: true,\\n    })\\n    return\\n  }\\n  setState({\\n    searchList: [...state.searchList, ...append],\\n    searchFinished: append.length === 0,\\n  })\\n}\\nonLoad() {\\n  searchLoadMore()\\n}\\n```\\n\\n## API\\n\\n### 相对于 ScrollView 新增 Props\\n\\n| 参数                  | 说明                                                                  | 类型               | 默认值               |\\n| --------------------- | --------------------------------------------------------------------- | ------------------ | -------------------- |\\n| pullingText           | 下拉过程提示文案                                                      | _string_           | `下拉即可刷新...`    |\\n| loosingText           | 释放过程提示文案                                                      | _string_           | `释放即可刷新...`    |\\n| loadingText           | 加载过程提示文案                                                      | _string_           | `加载中...`          |\\n| successText           | 刷新成功提示文案                                                      | _string_           | -                    |\\n| successDuration       | 刷新成功提示展示时长(ms)                                              | _number \\\\| string_ | `500`                |\\n| animationDuration     | 动画时长                                                              | _number \\\\| string_ | `300`                |\\n| headHeight            | 顶部内容高度                                                          | _number \\\\| string_ | `50`                 |\\n| minTriggerTopDistance | 最小触发下拉距离顶部距离                                              | _number \\\\| string_ | `150`                |\\n| pullDistance `v3.0.8` | 触发下拉刷新的距离                                                    | _number \\\\| string_ | 与 `headHeight` 一致 |\\n| finished              | 是否已加载完成，加载完成后不再触发 load 事件                          | _boolean_          | `false`              |\\n| finishedText          | 加载完成后的提示文案                                                  | _string_           | -                    |\\n| errorText             | 加载失败后的提示文案                                                  | _string_           | -                    |\\n| total                 | 列表总个数                                                            | _number_           | -                    |\\n| current               | 当前列表个数                                                          | _number_           | `children.length`    |\\n| pageSize              | 一页个数                                                              | _number_           | `20`                 |\\n| emptyImage            | 没有内容时，图片类型，可选值为 error network search，支持传入图片 URL | _string_           | `default`            |\\n| emptyDescription      | 没有内容时，图片下方的描述文字                                        | _string_           | -                    |\\n\\n### 自定义 Render\\n\\nstatus = 'normal'\\n| 'loading'\\n| 'loosing'\\n| 'pulling'\\n| 'success'\\n\\n| 名称           | 说明                       | 参数                                       |\\n| -------------- | -------------------------- | ------------------------------------------ |\\n| renderLoading  | 自定义底部加载中提示       |\\n| renderFinished | 自定义加载完成后的提示文案 | -                                          |\\n| renderError    | 自定义加载失败后的提示文案 | -                                          |\\n| renderHead     | 自定义下拉刷新区域         | {status: 下拉状态, distance: 当前下拉距离} |\\n\\n### ScrollView 原有属性重写或补充\\n\\n| 参数             | 说明                                                     | 类型                                                          | 默认值    |\\n| ---------------- | -------------------------------------------------------- | ------------------------------------------------------------- | --------- |\\n| scrollY          | 允许纵向滚动                                             | _boolean_                                                     | `true`    |\\n| refresherEnabled | 开启下拉刷新                                             | _boolean_                                                     | `true`    |\\n| lowerThreshold   | 距底部/右边多远时（单位 px），触发`onScrolltolower` 事件 | _number_                                                      | `250`     |\\n| onScrollToUpper  | 下拉刷新时触发                                           | _({page: number,paseSize:number}\\\\|number) => Promise\\\\<void\\\\>_ | `()=>{}`  |\\n| onScrollToLower  | 滚动条与底部距离小于 lowerThreshold 时触发               | _({page: number,paseSize:number}\\\\|number) => Promise\\\\<void\\\\>_ | `() =>{}` |\\n\";","export default \"# NumberKeyboard\\n\\n数字键盘，可以配合密码输入框组件或自定义的输入框组件使用\\n\\n### 引入\\n\\n```js\\nimport { NumberKeyboard } from '@antmjs/vantui'\\n```\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [visible, setVisible] = react.useState('')\\n  const [value, setValue] = react.useState('')\\n\\n  const actions = {\\n    onClose: () => {\\n      Toast.show('close')\\n      setVisible('')\\n    },\\n    onInput: (key) => {\\n      Toast.show(key)\\n    },\\n    onDelete: () => {\\n      Toast.show('delete')\\n    },\\n  }\\n\\n  const onDelete = () => {\\n    setValue(value.slice(0, value.length - 1))\\n  }\\n\\n  const onInput = (value_) => {\\n    setValue(value + value_)\\n  }\\n\\n  return (\\n    <>\\n      <Cell title=\\\"默认键盘\\\" onClick={() => setVisible('demo1')}></Cell>\\n      <Cell title=\\\"带标题键盘\\\" onClick={() => setVisible('demo2')}></Cell>\\n      <Cell title=\\\"带确认键盘\\\" onClick={() => setVisible('demo3')}></Cell>\\n      <Cell title=\\\"带自定义键盘\\\" onClick={() => setVisible('demo4')}></Cell>\\n      <Cell title=\\\"乱序键盘\\\" onClick={() => setVisible('demo5')}></Cell>\\n      <Cell title=\\\"弹窗内展示键盘\\\" onClick={() => setVisible('demo6')}></Cell>\\n      <Cell onClick={() => setVisible('demo7')}>\\n        <Input value={value} placeholder=\\\"数字键盘结果\\\" />\\n      </Cell>\\n      <NumberKeyboard\\n        visible={visible === 'demo1'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo2'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n        title=\\\"数字键盘\\\"\\n        customKey=\\\"-\\\"\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo3'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n        showCloseButton={false}\\n        confirmText=\\\"确定\\\"\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo4'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n        customKey=\\\".\\\"\\n        showCloseButton={false}\\n        confirmText=\\\"确定\\\"\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo5'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n        randomOrder\\n        customKey=\\\"X\\\"\\n        confirmText=\\\"确定\\\"\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo6'}\\n        onClose={actions.onClose}\\n        onInput={actions.onInput}\\n        onDelete={actions.onDelete}\\n      />\\n      <NumberKeyboard\\n        visible={visible === 'demo7'}\\n        onClose={actions.onClose}\\n        onInput={onInput}\\n        onDelete={onDelete}\\n        customKey=\\\"X\\\"\\n      />\\n      <Toast />\\n    </>\\n  )\\n}\\n```\\n\\n### NumberKeyboardProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/number-keyboard.d.ts)\\n\\n| 参数            | 说明                         | 类型                                                                 | 默认值 | 必填    |\\n| --------------- | ---------------------------- | -------------------------------------------------------------------- | ------ | ------- |\\n| visible         | 是否展示                     | _&nbsp;&nbsp;boolean<br/>_                                           | -      | `false` |\\n| title           | 键盘标题                     | _&nbsp;&nbsp;ReactNode<br/>_                                         | -      | `false` |\\n| confirmText     | 完成按钮文案，null 不展示    | _&nbsp;&nbsp;ReactNode&nbsp;&brvbar;&nbsp;null<br/>_                 | null   | `false` |\\n| customKey       | 自定义按钮                   | _&nbsp;&nbsp;\\\"-\\\"&nbsp;&brvbar;&nbsp;\\\".\\\"&nbsp;&brvbar;&nbsp;\\\"X\\\"<br/>_ | -      | `false` |\\n| randomOrder     | 是否乱序键盘                 | _&nbsp;&nbsp;boolean<br/>_                                           | false  | `false` |\\n| showCloseButton | 是否展示收起键盘箭头         | _&nbsp;&nbsp;boolean<br/>_                                           | true   | `false` |\\n| onInput         | 输入内容回调                 | _&nbsp;&nbsp;(v:&nbsp;string)&nbsp;=>&nbsp;void<br/>_                | true   | `false` |\\n| onDelete        | 删除内容回调                 | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                              | -      | `false` |\\n| onClose         | 点击关闭时触发               | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                              | -      | `false` |\\n| onConfirm       | 点击确定按钮时触发           | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                              | -      | `false` |\\n| afterClose      | 键盘完全收起回调             | _&nbsp;&nbsp;()&nbsp;=>&nbsp;void<br/>_                              | -      | `false` |\\n| closeOnConfirm  | 是否在点击确定按钮时自动关闭 | _&nbsp;&nbsp;boolean<br/>_                                           | true   | `false` |\\n\";","export default \"# Pagination 分页\\n\\n### 介绍\\n\\n当数据量较多时，采用分页的形式分隔长列表。\\n\\n### 安装\\n\\n```javascript\\nimport { Pagination } from '@antmjs/vantui'\\n```\\n\\n### 基础用法\\n\\n通过 modelValue 来绑定当前页码时，组件为受控状态，分页显示取决于传入的 modelValue，一般搭配 onChange 使用。\\n不需要受控时，可通过 defaultCurrentPage 指定当前页码\\n\\n```jsx\\nfunction Demo() {\\n  const [currentPage1, setCurrentPage1] = react.useState(1)\\n  const pageChange1 = (v) => {\\n    const c = v\\n    setCurrentPage1(c)\\n  }\\n  return (\\n    <Pagination\\n      modelValue={currentPage1}\\n      totalItems=\\\"25\\\"\\n      itemsPerPage=\\\"5\\\"\\n      onChange={pageChange1}\\n    />\\n  )\\n}\\n```\\n\\n### 简单模式\\n\\n将 mode 设置为 \\\"simple\\\" 来切换到简单模式，此时分页器不会展示具体的页码按钮。\\n\\n```jsx\\nfunction Demo() {\\n  const [currentPage2, setCurrentPage2] = react.useState(1)\\n  const pageChange2 = (v) => {\\n    const c = v\\n    setCurrentPage2(c)\\n  }\\n\\n  return (\\n    <Pagination\\n      modelValue={currentPage2}\\n      pageCount={12}\\n      mode=\\\"simple\\\"\\n      onChange={pageChange2}\\n    />\\n  )\\n}\\n```\\n\\n### 显示省略号\\n\\n设置 force-ellipses 后会展示省略号按钮，点击后可以快速跳转。\\n\\n```jsx\\nfunction Demo() {\\n  const [currentPage3, setCurrentPage3] = react.useState(1)\\n  const pageChange3 = (v) => {\\n    const c = v\\n    setCurrentPage3(c)\\n  }\\n\\n  return (\\n    <Pagination\\n      modelValue={currentPage3}\\n      totalItems=\\\"125\\\"\\n      showPageSize=\\\"3\\\"\\n      forceEllipses\\n      onChange={pageChange3}\\n    />\\n  )\\n}\\n```\\n\\n### 自定义按钮\\n\\n通过 pageNodeRender 传入自定义方法\\n\\n```jsx\\nfunction Demo() {\\n  const [currentPage4, setCurrentPage4] = react.useState(1)\\n  const pageChange4 = (v) => {\\n    const c = v\\n    setCurrentPage4(c)\\n  }\\n\\n  const pageNodeRender = (page) => {\\n    return <>{page.number == 3 ? 'hot' : page.text}</>\\n  }\\n\\n  return (\\n    <Pagination\\n      modelValue={currentPage4}\\n      totalItems=\\\"500\\\"\\n      showPageSize=\\\"5\\\"\\n      onChange={pageChange4}\\n      pageNodeRender={pageNodeRender}\\n      prevText={<Icon name=\\\"arrow-left\\\" />}\\n      nextText={<Icon name=\\\"arrow\\\" />}\\n    />\\n  )\\n}\\n```\\n\\n### PaginationProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/pagination.d.ts)\\n\\n| 参数           | 说明                                                                  | 类型                                                                                                                                                                                                                            | 默认值                 | 必填    |\\n| -------------- | --------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | ------- |\\n| defaultValue   | 默认页码                                                              | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                       | 1                      | `false` |\\n| modelValue     | 当前页码                                                              | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                       | 1                      | `true`  |\\n| mode           | -                                                                     | _&nbsp;&nbsp;\\\"multi\\\"&nbsp;&brvbar;&nbsp;\\\"simple\\\"<br/>_                                                                                                                                                                          | multi                  | `false` |\\n| prevText       | 自定义上一页按钮内容                                                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                    | 上一页                 | `false` |\\n| nextText       | 自定义下一页按钮内容                                                  | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                    | 下一页                 | `false` |\\n| pageCount      | 总页数                                                                | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                             | 传入或者根据数据量计算 | `true`  |\\n| totalItems     | 总记录数                                                              | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                             | 0                      | `false` |\\n| itemsPerPage   | 每页数量                                                              | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                             | 10                     | `false` |\\n| showPageSize   | 显示页码个数                                                          | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                                                                                                             | 5                      | `false` |\\n| forceEllipses  | 是否展示省略号                                                        | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                      | false                  | `false` |\\n| pageNodeRender | 自定义渲染页码结构, 入参数为 number 页数、text 文本、 active 选中状态 | _&nbsp;&nbsp;(page:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;number:&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;text:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;active:&nbsp;boolean<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;React.ReactNode<br/>_ | -                      | `false` |\\n| onChange       | 页码改变的时候触发                                                    | _&nbsp;&nbsp;(currPage:&nbsp;number)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                    | -                      | `true`  |\\n| updatecurrent  | -                                                                     | _&nbsp;&nbsp;(currPage:&nbsp;number)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                    | -                      | `false` |\\n\";","export default \"# Grid 宫格\\n\\n### 介绍\\n\\n宫格可以在水平方向上把页面分隔成等宽度的区块，用于展示内容或进行页面导航。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Grid, GridItem } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)\\n\\n## 代码演示\\n\\n### 基本用法\\n\\n通过`icon`属性设置格子内的图标，`text`属性设置文字内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid>\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 自定义列数\\n\\n默认一行展示四个格子，可以通过`columnNum`自定义列数。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid columnNum=\\\"3\\\">\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 自定义内容\\n\\n通过插槽可以自定义格子展示的内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid columnNum=\\\"3\\\" border={false}>\\n      {[1, 2, 3].map((item, index) => (\\n        <GridItem forItem=\\\"index\\\">\\n          <Image\\n            style=\\\"width: 100%; height: 90px;\\\"\\n            src={`https://img.yzcdn.cn/vant/apple-${index + 1}.jpg`}\\n          />\\n        </GridItem>\\n      ))}\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 正方形格子\\n\\n设置`square`属性后，格子的高度会和宽度保持一致。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid square iconSize=\\\"48\\\">\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 格子间距\\n\\n通过`gutter`属性设置格子之间的距离。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid gutter={10}>\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 内容横排\\n\\n将`direction`属性设置为`horizontal`，可以让宫格的内容呈横向排列。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid direction=\\\"horizontal\\\" columnNum=\\\"2\\\">\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n      <GridItem icon=\\\"photo-o\\\" text=\\\"文字\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 页面跳转\\n\\n可以通过`url`属性进行页面跳转，通过`linkType`属性控制跳转类型。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid clickable columnNum=\\\"2\\\">\\n      <GridItem\\n        icon=\\\"homeO\\\"\\n        linkType=\\\"navigateTo\\\"\\n        url=\\\"/pages/dashboard/index\\\"\\n        text=\\\"Navigate 跳转\\\"\\n      />\\n      <GridItem\\n        icon=\\\"search\\\"\\n        linkType=\\\"reLaunch\\\"\\n        url=\\\"/pages/dashboard/index\\\"\\n        text=\\\"ReLaunch 跳转\\\"\\n      />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### 提示信息\\n\\n设置`dot`属性后，会在图标右上角展示一个小红点。设置`badge`属性后，会在图标右上角展示相应的徽标。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Grid columnNum=\\\"2\\\">\\n      <GridItem icon=\\\"home-o\\\" text=\\\"文字\\\" dot />\\n      <GridItem icon=\\\"search\\\" text=\\\"文字\\\" badge=\\\"99+\\\" />\\n    </Grid>\\n  )\\n}\\n```\\n\\n### GridProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/grid.d.ts)\\n\\n| 参数      | 说明 | 类型                                                | 默认值 | 必填    |\\n| --------- | ---- | --------------------------------------------------- | ------ | ------- |\\n| square    | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| gutter    | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_ | -      | `false` |\\n| clickable | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| columnNum | -    | _&nbsp;&nbsp;number<br/>_                           | -      | `false` |\\n| center    | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| border    | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| direction | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| iconSize  | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| reverse   | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| children  | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                  | -      | `false` |\\n\\n### GridItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/grid.d.ts)\\n\\n| 参数       | 说明 | 类型                                                                                          | 默认值 | 必填    |\\n| ---------- | ---- | --------------------------------------------------------------------------------------------- | ------ | ------- |\\n| icon       | -    | _&nbsp;&nbsp;string<br/>_                                                                     | -      | `false` |\\n| iconColor  | -    | _&nbsp;&nbsp;string<br/>_                                                                     | -      | `false` |\\n| iconPrefix | -    | _&nbsp;&nbsp;string<br/>_                                                                     | -      | `false` |\\n| dot        | -    | _&nbsp;&nbsp;boolean<br/>_                                                                    | -      | `false` |\\n| info       | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number&nbsp;&brvbar;&nbsp;undefined<br/>_              | -      | `false` |\\n| badge      | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number&nbsp;&brvbar;&nbsp;undefined<br/>_              | -      | `false` |\\n| text       | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                  | -      | `false` |\\n| url        | -    | _&nbsp;&nbsp;string<br/>_                                                                     | -      | `false` |\\n| linkType   | -    | _&nbsp;&nbsp;\\\"navigateTo\\\"&nbsp;&brvbar;&nbsp;\\\"reLaunch\\\"&nbsp;&brvbar;&nbsp;\\\"redirectTo\\\"<br/>_ | -      | `false` |\\n| children   | -    | _&nbsp;&nbsp;React.ReactNode<br/>_                                                            | -      | `false` |\\n\";","export default \"# IndexBar 索引栏\\n\\n### 介绍\\n\\n用于列表的索引分类显示和快速定位。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { IndexBar, IndexAnchor } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n点击索引栏时，会自动跳转到对应的`IndexAnchor`锚点位置。\\n不要将 IndexBar 放置在含有 css 动画元素里面，会导致 IndexAnchor 定位失效\\n\\n```jsx\\nconst arr = []\\nconst charCodeOfA = 'A'.charCodeAt(0)\\nfor (let i = 0; i < 26; i++) {\\n  arr.push(String.fromCharCode(charCodeOfA + i))\\n}\\nfunction Demo() {\\n  return (\\n    <IndexBar>\\n      {arr.map((item) => (\\n        <Block key={item.item}>\\n          <IndexAnchor index={item}></IndexAnchor>\\n          <Cell title=\\\"文本\\\"></Cell>\\n          <Cell title=\\\"文本\\\"></Cell>\\n          <Cell title=\\\"文本\\\"></Cell>\\n        </Block>\\n      ))}\\n    </IndexBar>\\n  )\\n}\\n```\\n\\n### 自定义索引列表\\n\\n可以通过`indexList`属性自定义展示的索引字符列表。\\n\\n```jsx\\n<View>\\n  <IndexBar indexList={[1,2,...]}>\\n    <IndexAnchor index=\\\"1\\\">标题1</IndexAnchor>\\n    <Cell title=\\\"文本\\\" />\\n    <Cell title=\\\"文本\\\" />\\n    <Cell title=\\\"文本\\\" />\\n    <IndexAnchor index=\\\"2\\\">标题2</IndexAnchor>\\n    <Cell title=\\\"文本\\\" />\\n    <Cell title=\\\"文本\\\" />\\n    <Cell title=\\\"文本\\\" />\\n    ...\\n  </IndexBar>\\n</View>\\n```\\n\\n### IndexBarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/index-bar.d.ts)\\n\\n| 参数            | 说明 | 类型                                                                                                                                             | 默认值 | 必填    |\\n| --------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| sticky          | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| zIndex          | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                        | -      | `false` |\\n| highlightColor  | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                        | -      | `false` |\\n| stickyOffsetTop | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                        | -      | `false` |\\n| indexList       | -    | _&nbsp;&nbsp;string[]&nbsp;&brvbar;&nbsp;number[]<br/>_                                                                                          | -      | `false` |\\n| onSelect        | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| children        | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                     | -      | `false` |\\n\";","export default \"# NavBar 导航栏\\n\\n### 介绍\\n\\n为页面提供导航功能，常用于页面顶部。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { NavBar, MiniNavBar } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <NavBar\\n        title=\\\"标题\\\"\\n        leftText=\\\"返回\\\"\\n        rightText=\\\"按钮\\\"\\n        leftArrow\\n        onClickLeft={() => Toast.show({ message: '点击按钮 返回' })}\\n        onClickRight={() => Toast.show({ message: '点击按钮 right' })}\\n      />\\n      <Toast />\\n    </View>\\n  )\\n}\\n```\\n\\n### 高级用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <NavBar\\n        title=\\\"标题\\\"\\n        leftText=\\\"返回\\\"\\n        leftArrow\\n        safeAreaInsetTop={false}\\n        renderRight={<Icon name=\\\"search\\\" className=\\\"icon\\\" size=\\\"36\\\"></Icon>}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### NavBarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/nav-bar.d.ts)\\n\\n| 参数             | 说明 | 类型                                                       | 默认值 | 必填    |\\n| ---------------- | ---- | ---------------------------------------------------------- | ------ | ------- |\\n| title            | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| fixed            | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| placeholder      | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| leftText         | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| rightText        | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| style            | -    | _&nbsp;&nbsp;string<br/>_                                  | -      | `false` |\\n| leftArrow        | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| border           | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| zIndex           | -    | _&nbsp;&nbsp;number<br/>_                                  | -      | `false` |\\n| safeAreaInsetTop | -    | _&nbsp;&nbsp;boolean<br/>_                                 | -      | `false` |\\n| renderTitle      | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| renderLeft       | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| renderRight      | -    | _&nbsp;&nbsp;ReactNode<br/>_                               | -      | `false` |\\n| onClickLeft      | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onClickRight     | -    | _&nbsp;&nbsp;(e:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n\";","export default \"# Sidebar 侧边导航\\n\\n### 介绍\\n\\n垂直展示的导航栏，用于在不同的内容区域之间进行切换。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Sidebar, SidebarItem } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过在`vanSidebar`上设置`activeKey`属性来控制选中项。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Sidebar activeKey={0}>\\n      <SidebarItem title=\\\"标签名\\\" />\\n      <SidebarItem title=\\\"标签名\\\" />\\n      <SidebarItem title=\\\"标签名\\\" />\\n    </Sidebar>\\n  )\\n}\\n```\\n\\n### 徽标提示\\n\\n设置`dot`属性后，会在右上角展示一个小红点。设置`badge`属性后，会在右上角展示相应的徽标。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Sidebar activeKey={1}>\\n      <SidebarItem title=\\\"标签名\\\" dot />\\n      <SidebarItem title=\\\"标签名\\\" badge=\\\"5\\\" />\\n      <SidebarItem title=\\\"标签名\\\" badge=\\\"99+\\\" />\\n    </Sidebar>\\n  )\\n}\\n```\\n\\n### 禁用选项\\n\\n通过`disabled`属性禁用选项。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Sidebar activeKey={2}>\\n      <SidebarItem title=\\\"标签名\\\" dot={true} />\\n      <SidebarItem title=\\\"标签名\\\" disabled />\\n      <SidebarItem title=\\\"标签名\\\" badge=\\\"66+\\\" />\\n    </Sidebar>\\n  )\\n}\\n```\\n\\n### 监听切换事件\\n\\n设置`change`方法来监听切换导航项时的事件。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <>\\n      <Sidebar\\n        activeKey={0}\\n        onChange={(e) =>\\n          Notify.show({\\n            type: 'primary',\\n            message: e.detail,\\n          })\\n        }\\n      >\\n        <SidebarItem title=\\\"标签名1\\\" />\\n        <SidebarItem title=\\\"标签名2\\\" />\\n        <SidebarItem title=\\\"标签名3\\\" />\\n      </Sidebar>\\n      <Notify />\\n    </>\\n  )\\n}\\n```\\n\\n### SidebarItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/sidebar.d.ts)\\n\\n| 参数        | 说明 | 类型                                                         | 默认值 | 必填    |\\n| ----------- | ---- | ------------------------------------------------------------ | ------ | ------- |\\n| dot         | -    | _&nbsp;&nbsp;boolean<br/>_                                   | -      | `false` |\\n| badge       | -    | _&nbsp;&nbsp;ReactNode&nbsp;&brvbar;&nbsp;null<br/>_         | -      | `false` |\\n| info        | -    | _&nbsp;&nbsp;ReactNode<br/>_                                 | -      | `false` |\\n| title       | -    | _&nbsp;&nbsp;ReactNode<br/>_                                 | -      | `false` |\\n| disabled    | -    | _&nbsp;&nbsp;boolean<br/>_                                   | -      | `false` |\\n| onClick     | -    | _&nbsp;&nbsp;(a:&nbsp;any)&nbsp;=>&nbsp;void<br/>_           | -      | `false` |\\n| onChange    | -    | _&nbsp;&nbsp;(a:&nbsp;OnChangeEvent)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| renderTitle | -    | _&nbsp;&nbsp;(a:&nbsp;any)&nbsp;=>&nbsp;ReactNode<br/>_      | -      | `false` |\\n\\n### SidebarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/sidebar.d.ts)\\n\\n| 参数      | 说明 | 类型                                                        | 默认值 | 必填    |\\n| --------- | ---- | ----------------------------------------------------------- | ------ | ------- |\\n| onChange  | -    | _&nbsp;&nbsp;(a:&nbsp;OnChangeEvent)&nbsp;=>&nbsp;any<br/>_ | -      | `false` |\\n| activeKey | -    | _&nbsp;&nbsp;number<br/>_                                   | -      | `true`  |\\n| children  | -    | _&nbsp;&nbsp;ReactNode<br/>_                                | -      | `true`  |\\n\";","export default \"# Tab 标签页\\n\\n### 介绍\\n\\n选项卡组件，用于在不同的内容区域之间进行切换。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Tab, Tabs } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n通过`active`设定当前激活标签对应的索引值，默认情况下启用第一个标签。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs\\n      active={1}\\n      onChange={(e) =>\\n        Toast.show({\\n          message: e.detail.name,\\n          selector: '#tabs-demo1',\\n        })\\n      }\\n    >\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n      <Tab title=\\\"标签 4\\\">内容 4</Tab>\\n      <Toast id=\\\"tabs-demo1\\\" />\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### 通过名称匹配\\n\\n在标签指定`name`属性的情况下，`active`的值为当前标签的`name`（此时无法通过索引值来匹配标签）。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs\\n      active={'a'}\\n      onChange={(e) =>\\n        Toast.show({\\n          message: e.detail.name,\\n          selector: '#tabs-demo2',\\n        })\\n      }\\n    >\\n      <Tab title=\\\"标签 a\\\" name=\\\"a\\\">\\n        内容 a\\n      </Tab>\\n      <Tab title=\\\"标签 b\\\" name=\\\"b\\\">\\n        内容 b\\n      </Tab>\\n      <Tab title=\\\"标签 c\\\" name=\\\"c\\\">\\n        内容 c\\n      </Tab>\\n      <Toast id=\\\"tabs-demo2\\\" />\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### 横向滚动\\n\\n多于 5 个标签时，Tab 可以横向滚动。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs active={1}>\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n      <Tab title=\\\"标签 4\\\">内容 4</Tab>\\n      <Tab title=\\\"标签 5\\\">内容 5</Tab>\\n      <Tab title=\\\"标签 6\\\">内容 6</Tab>\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### 禁用标签\\n\\n设置`disabled`属性即可禁用标签。如果需要监听禁用标签的点击事件，可以在`vanTabs`上监听`disabled`事件。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs\\n      onDisabled={(e) =>\\n        Toast.show({\\n          message: e.detail.title + '已被禁',\\n          selector: '#tabs-demo4',\\n        })\\n      }\\n    >\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\" disabled={true}>\\n        内容 2\\n      </Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n      <Toast id=\\\"tabs-demo4\\\" />\\n    </Tabs>\\n  )\\n}\\n```\\n\\n```js\\n\\n```\\n\\n### 样式风格\\n\\n`Tab`支持两种样式风格：`line`和`card`，默认为`line`样式，可以通过`type`属性修改样式风格。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs type=\\\"card\\\">\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### 点击事件\\n\\n可以在`vanTabs`上绑定`click`事件，在回调参数的`event.detail`中可以取得被点击标签的标题和标识符。\\n\\n```jsx\\nfunction Demo() {\\n  const onClick = (e) => {\\n    Toast.show({\\n      message: e.detail.title,\\n      selector: '#tab-demo6',\\n    })\\n  }\\n\\n  return (\\n    <View>\\n      <Tabs onClick={onClick}>\\n        <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n        <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      </Tabs>\\n      <Toast id=\\\"tab-demo6\\\" />\\n    </View>\\n  )\\n}\\n```\\n\\n### 粘性布局\\n\\n通过`sticky`属性可以开启粘性布局，粘性布局下，当 Tab 滚动到顶部时会自动吸顶。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Tabs sticky={true}>\\n        <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n        <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n        <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n        <Tab title=\\\"标签 4\\\">内容 4</Tab>\\n      </Tabs>\\n    </View>\\n  )\\n}\\n```\\n\\n### 切换动画\\n\\n可以通过`animated`来设置是否启用切换 tab 时的动画。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs animated>\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n      <Tab title=\\\"标签 4\\\">内容 4</Tab>\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### 滑动切换\\n\\n通过`swipeable`属性可以开启滑动切换标签页。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Tabs swipeable>\\n      <Tab title=\\\"标签 1\\\">内容 1</Tab>\\n      <Tab title=\\\"标签 2\\\">内容 2</Tab>\\n      <Tab title=\\\"标签 3\\\">内容 3</Tab>\\n      <Tab title=\\\"标签 4\\\">内容 4</Tab>\\n    </Tabs>\\n  )\\n}\\n```\\n\\n### TabsProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tab.d.ts)\\n\\n| 参数               | 说明 | 类型                                                                                                                                                                                                                                                                                                  | 默认值 | 必填    |\\n| ------------------ | ---- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| sticky             | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| border             | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| swipeable          | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| titleActiveColor   | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| titleInactiveColor | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| color              | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| animated           | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| lineWidth          | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                   | -      | `false` |\\n| lineHeight         | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                   | -      | `false` |\\n| active             | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>_                                                                                                                                                                                                                                                   | -      | `false` |\\n| type               | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| ellipsis           | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| duration           | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| zIndex             | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| swipeThreshold     | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| offsetTop          | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                             | -      | `false` |\\n| lazyRender         | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                                            | -      | `false` |\\n| children           | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                          | -      | `true`  |\\n| renderNavLeft      | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                          | -      | `false` |\\n| renderNavRight     | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                                          | -      | `false` |\\n| onScroll           | -    | _&nbsp;&nbsp;(data:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollTop?:&nbsp;number&nbsp;&brvbar;&nbsp;null<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isFixed?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n| onClick            | -    | _&nbsp;&nbsp;(event:&nbsp;eventDetail)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                        | -      | `false` |\\n| onChange           | -    | _&nbsp;&nbsp;(event:&nbsp;eventDetail)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                        | -      | `false` |\\n| onDisabled         | -    | _&nbsp;&nbsp;(event:&nbsp;eventDetail)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                        | -      | `false` |\\n\\n### TabProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tab.d.ts)\\n\\n| 参数       | 说明 | 类型                                                | 默认值 | 必填    |\\n| ---------- | ---- | --------------------------------------------------- | ------ | ------- |\\n| dot        | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| info       | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| title      | -    | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n| disabled   | -    | _&nbsp;&nbsp;boolean<br/>_                          | -      | `false` |\\n| titleStyle | -    | _&nbsp;&nbsp;string<br/>_                           | -      | `false` |\\n| name       | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_ | -      | `false` |\\n| children   | -    | _&nbsp;&nbsp;ReactNode<br/>_                        | -      | `false` |\\n\";","export default \"# Tabbar 标签栏\\n\\n### 介绍\\n\\n底部导航栏，用于在不同页面之间进行切换。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Tabbar, TabbarItem } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const [active, setActive] = react.useState(0)\\n  return (\\n    <Tabbar active={active} onChange={(e) => e.detail}>\\n      <TabbarItem icon=\\\"home-o\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"search\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"friends-o\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"setting-o\\\">标签</TabbarItem>\\n    </Tabbar>\\n  )\\n}\\n```\\n\\n### 通过名称匹配\\n\\n在标签指定`name`属性的情况下，`vModel`的值为当前标签的`name`。\\n\\n```jsx\\nfunction Demo() {\\n  const [active, setActive] = react.useState('home')\\n  return (\\n    <Tabbar active={active} onChange={(e) => e.detail}>\\n      <TabbarItem name=\\\"home\\\" icon=\\\"home-o\\\">\\n        标签\\n      </TabbarItem>\\n      <TabbarItem name=\\\"search\\\" icon=\\\"search\\\">\\n        标签\\n      </TabbarItem>\\n      <TabbarItem name=\\\"friends\\\" icon=\\\"friends-o\\\">\\n        标签\\n      </TabbarItem>\\n      <TabbarItem name=\\\"setting\\\" icon=\\\"setting-o\\\">\\n        标签\\n      </TabbarItem>\\n    </Tabbar>\\n  )\\n}\\n```\\n\\n### 显示徽标\\n\\n```jsx\\nfunction Demo() {\\n  const [active, setActive] = react.useState('home')\\n  return (\\n    <Tabbar active={active} onChange={(e) => e.detail}>\\n      <TabbarItem icon=\\\"home-o\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"search\\\" dot>\\n        标签\\n      </TabbarItem>\\n      <TabbarItem icon=\\\"friends-o\\\" info=\\\"5\\\">\\n        标签\\n      </TabbarItem>\\n      <TabbarItem icon=\\\"setting-o\\\" info=\\\"20\\\">\\n        标签\\n      </TabbarItem>\\n    </Tabbar>\\n  )\\n}\\n```\\n\\n### 自定义图标\\n\\n```jsx\\nfunction Demo() {\\n  const [active, setActive] = react.useState('home')\\n\\n  return (\\n    <Tabbar active={active} onChange={(e) => setActive(e.detail)}>\\n      <TabbarItem\\n        info=\\\"3\\\"\\n        renderIcon={\\n          <Image\\n            src=\\\"https://img.yzcdn.cn/vant/user-inactive.png\\\"\\n            mode=\\\"aspectFit\\\"\\n            style=\\\"width: 30px; height: 18px;\\\"\\n          ></Image>\\n        }\\n        renderIconactive={\\n          <Image\\n            src=\\\"https://img.yzcdn.cn/vant/user-active.png\\\"\\n            mode=\\\"aspectFit\\\"\\n            style=\\\"width: 30px; height: 18px;\\\"\\n          ></Image>\\n        }\\n      >\\n        自定义\\n      </TabbarItem>\\n      <TabbarItem icon=\\\"search\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"setting-o\\\">标签</TabbarItem>\\n    </Tabbar>\\n  )\\n}\\n```\\n\\n### 自定义颜色\\n\\n```jsx\\nfunction Demo() {\\n  const [active, setActive] = react.useState(0)\\n  return (\\n    <Tabbar\\n      activeColor=\\\"#07c160\\\"\\n      inactiveColor=\\\"#000\\\"\\n      active={active}\\n      onChange={(e) => e.detail}\\n    >\\n      <TabbarItem icon=\\\"home-o\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"search\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"friends-o\\\">标签</TabbarItem>\\n      <TabbarItem icon=\\\"setting-o\\\">标签</TabbarItem>\\n    </Tabbar>\\n  )\\n}\\n```\\n\\n### 结合自定义 tabBar\\n\\n请参考 [微信官方文档](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/customTabbar.html) 与 [代码片段](https://developers.weixin.qq.com/s/vaXgTsmQ7hnm)。\\n\\n### TabbarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tabbar.d.ts)\\n\\n| 参数                | 说明 | 类型                                                                                                                                             | 默认值 | 必填    |\\n| ------------------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------ | ------ | ------- |\\n| active              | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                                                                              | -      | `false` |\\n| activeColor         | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                        | -      | `false` |\\n| inactiveColor       | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                        | -      | `false` |\\n| fixed               | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| placeholder         | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| border              | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| zIndex              | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                        | -      | `false` |\\n| safeAreaInsetBottom | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                       | -      | `false` |\\n| children            | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                     | -      | `false` |\\n| onChange            | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n\\n### TabbarItemProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tabbar.d.ts)\\n\\n| 参数             | 说明 | 类型                                                                               | 默认值 | 必填    |\\n| ---------------- | ---- | ---------------------------------------------------------------------------------- | ------ | ------- |\\n| info             | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                       | -      | `false` |\\n| name             | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>_                                | -      | `false` |\\n| icon             | -    | _&nbsp;&nbsp;string<br/>_                                                          | -      | `false` |\\n| dot              | -    | _&nbsp;&nbsp;boolean<br/>_                                                         | -      | `false` |\\n| iconPrefix       | -    | _&nbsp;&nbsp;string<br/>_                                                          | -      | `false` |\\n| renderIconActive | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                       | -      | `false` |\\n| renderIcon       | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                       | -      | `false` |\\n| children         | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                       | -      | `false` |\\n| onClick          | -    | _&nbsp;&nbsp;(name:&nbsp;string&nbsp;&brvbar;&nbsp;number)&nbsp;=>&nbsp;void<br/>_ | -      | `false` |\\n\";","export default \"# TreeSelect 分类选择\\n\\n### 介绍\\n\\n用于从一组相关联的数据集合中进行选择。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { TreeSelect } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 单选模式\\n\\n可以在任意位置上使用 vanTreeSelect 标签。传入对应的数据即可。此组件支持单选或多选，具体行为完全基于事件 clickItem 的实现逻辑如何为属性 activeId 赋值，当 activeId 为数组时即为多选状态。\\n\\n```jsx\\nfunction Demo() {\\n  const { items } = COMMON\\n  const [state, changeState] = react.useState({\\n    mainActiveIndex: 0,\\n    activeId: null,\\n  })\\n\\n  const setState = (newState) => {\\n    changeState({\\n      ...state,\\n      ...newState,\\n    })\\n  }\\n\\n  const onClickNav = ({ detail = {} }) => {\\n    setState({\\n      mainActiveIndex: detail.index || 0,\\n    })\\n  }\\n\\n  const onClickItem = ({ detail = {} }) => {\\n    const activeId = state.activeId === detail.id ? null : detail.id\\n    setState({\\n      activeId,\\n    })\\n  }\\n\\n  return (\\n    <TreeSelect\\n      items={items}\\n      mainActiveIndex={state.mainActiveIndex}\\n      activeId={state.activeId}\\n      onClickNav={onClickNav}\\n      onClickItem={onClickItem}\\n    />\\n  )\\n}\\n```\\n\\n传入数据结构\\n\\n```js common\\nconst items = [\\n  {\\n    text: '浙江',\\n    children: [\\n      {\\n        text: '杭州',\\n        id: 1,\\n      },\\n      {\\n        text: '温州',\\n        id: 2,\\n      },\\n      {\\n        text: '宁波',\\n        id: 3,\\n        disabled: true,\\n      },\\n      {\\n        text: '义乌',\\n        id: 4,\\n      },\\n    ],\\n  },\\n  {\\n    text: '江苏',\\n    children: [\\n      {\\n        text: '南京',\\n        id: 5,\\n      },\\n      {\\n        text: '无锡',\\n        id: 6,\\n      },\\n      {\\n        text: '徐州',\\n        id: 7,\\n      },\\n      {\\n        text: '苏州',\\n        id: 8,\\n      },\\n    ],\\n  },\\n  {\\n    text: '福建',\\n    children: [\\n      {\\n        text: '泉州',\\n        id: 9,\\n      },\\n      {\\n        text: '厦门',\\n        id: 10,\\n      },\\n    ],\\n  },\\n]\\n```\\n\\n### 多选模式\\n\\n```jsx\\nfunction Demo() {\\n  const { items } = COMMON\\n  const [state, changeState] = react.useState({\\n    mainActiveIndex: 0,\\n    activeIds: [],\\n  })\\n\\n  const setState = (newState) => {\\n    changeState({\\n      ...state,\\n      ...newState,\\n    })\\n  }\\n\\n  const onClickNav = ({ detail = {} }) => {\\n    setState({\\n      mainActiveIndex: detail.index || 0,\\n    })\\n  }\\n\\n  const onClickItem = ({ detail = {} }) => {\\n    const { activeIds } = state\\n    if (activeIds.includes(detail.id)) {\\n      activeIds.splice(activeIds.indexOf(detail.id), 1)\\n    } else {\\n      activeIds.push(detail.id)\\n    }\\n    console.info(activeIds)\\n    setState({\\n      activeIds: [...activeIds],\\n    })\\n  }\\n\\n  return (\\n    <TreeSelect\\n      items={items}\\n      mainActiveIndex={state.mainActiveIndex}\\n      activeId={state.activeIds}\\n      onClickNav={onClickNav}\\n      onClickItem={onClickItem}\\n      max={2}\\n    />\\n  )\\n}\\n```\\n\\n### 自定义内容\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <TreeSelect\\n      items={[{ text: '自定义' }]}\\n      height=\\\"55vw\\\"\\n      mainActiveIndex={0}\\n      renderContent={<Image src=\\\"https://img.yzcdn.cn/vant/apple-1.jpg\\\" />}\\n    />\\n  )\\n}\\n```\\n\\n### TreeSelectProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/tree-select.d.ts)\\n\\n| 参数            | 说明 | 类型| 默认值 | 必填    |\\n| --------------- | ---- || ------ | ------- |\\n| items           | -    | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;text:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;badge?:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;dot?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;disabled?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;children?:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;number&nbsp;&brvbar;&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disabled?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;}[]<br/>&nbsp;&nbsp;}[]<br/>_ | -      | `false` |\\n| activeId        | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number&nbsp;&brvbar;&nbsp;number[]&nbsp;&brvbar;&nbsp;string[]<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | -      | `false` |\\n| mainActiveIndex | -    | _&nbsp;&nbsp;number<br| -      | `false` |\\n| value           | -    | _&nbsp;&nbsp;number<br| -      | `false` |\\n| height          | -    | _&nbsp;&nbsp;number&nbsp;&brvbar;&nbsp;string<br| -      | `false` |\\n| max             | -    | _&nbsp;&nbsp;number<br| -      | `false` |\\n| selectedIcon    | -    | _&nbsp;&nbsp;string<br| -      | `false` |\\n| onClickItem     | -    | _&nbsp;&nbsp;(<br/>&nbsp;&nbsp;&nbsp;&nbsp;event:&nbsp;TouchEvent&nbsp;&&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;string&nbsp;&brvbar;&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disabled?:&nbsp;boolean<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;)&nbsp;=>&nbsp;void<br/>_                                                                                                          | -      | `false` |\\n| onClickNav      | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{&nbsp;index:&nbsp;number&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | -      | `false` |\\n| renderContent   | -    | _&nbsp;&nbsp;ReactNode<br| -      | `false` |\\n\";","export default \"# Area 省市区选择\\n\\n### 介绍\\n\\n省市区选择组件通常与 [弹出层](#/popup) 组件配合使用。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Area } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n初始化省市区组件时，需要通过 `areaList` 属性传入省市区数据。\\n\\n```jsx\\nfunction Demo() {\\n  const areaList = {\\n    province_list: {\\n      110000: '北京市',\\n      120000: '天津市',\\n    },\\n    city_list: {\\n      110100: '北京市',\\n      120100: '天津市',\\n    },\\n    county_list: {\\n      110101: '东城区',\\n      110102: '西城区',\\n    },\\n  }\\n  return (\\n    <View>\\n      <Area areaList={areaList} />\\n    </View>\\n  )\\n}\\n```\\n\\n### areaList 格式\\n\\nareaList 为对象结构，包含 `province_list`、`city_list`、`county_list` 三个 key。\\n\\n每项以地区码作为 key，省市区名字作为 value。地区码为 6 位数字，前两位代表省份，中间两位代表城市，后两位代表区县，以 0 补足 6 位。比如北京的地区码为 `11`，以 0 补足 6 位，为 `110000`。\\n\\n示例数据如下：\\n\\n```js\\nconst areaList = {\\n  province_list: {\\n    110000: '北京市',\\n    120000: '天津市',\\n  },\\n  city_list: {\\n    110100: '北京市',\\n    120100: '天津市',\\n  },\\n  county_list: {\\n    110101: '东城区',\\n    110102: '西城区',\\n    // ....\\n  },\\n}\\n```\\n\\n### 选中省市区\\n\\nVant 官方提供了一份默认的省市区数据，可以通过 [@vant/area-data](https://github.com/youzan/vant/tree/dev/packages/vant-area-data) 引入。\\n\\n```bash\\nyarn add @vant/area-data\\n```\\n\\n如果想选中某个省市区，需要传入一个`value`属性，绑定对应的省市区`code`。\\n\\n```jsx\\nimport { areaList } from '@vant/area-data'\\nfunction Demo() {\\n  return <Area areaList={areaList} value=\\\"110101\\\" />\\n}\\n```\\n\\n### 配置显示列\\n\\n可以通过`columnsNum`属性配置省市区显示的列数，默认情况下会显示省市区，当你设置为`2`，则只会显示省市选择。\\n\\n```jsx\\nimport { areaList } from '@vant/area-data'\\nfunction Demo() {\\n  return <Area areaList={areaList} columnsNum={2} title=\\\"标题\\\" />\\n}\\n```\\n\\n### 配置列占位提示文字\\n\\n可以通过`columnsPlaceholder`属性配置每一列的占位提示文字。\\n\\n```jsx\\nimport { areaList } from '@vant/area-data'\\n\\nfunction Demo() {\\n  return (\\n    <Area\\n      areaList={areaList}\\n      columnsPlaceholder={['请选择', '请选择', '请选择']}\\n      title=\\\"标题\\\"\\n    />\\n  )\\n}\\n```\\n\\n### AreaProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/area.d.ts)\\n\\n| 参数               | 说明 | 类型                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | 默认值 | 必填    |\\n| ------------------ | ---- || ------ | ------- |\\n| showToolbar        | -    | _&nbsp;&nbsp;boolean<br| -      | `false` |\\n| value              | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | -      | `false` |\\n| areaList           | -    | _&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;province_list:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[x:&nbsp;number&nbsp;&brvbar;&nbsp;string]:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;city_list:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[x:&nbsp;number&nbsp;&brvbar;&nbsp;string]:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;county_list:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[x:&nbsp;number&nbsp;&brvbar;&nbsp;string]:&nbsp;string<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;}<br/>_ | -      | `false` |\\n| columnsNum         | -    | _&nbsp;&nbsp;string&nbsp;&brvbar;&nbsp;number<br| -      | `false` |\\n| columnsPlaceholder | -    | _&nbsp;&nbsp;string[]<br| -      | `false` |\\n| onChange           | -    | _&nbsp;&nbsp;(event:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;detail:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;number[]&nbsp;&brvbar;&nbsp;string[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;picker:&nbsp;IPickerInstance<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;number<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;})&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                        | -      | `false` |\\n\";","export default \"# Card 商品卡片\\n\\n### 介绍\\n\\n商品卡片，用于展示商品的图片、价格等信息。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { Card } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Card\\n      num=\\\"2\\\"\\n      price=\\\"2.00\\\"\\n      desc=\\\"描述信息\\\"\\n      title=\\\"商品标题\\\"\\n      thumb=\\\"https://img.yzcdn.cn/upload_files/2017/07/02/af5b9f44deaeb68000d7e4a711160c53.jpg\\\"\\n    />\\n  )\\n}\\n```\\n\\n### 高级用法\\n\\n可以通过插槽添加定制内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <Card\\n      num=\\\"2\\\"\\n      tag=\\\"标签\\\"\\n      price=\\\"10.00\\\"\\n      desc=\\\"描述信息\\\"\\n      title=\\\"商品标题\\\"\\n      thumb=\\\"https://img.yzcdn.cn/upload_files/2017/07/02/af5b9f44deaeb68000d7e4a711160c53.jpg\\\"\\n      renderFooter={\\n        <View>\\n          <Button size=\\\"mini\\\">按钮1</Button>\\n          <Button size=\\\"mini\\\">按钮2</Button>\\n        </View>\\n      }\\n    />\\n  )\\n}\\n```\\n\\n### CardProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/card.d.ts)\\n\\n| 参数              | 说明 | 类型                                          | 默认值 | 必填    |\\n| ----------------- | ---- | --------------------------------------------- | ------ | ------- |\\n| tag               | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| num               | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| desc              | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| thumb             | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| title             | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| price             | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `true`  |\\n| centered          | -    | _&nbsp;&nbsp;boolean<br/>_                    | -      | `false` |\\n| lazyLoad          | -    | _&nbsp;&nbsp;boolean<br/>_                    | -      | `false` |\\n| thumbLink         | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| originPrice       | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| thumbMode         | -    | _&nbsp;&nbsp;keyof&nbsp;ImageProps.mode<br/>_ | -      | `false` |\\n| currency          | -    | _&nbsp;&nbsp;string<br/>_                     | -      | `false` |\\n| renderFooter      | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderBottom      | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderNum         | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderOriginPrice | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderPrice       | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderPriceTop    | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderTags        | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderDesc        | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderTitle       | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderTag         | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n| renderThumb       | -    | _&nbsp;&nbsp;ReactNode<br/>_                  | -      | `false` |\\n\";","export default \"# SubmitBar 提交订单栏\\n\\n### 介绍\\n\\n用于展示订单金额与提交订单。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { SubmitBar } from '@antmjs/vantui'\\n```\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <SubmitBar\\n      price={3050}\\n      buttonText=\\\"提交订单\\\"\\n      onSubmit={() => console.info('提交')}\\n    />\\n  )\\n}\\n```\\n\\n### 禁用状态\\n\\n禁用状态下不会触发`submit`事件。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <SubmitBar\\n      disabled={true}\\n      price={3050}\\n      buttonText=\\\"提交订单\\\"\\n      tip=\\\"您的收货地址不支持同城送, 我们已为您推荐快递\\\"\\n      tipIcon=\\\"infoO\\\"\\n      onSubmit={() => console.info('提交')}\\n    />\\n  )\\n}\\n```\\n\\n### 加载状态\\n\\n加载状态下不会触发`submit`事件。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <SubmitBar\\n      loading={true}\\n      price={3050}\\n      buttonText=\\\"提交订单\\\"\\n      onSubmit={() => console.info('提交')}\\n    />\\n  )\\n}\\n```\\n\\n### 高级用法\\n\\n通过插槽插入自定义内容。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <SubmitBar\\n      price={3050}\\n      buttonText=\\\"提交订单\\\"\\n      tip={true}\\n      renderTip={\\n        <View>\\n          您的收货地址不支持同城送,\\n          <Text>修改地址</Text>\\n        </View>\\n      }\\n    >\\n      <Tag type=\\\"primary\\\">标签</Tag>\\n    </SubmitBar>\\n  )\\n}\\n```\\n\\n### SubmitBarProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/submit-bar.d.ts)\\n\\n| 参数                | 说明 | 类型                                                                                                                                                                                                                                                                                     | 默认值 | 必填    |\\n| ------------------- | ---- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------- |\\n| tip                 | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| tipIcon             | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| price               | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| label               | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| loading             | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| disabled            | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| buttonText          | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| currency            | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| buttonType          | -    | _&nbsp;&nbsp;attr:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"default\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"primary\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"info\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"warning\\\"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&brvbar;&nbsp;\\\"danger\\\"<br/>_ | -      | `false` |\\n| decimalLength       | -    | _&nbsp;&nbsp;number<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| suffixLabel         | -    | _&nbsp;&nbsp;string<br/>_                                                                                                                                                                                                                                                                | -      | `false` |\\n| safeAreaInsetBottom | -    | _&nbsp;&nbsp;boolean<br/>_                                                                                                                                                                                                                                                               | -      | `false` |\\n| children            | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| renderTop           | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| renderTip           | -    | _&nbsp;&nbsp;ReactNode<br/>_                                                                                                                                                                                                                                                             | -      | `false` |\\n| onSubmit            | -    | _&nbsp;&nbsp;(event:&nbsp;ITouchEvent)&nbsp;=>&nbsp;void<br/>_                                                                                                                                                                                                                           | -      | `false` |\\n\";","export default \"# GoodsAction 商品导航\\n\\n### 介绍\\n\\n用于为商品相关操作提供便捷交互。\\n\\n### 引入\\n\\n在 Taro 文件中引入组件\\n\\n```js\\nimport { GoodsAction } from '@antmjs/vantui'\\nimport { GoodsActionIcon } from '@antmjs/vantui'\\nimport { GoodsActionButton } from '@antmjs/vantui'\\n```\\n\\n> Vant Weapp 1.0 版本开始支持此组件，升级方式参见[快速上手](#/quickstart)。\\n\\n## 代码演示\\n\\n### 基础用法\\n\\n```jsx\\nfunction Demo() {\\n  const click = function () {\\n    Toast.show({\\n      message: '点击demo1',\\n    })\\n  }\\n\\n  return (\\n    <GoodsAction safeAreaInsetBottom={false}>\\n      <GoodsActionIcon icon=\\\"chat-o\\\" text=\\\"客服\\\" onClick={click} />\\n      <GoodsActionIcon icon=\\\"cart-o\\\" text=\\\"购物车\\\" onClick={click} />\\n      <GoodsActionButton text=\\\"加入购物车\\\" type=\\\"warning\\\" onClick={click} />\\n      <GoodsActionButton text=\\\"立即购买\\\" onClick={click} />\\n      <Toast id=\\\"GoodsAction-demo1\\\" />\\n    </GoodsAction>\\n  )\\n}\\n```\\n\\n### 提示信息\\n\\n设置`dot`属性后，会在图标右上角展示一个小红点。设置`info`属性后，会在图标右上角展示相应的徽标。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <GoodsAction>\\n      <GoodsActionIcon icon=\\\"chat-o\\\" text=\\\"客服\\\" dot={true} />\\n      <GoodsActionIcon icon=\\\"cart-o\\\" text=\\\"购物车\\\" info=\\\"5\\\" />\\n      <GoodsActionIcon icon=\\\"shop-o\\\" text=\\\"店铺\\\" />\\n      <GoodsActionButton text=\\\"加入购物车\\\" type=\\\"warning\\\" />\\n      <GoodsActionButton text=\\\"立即购买\\\" />\\n    </GoodsAction>\\n  )\\n}\\n```\\n\\n### 自定义按钮颜色\\n\\n通过`color`属性可以自定义按钮的颜色，支持传入`linearGradient`渐变色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <GoodsAction>\\n      <GoodsActionIcon icon=\\\"chat-o\\\" text=\\\"客服\\\" />\\n      <GoodsActionIcon icon=\\\"shop-o\\\" text=\\\"店铺\\\" />\\n      <GoodsActionButton color=\\\"#be99ff\\\" text=\\\"加入购物车\\\" type=\\\"warning\\\" />\\n      <GoodsActionButton color=\\\"#7232dd\\\" text=\\\"立即购买\\\" />\\n    </GoodsAction>\\n  )\\n}\\n```\\n\\n### 朴素按钮\\n\\n通过`plain`属性将按钮设置为朴素按钮，朴素按钮的文字为按钮颜色，背景为白色。\\n\\n```jsx\\nfunction Demo() {\\n  return (\\n    <GoodsAction>\\n      <GoodsActionIcon icon=\\\"chat-o\\\" text=\\\"客服\\\" />\\n      <GoodsActionIcon icon=\\\"cart-o\\\" text=\\\"购物车\\\" info=\\\"5\\\" />\\n      <GoodsActionIcon icon=\\\"shop-o\\\" text=\\\"店铺\\\" />\\n      <GoodsActionButton color=\\\"#7232dd\\\" text=\\\"加入购物\\\" type=\\\"warning\\\" />\\n      <GoodsActionButton plain color=\\\"#7232dd\\\" text=\\\"立即购买\\\" />\\n    </GoodsAction>\\n  )\\n}\\n```\\n\\n### GoodsActionProps [[详情]](https://github.com/AntmJS/vantui/tree/main/packages/vantui/types/goods-action.d.ts)\\n\\n| 参数                | 说明 | 类型                         | 默认值 | 必填    |\\n| ------------------- | ---- | ---------------------------- | ------ | ------- |\\n| safeAreaInsetBottom | -    | _&nbsp;&nbsp;boolean<br/>_   | -      | `false` |\\n| children            | -    | _&nbsp;&nbsp;ReactNode<br/>_ | -      | `true`  |\\n\";","export default \"### 说明\\n\\n具体组件使用方式暂时请查看[有赞文档](https://youzan.github.io/vant-weapp/#/home)\\n\";"],"names":["deferred","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__vantui_base__","md"],"sourceRoot":""}